<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 起步于308的小菜菜]]></title>
  <link href="http://mdkvimer.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://mdkvimer.github.io/"/>
  <updated>2013-05-26T22:14:31+08:00</updated>
  <id>http://mdkvimer.github.io/</id>
  <author>
    <name><![CDATA[mdkvimer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fork经典问题]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/24/fork/"/>
    <updated>2013-05-24T21:59:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/24/fork</id>
    <content type="html"><![CDATA[<p>经典问题1,会输出多少?</p>

<p>```</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;sys/types.h></h1>

<h1>include&lt;unistd.h></h1>

<p>int main()
{</p>

<pre><code>int i;
for(i = 0 ; i &lt; 2 ; i++)
{
    fork();
    printf("-");
}
return 0;
</code></pre>

<p>}
```</p>

<p>经典问题2，会输出多少?</p>

<p>```</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;sys/types.h></h1>

<h1>include&lt;unistd.h></h1>

<p>int main()
{</p>

<pre><code>int i;
for(i = 0 ; i &lt; 2 ; i++)
{
    fork();
    printf("-\n");
    fflush(stdout);
}
return 0;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awk技巧]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/24/awkji-qiao/"/>
    <updated>2013-05-24T17:12:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/24/awkji-qiao</id>
    <content type="html"><![CDATA[<p>awk用法和技巧小结</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (awk)</span> <a href='/downloads/code/awk'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="nt">awk</span> <span class="err">用法：</span><span class="nt">awk</span> <span class="s1">&#39; pattern {action} &#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">变量名</span> <span class="err">含义</span>
</span><span class='line'><span class="nt">ARGC</span> <span class="err">命令行变元个数</span>
</span><span class='line'><span class="nt">ARGV</span> <span class="err">命令行变元数组</span>
</span><span class='line'><span class="nt">FILENAME</span> <span class="err">当前输入文件名</span>
</span><span class='line'><span class="nt">FNR</span> <span class="err">当前文件中的记录号</span>
</span><span class='line'><span class="nt">FS</span> <span class="err">输入域分隔符，默认为一个空格</span>
</span><span class='line'><span class="nt">RS</span> <span class="err">输入记录分隔符</span>
</span><span class='line'><span class="nt">NF</span> <span class="err">当前记录里域个数</span>
</span><span class='line'><span class="nt">NR</span> <span class="err">到目前为止记录数</span>
</span><span class='line'><span class="nt">OFS</span> <span class="err">输出域分隔符</span>
</span><span class='line'><span class="nt">ORS</span> <span class="err">输出记录分隔符</span>
</span><span class='line'>
</span><span class='line'><span class="nt">1</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;/101/&#39;</span> <span class="nt">file</span> <span class="err">显示文件</span><span class="nt">file</span><span class="err">中包含</span><span class="nt">101</span><span class="err">的匹配行。</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/101/,/105/&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;$1 == 5&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;$1 == &quot;CT&quot;&#39;</span> <span class="nt">file</span> <span class="err">注意必须带双引号</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;$1 * $2 &gt;100 &#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;$2 &gt;5 &amp;&amp; $2&lt;=15&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="nt">2</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;{print NR,NF,$1,$NF,}&#39;</span> <span class="nt">file</span> <span class="err">显示文件</span><span class="nt">file</span><span class="err">的当前记录号、域数和每一行的第一个和最后一个域。</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/101/ {print $1,$2 + 10}&#39;</span> <span class="nt">file</span> <span class="err">显示文件</span><span class="nt">file</span><span class="err">的匹配行的第一、二个域加</span><span class="nt">10</span><span class="err">。</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/101/ {print $1$2}&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/101/ {print $1 $2}&#39;</span> <span class="nt">file</span> <span class="err">显示文件</span><span class="nt">file</span><span class="err">的匹配行的第一、二个域，但显示时域中间没有分隔符。</span>
</span><span class='line'><span class="nt">3</span><span class="err">、</span><span class="nt">df</span> <span class="o">|</span> <span class="nt">awk</span> <span class="s1">&#39;$4&gt;1000000 &#39;</span> <span class="err">通过管道符获得输入，如：显示第</span><span class="nt">4</span><span class="err">个域满足条件的行。</span>
</span><span class='line'><span class="nt">4</span><span class="err">、</span><span class="nt">awk</span> <span class="nt">-F</span> <span class="s2">&quot;|&quot;</span> <span class="s1">&#39;{print $1}&#39;</span> <span class="nt">file</span> <span class="err">按照新的分隔符“</span><span class="o">|</span><span class="err">”进行操作。</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;BEGIN { FS=&quot;</span><span class="cp">[</span><span class="p">:</span> <span class="o">\</span><span class="nb">t</span><span class="o">|</span><span class="cp">]</span><span class="s1">&quot; }</span>
</span><span class='line'><span class="s1">{print $1,$2,$3}&#39;</span> <span class="nt">file</span> <span class="err">通过设置输入分隔符（</span><span class="nt">FS</span><span class="o">=</span><span class="s2">&quot;</span><span class="cp">[</span><span class="p">:</span> <span class="o">\</span><span class="nb">t</span><span class="o">|</span><span class="cp">]</span><span class="s2">&quot;</span><span class="err">）修改输入分隔符。</span>
</span><span class='line'>
</span><span class='line'><span class="nt">Sep</span><span class="o">=</span><span class="s2">&quot;|&quot;</span>
</span><span class='line'><span class="nt">awk</span> <span class="nt">-F</span> <span class="err">$</span><span class="nt">Sep</span> <span class="s1">&#39;{print $1}&#39;</span> <span class="nt">file</span> <span class="err">按照环境变量</span><span class="nt">Sep</span><span class="err">的值做为分隔符。</span>
</span><span class='line'><span class="nt">awk</span> <span class="nt">-F</span> <span class="s1">&#39;</span><span class="cp">[</span> <span class="p">:</span><span class="o">\</span><span class="nb">t</span><span class="o">|</span><span class="cp">]</span><span class="s1">&#39;</span> <span class="s1">&#39;{print $1}&#39;</span> <span class="nt">file</span> <span class="err">按照正则表达式的值做为分隔符，这里代表空格、</span><span class="o">:</span><span class="err">、</span><span class="nt">TAB</span><span class="err">、</span><span class="o">|</span><span class="err">同时做为分隔符。</span>
</span><span class='line'><span class="nt">awk</span> <span class="nt">-F</span> <span class="s1">&#39;</span><span class="cp">[][]</span><span class="s1">&#39;</span> <span class="s1">&#39;{print $1}&#39;</span> <span class="nt">file</span> <span class="err">按照正则表达式的值做为分隔符，这里代表</span><span class="cp">[</span><span class="err">、</span><span class="cp">]</span>
</span><span class='line'><span class="nt">5</span><span class="err">、</span><span class="nt">awk</span> <span class="nt">-f</span> <span class="nt">awkfile</span> <span class="nt">file</span> <span class="err">通过文件</span><span class="nt">awkfile</span><span class="err">的内容依次进行控制。</span>
</span><span class='line'><span class="nt">cat</span> <span class="nt">awkfile</span>
</span><span class='line'><span class="o">/</span><span class="nt">101</span><span class="o">/</span><span class="p">{</span><span class="n">print</span> <span class="s2">&quot;\047 Hello! \047&quot;</span><span class="p">}</span> <span class="nt">--</span><span class="err">遇到匹配行以后打印</span> <span class="s1">&#39; Hello! &#39;</span><span class="o">.</span><span class="err">\</span><span class="nt">047</span><span class="err">代表单引号。</span>
</span><span class='line'><span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="m">1</span><span class="o">,</span><span class="err">$</span><span class="m">2</span><span class="p">}</span> <span class="nt">--</span><span class="err">因为没有模式控制，打印每一行的前两个域。</span>
</span><span class='line'><span class="nt">6</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;$1 ~ /101/ {print $1}&#39;</span> <span class="nt">file</span> <span class="err">显示文件中第一个域匹配</span><span class="nt">101</span><span class="err">的行（记录）。</span>
</span><span class='line'><span class="nt">7</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;BEGIN { OFS=&quot;%&quot;}</span>
</span><span class='line'><span class="s1">{print $1,$2}&#39;</span> <span class="nt">file</span> <span class="err">通过设置输出分隔符（</span><span class="nt">OFS</span><span class="o">=</span><span class="s2">&quot;%&quot;</span><span class="err">）修改输出格式。</span>
</span><span class='line'><span class="nt">8</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;BEGIN { max=100 ;print &quot;max=&quot; max} BEGIN 表示在处理任意行之前进行的操作。</span>
</span><span class='line'><span class="s1">{max=($1 &gt;max ?$1:max); print $1,&quot;Now max is &quot;max}&#39;</span> <span class="nt">file</span> <span class="err">取得文件第一个域的最大值。</span>
</span><span class='line'><span class="err">（表达式</span><span class="nt">1</span><span class="o">?</span><span class="err">表达式</span><span class="nt">2</span><span class="o">:</span><span class="err">表达式</span><span class="nt">3</span> <span class="err">相当于：</span>
</span><span class='line'><span class="nt">if</span> <span class="o">(</span><span class="err">表达式</span><span class="nt">1</span><span class="o">)</span>
</span><span class='line'><span class="err">表达式</span><span class="nt">2</span>
</span><span class='line'><span class="nt">else</span>
</span><span class='line'><span class="err">表达式</span><span class="nt">3</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{print ($1&gt;4 ? &quot;high &quot;$1: &quot;low &quot;$1)}&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="nt">9</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;$1 * $2 &gt;100 {print $1}&#39;</span> <span class="nt">file</span> <span class="err">显示文件中第一个域匹配</span><span class="nt">101</span><span class="err">的行（记录）。</span>
</span><span class='line'><span class="nt">10</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;{$1 == &#39;</span><span class="nt">Chi</span><span class="s1">&#39; {$3 = &#39;</span><span class="nt">China</span><span class="s1">&#39;; print}&#39;</span> <span class="nt">file</span> <span class="err">找到匹配行后先将第</span><span class="nt">3</span><span class="err">个域替换后再显示该行（记录）。</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{$7 %= 3; print $7}&#39;</span> <span class="nt">file</span> <span class="err">将第</span><span class="nt">7</span><span class="err">域被</span><span class="nt">3</span><span class="err">除，并将余数赋给第</span><span class="nt">7</span><span class="err">域再打印。</span>
</span><span class='line'><span class="nt">11</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;/tom/ {wage=$2+$3; printf wage}&#39;</span> <span class="nt">file</span> <span class="err">找到匹配行后为变量</span><span class="nt">wage</span><span class="err">赋值并打印该变量。</span>
</span><span class='line'><span class="nt">12</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;/tom/ {count++;}</span>
</span><span class='line'><span class="s1">END {print &quot;tom was found &quot;count&quot; times&quot;}&#39;</span> <span class="nt">file</span> <span class="nt">END</span><span class="err">表示在所有输入行处理完后进行处理。</span>
</span><span class='line'><span class="nt">13</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;gsub(/\$/,&quot;&quot;);gsub(/,/,&quot;&quot;); cost+=$4;</span>
</span><span class='line'><span class="s1">END {print &quot;The total is $&quot; cost&gt;&quot;filename&quot;}&#39;</span> <span class="nt">file</span> <span class="nt">gsub</span><span class="err">函数用空串替换$和</span><span class="o">,</span><span class="err">再将结果输出到</span><span class="nt">filename</span><span class="err">中。</span>
</span><span class='line'><span class="nt">1</span> <span class="nt">2</span> <span class="nt">3</span> <span class="err">$</span><span class="nt">1</span><span class="o">,</span><span class="nt">200</span><span class="nc">.00</span>
</span><span class='line'><span class="nt">1</span> <span class="nt">2</span> <span class="nt">3</span> <span class="err">$</span><span class="nt">2</span><span class="o">,</span><span class="nt">300</span><span class="nc">.00</span>
</span><span class='line'><span class="nt">1</span> <span class="nt">2</span> <span class="nt">3</span> <span class="err">$</span><span class="nt">4</span><span class="o">,</span><span class="nt">000</span><span class="nc">.00</span>
</span><span class='line'>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{gsub(/\$/,&quot;&quot;);gsub(/,/,&quot;&quot;);</span>
</span><span class='line'><span class="s1">if ($4&gt;1000&amp;&amp;$4&lt;2000) c1+=$4;</span>
</span><span class='line'><span class="s1">else if ($4&gt;2000&amp;&amp;$4&lt;3000) c2+=$4;</span>
</span><span class='line'><span class="s1">else if ($4&gt;3000&amp;&amp;$4&lt;4000) c3+=$4;</span>
</span><span class='line'><span class="s1">else c4+=$4; }</span>
</span><span class='line'><span class="s1">END {printf &quot;c1=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">;c2=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">;c3=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">;c4=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">\n&quot;,c1,c2,c3,c4}&quot;&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="err">通过</span><span class="nt">if</span><span class="err">和</span><span class="nt">else</span> <span class="nt">if</span><span class="err">完成条件语句</span>
</span><span class='line'>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{gsub(/\$/,&quot;&quot;);gsub(/,/,&quot;&quot;);</span>
</span><span class='line'><span class="s1">if ($4&gt;3000&amp;&amp;$4&lt;4000) exit;</span>
</span><span class='line'><span class="s1">else c4+=$4; }</span>
</span><span class='line'><span class="s1">END {printf &quot;c1=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">;c2=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">;c3=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">;c4=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">\n&quot;,c1,c2,c3,c4}&quot;&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="err">通过</span><span class="nt">exit</span><span class="err">在某条件时退出，但是仍执行</span><span class="nt">END</span><span class="err">操作。</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{gsub(/\$/,&quot;&quot;);gsub(/,/,&quot;&quot;);</span>
</span><span class='line'><span class="s1">if ($4&gt;3000) next;</span>
</span><span class='line'><span class="s1">else c4+=$4; }</span>
</span><span class='line'><span class="s1">END {printf &quot;c4=</span><span class="cp">[</span><span class="o">%</span><span class="nb">d</span><span class="cp">]</span><span class="s1">\n&quot;,c4}&quot;&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="err">通过</span><span class="nt">next</span><span class="err">在某条件时跳过该行，对下一行执行操作。</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">14</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;{ print FILENAME,$0 }&#39;</span> <span class="nt">file1</span> <span class="nt">file2</span> <span class="nt">file3</span><span class="o">&gt;</span><span class="nt">fileall</span> <span class="err">把</span><span class="nt">file1</span><span class="err">、</span><span class="nt">file2</span><span class="err">、</span><span class="nt">file3</span><span class="err">的文件内容全部写到</span><span class="nt">fileall</span><span class="err">中，格式为</span>
</span><span class='line'><span class="err">打印文件并前置文件名。</span>
</span><span class='line'><span class="nt">15</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39; $1!=previous { close(previous); previous=$1 }</span>
</span><span class='line'><span class="s1">{print substr($0,index($0,&quot; &quot;) +1)&gt;$1}&#39;</span> <span class="nt">fileall</span> <span class="err">把合并后的文件重新分拆为</span><span class="nt">3</span><span class="err">个文件。并与原文件一致。</span>
</span><span class='line'><span class="nt">16</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;BEGIN {&quot;date&quot;|getline d; print d}&#39;</span> <span class="err">通过管道把</span><span class="nt">date</span><span class="err">的执行结果送给</span><span class="nt">getline</span><span class="err">，并赋给变量</span><span class="nt">d</span><span class="err">，然后打印。</span>
</span><span class='line'><span class="nt">17</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;BEGIN {system(&quot;echo \&quot;Input your name:\\c\&quot;&quot;); getline d;print &quot;\nYour name is&quot;,d,&quot;\b!\n&quot;}&#39;</span>
</span><span class='line'><span class="err">通过</span><span class="nt">getline</span><span class="err">命令交互输入</span><span class="nt">name</span><span class="err">，并显示出来。</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;BEGIN {FS=&quot;:&quot;; while(getline&lt; &quot;/etc/passwd&quot; &gt;0) { if($1~&quot;050</span><span class="cp">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="cp">]</span><span class="s1">_&quot;) print $1}}&#39;</span>
</span><span class='line'><span class="err">打印</span><span class="o">/</span><span class="nt">etc</span><span class="o">/</span><span class="nt">passwd</span><span class="err">文件中用户名包含</span><span class="nt">050x_</span><span class="err">的用户名。</span>
</span><span class='line'>
</span><span class='line'><span class="nt">18</span><span class="err">、</span><span class="nt">awk</span> <span class="s1">&#39;{ i=1;while(i awk &#39;</span><span class="p">{</span> <span class="n">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="m">1</span><span class="p">;</span><span class="n">i</span> <span class="n">type</span> <span class="n">file</span><span class="o">|</span><span class="n">awk</span> <span class="o">-</span><span class="n">F</span> <span class="s2">&quot;/&quot;</span> <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">{ for(i=1;i { if(i==NF-1) { printf &quot;%s&quot;,$i }</span>
</span><span class='line'><span class="s1">else { printf &quot;%s/&quot;,$i } }}&#39;</span> <span class="err">显示一个文件的全路径。</span>
</span><span class='line'><span class="err">用</span><span class="n">for</span><span class="err">和</span><span class="n">if</span><span class="err">显示日期</span>
</span><span class='line'><span class="n">awk</span> <span class="s1">&#39;BEGIN {</span>
</span><span class='line'><span class="s1">for(j=1;j&lt;=12;j++)</span>
</span><span class='line'><span class="s1">{ flag=0;</span>
</span><span class='line'><span class="s1">printf &quot;\n%d月份\n&quot;,j;</span>
</span><span class='line'><span class="s1">for(i=1;i&lt;=31;i++)</span>
</span><span class='line'><span class="s1">{</span>
</span><span class='line'><span class="s1">if (j==2&amp;&amp;i&gt;28) flag=1;</span>
</span><span class='line'><span class="s1">if ((j==4||j==6||j==9||j==11)&amp;&amp;i&gt;30) flag=1;</span>
</span><span class='line'><span class="s1">if (flag==0) {printf &quot;%02d%02d &quot;,j,i}</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span><span class='line'><span class="m">19</span><span class="err">、在</span><span class="n">awk</span><span class="err">中调用系统变量必须用单引号，如果是双引号，则表示字符串</span>
</span><span class='line'><span class="n">Flag</span><span class="o">=</span><span class="n">abcd</span>
</span><span class='line'><span class="n">awk</span> <span class="s1">&#39;{print &#39;</span><span class="err">$</span><span class="n">Flag</span><span class="s1">&#39;}&#39;</span> <span class="err">结果为</span><span class="n">abcd</span>
</span><span class='line'><span class="n">awk</span> <span class="s1">&#39;{print &quot;$Flag&quot;}&#39;</span> <span class="err">结果为$</span><span class="n">Flag</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="m">1</span><span class="err">、删除重复的行</span>
</span><span class='line'><span class="m">#awk</span> <span class="s1">&#39;!a</span><span class="cp">[]</span><span class="s1">++&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="m">2</span><span class="err">、将数据文件中的每个词的第一个字母变成大写</span>
</span><span class='line'><span class="n">cat</span> <span class="n">test</span>
</span><span class='line'><span class="n">linux</span> <span class="n">is</span> <span class="n">long</span> <span class="n">live</span><span class="o">!!!</span>
</span><span class='line'><span class="n">i</span> <span class="n">am</span> <span class="n">a</span> <span class="n">cuer</span>
</span><span class='line'>
</span><span class='line'><span class="n">awk</span> <span class="s1">&#39;,1,1); sub(/^./,toupper(first),); print }&#39;</span> <span class="n">test</span>
</span><span class='line'><span class="n">Linux</span> <span class="n">is</span> <span class="n">long</span> <span class="n">live</span><span class="o">!!!</span>
</span><span class='line'><span class="n">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">cuer</span>
</span><span class='line'>
</span><span class='line'><span class="m">3</span><span class="o">.</span><span class="n">awk</span> <span class="err">范例</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="err">显示文件第</span><span class="m">3</span><span class="err">和</span><span class="m">5</span><span class="err">行</span><span class="o">:</span> <span class="n">awk</span> <span class="s1">&#39;NR==3 || NR ==5 &#39;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="err">打印前</span><span class="m">3</span><span class="err">行和</span><span class="m">7</span><span class="err">行以后的</span><span class="o">:</span> <span class="n">awk</span> <span class="s1">&#39;NR&lt;4 || NR&gt; 7 {print $1}&#39;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="err">打印以</span><span class="n">root</span><span class="err">和</span><span class="n">nobody</span><span class="err">开始的记录</span><span class="o">:</span> <span class="n">awk</span> <span class="s1">&#39;/^(root|nobody)/&#39;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="err">如果记录以</span><span class="n">r</span><span class="err">或</span><span class="n">p</span><span class="err">或</span><span class="n">rp</span><span class="err">开头，就打印这个记录</span><span class="o">:</span> <span class="n">awk</span> <span class="s1">&#39;/^</span><span class="cp">[</span><span class="nx">rp</span><span class="cp">]</span><span class="s1">/&#39;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="err">显示</span><span class="m">1-3</span><span class="err">和</span><span class="m">5-7</span><span class="err">行的信息</span>
</span><span class='line'><span class="m">#awk</span> <span class="s1">&#39;(NR&lt;4 &amp;&amp; NR&gt;0) || (NR&gt;4 &amp;&amp; NR&lt;8) {print}&#39;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'>
</span><span class='line'><span class="m">4</span><span class="o">.</span><span class="err">含有</span><span class="n">root</span><span class="err">的列</span>
</span><span class='line'><span class="m">#gawk</span>  <span class="s1">&#39;BEGIN{FS=&quot;:&quot; ;sum=0} $1 == &quot;root&quot; {sum=sum+1} END {print sum}&#39;</span> <span class="n">passwd</span>
</span><span class='line'>
</span><span class='line'><span class="m">5</span><span class="o">.</span><span class="err">把合在一起的数字汉字用空格分开。</span>
</span><span class='line'><span class="m">#sed</span> <span class="s1">&#39;s/^</span><span class="cp">[</span> <span class="cp">]</span><span class="s1">*//;s/^</span><span class="cp">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="cp">]</span><span class="s1">*/&amp; /&#39;</span>  <span class="n">file</span>
</span><span class='line'><span class="m">#awk</span> <span class="s1">&#39;{gsub(/</span><span class="cp">[</span><span class="p">^</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="cp">]</span><span class="s1">+/,&quot;&quot;,$1);print $1}&#39;</span> <span class="n">file</span>
</span><span class='line'>
</span><span class='line'><span class="m">6</span><span class="o">.</span><span class="err">统计一列数的总数和平均值。</span>
</span><span class='line'><span class="m">#awk</span> <span class="s1">&#39;{sum +=$2} END{print &quot;sum:&quot; sum}&#39;</span> <span class="n">test</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'><span class="m">#awk</span> <span class="s1">&#39;{sum +=$2} END{print &quot;sum:&quot; sum/NR}&#39;</span> <span class="n">test</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'>
</span><span class='line'><span class="m">7</span><span class="o">.?</span><span class="err">指定如果零个或一个字符或扩展正则表达式的具体值在字符串中，则字符串匹配</span>
</span><span class='line'><span class="m">#awk</span> <span class="s1">&#39;/smith?/&#39;</span> <span class="n">file</span>
</span><span class='line'>
</span><span class='line'><span class="m">8</span><span class="o">.</span><span class="err">显示包含</span><span class="n">abc</span><span class="err">或</span><span class="m">123</span><span class="err">的字符串</span>
</span><span class='line'><span class="m">#awk</span> <span class="s1">&#39;/abc|123/&#39;</span> <span class="n">file</span>
</span><span class='line'>
</span><span class='line'><span class="m">9</span><span class="o">.</span><span class="err">将具有字符串</span><span class="n">ae</span><span class="err">或</span><span class="n">alle</span><span class="err">或</span><span class="n">anne</span><span class="err">或</span><span class="n">allnne</span><span class="err">的所有记录打印至标准输出</span>
</span><span class='line'><span class="m">#awk</span> <span class="s1">&#39;/a(ll)?(nn)?e/&#39;</span> <span class="n">file</span>
</span><span class='line'>
</span><span class='line'><span class="m">10</span><span class="o">.</span><span class="err">{</span><span class="n">m</span><span class="p">}</span><span class="err">指定如果正好有</span><span class="nt">m</span><span class="err">个模式的具体值位于字符串中，则字符串匹配</span><span class="o">.</span><span class="err">下面显示只包含两个</span><span class="nt">l</span><span class="err">的字符串</span>
</span><span class='line'><span class="nf">#awk</span>  <span class="s1">&#39;/l{2}/&#39;</span>  <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'><span class="nt">11</span><span class="o">.</span><span class="p">{</span><span class="n">m</span><span class="o">,</span><span class="p">}</span><span class="err">指定如果至少</span><span class="nt">m</span><span class="err">个模式的具体值在字符串中，则字符串匹配，下面显示至少包含两个</span><span class="nt">t</span><span class="err">的字符串</span>
</span><span class='line'><span class="nf">#awk</span> <span class="s1">&#39;/t{2,}/&#39;</span>  <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'><span class="nt">12</span><span class="o">.</span><span class="p">{</span><span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="p">}</span><span class="err">指定如果</span> <span class="nt">m</span> <span class="err">和</span> <span class="nt">n</span> <span class="err">之间</span><span class="o">(</span><span class="err">包含的</span> <span class="nt">m</span> <span class="err">和</span> <span class="nt">n</span><span class="o">)</span><span class="err">个模式的具体值在字符串中</span><span class="o">(</span><span class="err">其中</span><span class="nt">m</span><span class="o">&lt;=</span> <span class="nt">n</span><span class="o">)</span><span class="err">，则字符串匹配</span><span class="o">,</span><span class="err">下面显示包含</span><span class="nt">1</span><span class="err">和</span><span class="nt">2</span><span class="err">个</span><span class="nt">er</span><span class="err">的字符串</span>
</span><span class='line'><span class="nf">#awk</span> <span class="s1">&#39;/er{1,2}/&#39;</span> <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'><span class="nt">13</span><span class="o">.</span><span class="err">将具有</span><span class="nt">zxm</span><span class="err">后跟以字母顺序从</span> <span class="nt">a</span> <span class="err">到</span> <span class="nt">h</span> <span class="err">排列的任何字符的所有记录打印至标准输出</span>
</span><span class='line'><span class="nf">#awk</span> <span class="s1">&#39;/zxm</span><span class="cp">[</span><span class="nx">a</span><span class="na">-h</span><span class="cp">]</span><span class="s1">/&#39;</span>  <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'><span class="nt">14</span><span class="o">.</span><span class="cp">[</span><span class="p">^</span><span class="kt">String</span><span class="cp">]</span><span class="err">在</span><span class="cp">[</span> <span class="cp">]</span><span class="err">和在指定字符串开头的</span><span class="o">^</span><span class="err">指明正则表达式与方括号内的任何字符不匹配</span>
</span><span class='line'><span class="nf">#awk</span> <span class="s1">&#39;/sm</span><span class="cp">[</span><span class="p">^</span><span class="nx">a</span><span class="na">-h</span><span class="cp">]</span><span class="s1">/&#39;</span> <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">15</span><span class="o">.</span> <span class="o">~</span><span class="err">或</span><span class="o">!~</span><span class="err">表示指定变量与正则表达式匹配或不匹配的条件语句</span>
</span><span class='line'><span class="nf">#awk</span>  <span class="s1">&#39;$1 ~ /n/&#39;</span> <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'><span class="nt">16</span><span class="o">.</span><span class="err">将把字符</span> <span class="nt">h</span> <span class="err">作为第二个字段的第一个字符和最后一个字符的所有记录打印至标准输出</span>
</span><span class='line'><span class="nf">#awk</span>  <span class="s1">&#39;$2 ~ /^h/&#39;</span>  <span class="nt">file</span>
</span><span class='line'><span class="nf">#awk</span>  <span class="s1">&#39;$2 ~ /h$/&#39;</span>  <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">17</span><span class="o">.</span><span class="err">将具有以两个字符隔开的字符</span> <span class="nt">a</span> <span class="err">和</span> <span class="nt">e</span> <span class="err">的所有记录打印至标准输出</span>
</span><span class='line'><span class="nf">#awk</span>  <span class="s1">&#39;/a..e/&#39;</span> <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">18</span><span class="o">.</span><span class="err">将具有以零个或更多字符隔开的字符</span> <span class="nt">a</span> <span class="err">和</span> <span class="nt">e</span> <span class="err">打印至标准输出</span>
</span><span class='line'><span class="nf">#awk</span>  <span class="s1">&#39;/a*e/&#39;</span> <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'><span class="nt">19</span><span class="nc">.awk</span> <span class="err">命令识别大多数用于</span> <span class="nt">C</span> <span class="err">语言约定中的转义序列，以及</span> <span class="nt">awk</span> <span class="err">命令本身用作特殊字符的几个转义序列。转义序列是：</span>
</span><span class='line'>    <span class="err">转义序列表示的字符</span>
</span><span class='line'>    <span class="err">\</span><span class="s2">&quot;\&quot;（双引号）</span>
</span><span class='line'><span class="s2">    \//（斜杠）字符</span>
</span><span class='line'><span class="s2">    \ddd其编码由 1、2 或 3 位八进制整数表示的字符，其中 d 表示一个八进制数位</span>
</span><span class='line'><span class="s2">    \\\ (反斜杠) 字符</span>
</span><span class='line'><span class="s2">    \a警告字符</span>
</span><span class='line'><span class="s2">    \b退格字符</span>
</span><span class='line'><span class="s2">    \f换页字符</span>
</span><span class='line'><span class="s2">    \n换行字符</span>
</span><span class='line'><span class="s2">    \r回车字符</span>
</span><span class='line'><span class="s2">    \t跳格字符</span>
</span><span class='line'><span class="s2">    \v垂直跳格</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2">20.要显示长于 72 个字符的文件的行，请输入：</span>
</span><span class='line'><span class="s2">awk &#39;length($0) &gt;72&#39; file</span>
</span><span class='line'>
</span><span class='line'><span class="s2">21.要显示字start和stop之间的所有行，包含“start”和“stop”，请输入：</span>
</span><span class='line'><span class="s2">awk &#39;/start/,/stop/&#39; file</span>
</span><span class='line'>
</span><span class='line'><span class="s2">22.在屏幕上打印”What is your name?&quot;</span><span class="o">,</span><span class="err">并等待用户应答。当一行输入完毕后，</span><span class="nt">getline</span><span class="err">函数从终端接收该行输入，并把它储存在自定义变量</span><span class="nt">name</span><span class="err">中。如果第一个域匹配变量</span><span class="nt">name</span><span class="err">的值，</span><span class="nt">print</span><span class="err">函数就被执行，</span><span class="nt">END</span><span class="err">块打印</span><span class="nt">See</span> <span class="nt">you</span><span class="err">和</span><span class="nt">name</span><span class="err">的值</span>
</span><span class='line'><span class="nf">#awk</span> <span class="s1">&#39;BEGIN{printf &quot;What is your name?&quot;; getline name &lt; &quot;/dev/tty&quot; } $1 ~name {print &quot;Found&quot; name on line &quot;, NR &quot;.&quot;} END{print &quot;See you,&quot; name &quot;.&quot;} test</span>
</span><span class='line'>
</span><span class='line'><span class="s1">23.awk将逐行读取文件/etc/passwd的内容，在到达文件末尾前，计数器lc一直增加，当到末尾时，打印lc的值</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="nt">BEGIN</span><span class="p">{</span><span class="n">while</span> <span class="p">(</span><span class="n">getline</span> <span class="o">&lt;</span> <span class="s2">&quot;/etc/passwd&quot;</span> <span class="o">&gt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">lc</span><span class="o">++</span><span class="p">;</span> <span class="n">print</span> <span class="n">lc</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">24.system函数可以在awk中执行linux的命令。如：</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="nt">BEGIN</span><span class="p">{</span><span class="n">system</span><span class="p">(</span><span class="s2">&quot;clear&quot;</span><span class="p">)</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">25.如果第一个域小于第二个域则打印</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="err">{</span><span class="n">if</span> <span class="p">(</span><span class="err">$</span><span class="m">1</span> <span class="o">&lt;</span><span class="err">$</span><span class="m">2</span><span class="p">)</span> <span class="n">print</span> <span class="err">$</span><span class="m">2</span> <span class="s2">&quot;too high&quot;</span><span class="p">}</span><span class="s1">&#39; test</span>
</span><span class='line'>
</span><span class='line'><span class="s1">26.变量的初始值为1，若i小于可等于NF(记录中域的个数),则执行打印语句，且i增加1。直到i的值大于NF.</span>
</span><span class='line'><span class="s1"># awk &#39;</span><span class="p">{</span> <span class="n">i</span> <span class="o">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">while</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">NF</span> <span class="p">)</span> <span class="err">{</span> <span class="n">print</span> <span class="n">NF</span><span class="o">,</span><span class="err">$</span><span class="n">i</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">}</span><span class="err">}</span><span class="s1">&#39; test</span>
</span><span class='line'><span class="s1"># awk &#39;</span><span class="p">{</span><span class="n">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">NF</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">print</span> <span class="n">NF</span><span class="o">,</span><span class="err">$</span><span class="n">i</span><span class="p">}</span><span class="s1">&#39; test</span>
</span><span class='line'>
</span><span class='line'><span class="s1">27.将一个文件的总行数显示出来</span>
</span><span class='line'><span class="s1">#gawk &#39;</span><span class="p">{</span><span class="n">nlines</span><span class="o">++</span><span class="p">}</span> <span class="nt">END</span> <span class="p">{</span><span class="n">print</span> <span class="n">nlines</span><span class="p">}</span><span class="s1">&#39;  file</span>
</span><span class='line'>
</span><span class='line'><span class="s1">28.显示拥有至少一个字段的所有行。这是一个简单的方法，将一个文件里的所有空白行删除</span>
</span><span class='line'><span class="s1">#gawk &#39;</span><span class="nt">NF</span> <span class="o">&gt;</span> <span class="nt">0</span><span class="s1">&#39;  file</span>
</span><span class='line'>
</span><span class='line'><span class="s1">29.此程序会显示出范围是0 到100 之间的7 个随机数</span>
</span><span class='line'><span class="s1">#gawk &#39;</span><span class="nt">BEGIN</span> <span class="p">{</span><span class="n">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="m">7</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">print</span> <span class="n">int</span><span class="p">(</span><span class="m">101</span> <span class="o">*</span> <span class="n">rand</span><span class="p">())}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">30.此程序会显示出所有指定的文件的总字节数</span>
</span><span class='line'><span class="s1">#ls -l files | gawk &#39;</span><span class="p">{</span><span class="n">x</span> <span class="o">+=</span> <span class="err">$</span><span class="m">4</span><span class="p">}</span><span class="o">;</span> <span class="nt">END</span> <span class="p">{</span><span class="n">print</span> <span class="s2">&quot;total bytes: &quot;</span> <span class="n">x</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">31.此程序会将指定文件里最长一行的长度显示出来。expand 会将tab 改成space，所以是用实际的右边界来做长度的比较。</span>
</span><span class='line'><span class="s1">#expand file | gawk &#39;</span><span class="p">{</span><span class="n">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">())</span> <span class="n">x</span> <span class="o">=</span> <span class="n">length</span><span class="p">()}</span> <span class="nt">END</span> <span class="p">{</span><span class="n">print</span> <span class="s2">&quot;maximum line length is &quot;</span> <span class="n">x</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">32.显示所有只有四个字符的字段</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="nt">length</span><span class="o">(</span><span class="err">$</span><span class="nt">1</span><span class="o">)==</span><span class="nt">4</span><span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="m">1</span><span class="p">}</span><span class="s1">&#39;  file</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">33.显示所有以一个C或E开头的字段</span>
</span><span class='line'><span class="s1">$ awk -F&quot;</span><span class="cp">[</span><span class="p">:</span> <span class="cp">]</span><span class="s1">&quot; &#39;</span><span class="err">$</span><span class="nt">1</span><span class="o">~/^</span><span class="nt">C</span><span class="o">|</span><span class="nt">E</span><span class="o">/</span><span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="m">1</span><span class="p">}</span><span class="s1">&#39; datafile</span>
</span><span class='line'>
</span><span class='line'><span class="s1">34.在文件的第一行前插入一行</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="nt">BEGIN</span> <span class="p">{</span><span class="n">print</span> <span class="s2">&quot;new line&quot;</span><span class="p">}</span> <span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="m">0</span><span class="p">}</span><span class="s1">&#39; file &gt;file1</span>
</span><span class='line'>
</span><span class='line'><span class="s1">35.在文件末尾添加一行</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="nt">END</span> <span class="p">{</span><span class="n">print</span> <span class="s2">&quot;THE END&quot;</span><span class="p">}</span> <span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="m">0</span><span class="p">}</span><span class="s1">&#39; file &gt;file1</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">36.awk和cut的相同用法</span>
</span><span class='line'><span class="s1">#awk -F: &#39;</span><span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="m">1</span><span class="o">,</span><span class="err">$</span><span class="m">2</span><span class="o">,</span><span class="err">$</span><span class="m">3</span><span class="p">}</span><span class="s1">&#39; file</span>
</span><span class='line'><span class="s1">#cut -d: -f2,3,4,5  file</span>
</span><span class='line'><span class="s1">#cut  -c 1-5 /etc/passwd 显示文件中的前1-5个字符</span>
</span><span class='line'>
</span><span class='line'><span class="s1">37.以@或:为分隔符的文件</span>
</span><span class='line'><span class="s1">awk -F</span><span class="cp">[</span><span class="p">@:</span><span class="cp">]</span><span class="s1"> &#39;</span><span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="m">1</span><span class="p">}</span><span class="s1">&#39; file</span>
</span><span class='line'>
</span><span class='line'><span class="s1">38.结果以$分隔</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">BEGIN</span><span class="p">{</span><span class="n">FS</span><span class="o">=</span><span class="s2">&quot;:&quot;</span><span class="p">}</span> <span class="p">{</span><span class="n">OFS</span><span class="o">=</span><span class="s2">&quot;$&quot;</span><span class="p">}</span> <span class="p">{</span><span class="n">if</span><span class="p">(</span><span class="err">$</span><span class="m">1</span><span class="o">~/</span><span class="n">Mike</span><span class="o">/</span><span class="p">)</span> <span class="n">print</span> <span class="s2">&quot;&quot;</span><span class="o">,</span><span class="err">$</span><span class="m">3</span><span class="o">,</span><span class="err">$</span><span class="m">4</span><span class="o">,</span><span class="err">$</span><span class="m">5</span><span class="p">}</span><span class="s1">&#39; love</span>
</span><span class='line'>
</span><span class='line'><span class="s1">39.把一行竖排的数据转换成横排</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">printf</span><span class="p">(</span><span class="s2">&quot;%s,&quot;</span><span class="o">,</span><span class="err">$</span><span class="m">1</span><span class="p">)}</span><span class="s1">&#39; a.txt</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">printf</span> <span class="p">(</span><span class="s2">&quot;%s\n&quot;</span><span class="o">,</span><span class="err">$</span><span class="m">0</span><span class="p">)}</span><span class="s1">&#39; a.txt</span>
</span><span class='line'>
</span><span class='line'><span class="s1">40.systime函数返回从1970年1月1日开始到当前时间(不计闰年)的整秒数</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span> <span class="n">now</span> <span class="o">=</span> <span class="n">systime</span><span class="p">();</span> <span class="n">print</span> <span class="n">now</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span> <span class="n">now</span><span class="o">=</span><span class="n">strftime</span><span class="p">(</span> <span class="s2">&quot;%D&quot;</span><span class="o">,</span> <span class="n">systime</span><span class="p">()</span> <span class="p">);</span> <span class="n">print</span> <span class="n">now</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span> <span class="n">now</span><span class="o">=</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%m/%d/%y&quot;</span><span class="p">);</span> <span class="n">print</span> <span class="n">now</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">41.将时间戳转成日值的awk方法</span>
</span><span class='line'><span class="s1">echo &quot;1180051515&quot;|awk &#39;</span><span class="p">{</span><span class="n">print</span> <span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%F %T&quot;</span><span class="o">,</span><span class="err">$</span><span class="m">0</span><span class="p">)}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">42.打印输入记录的最后一个字段</span>
</span><span class='line'><span class="s1">awk -F/ &#39;</span><span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="n">NF</span><span class="p">}</span><span class="s1">&#39; a.txt</span>
</span><span class='line'>
</span><span class='line'><span class="s1">43.打印输入记录的第2个字段</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="m">2</span><span class="p">;</span><span class="n">print</span> <span class="err">$</span><span class="n">x</span><span class="p">}</span><span class="s1">&#39; a.txt</span>
</span><span class='line'>
</span><span class='line'><span class="s1">44.显示文件a.txt的当前记录号、域数和每一行的第一个和最后一个域和文件名</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">print</span> <span class="n">NR</span><span class="o">,</span><span class="n">NF</span><span class="o">,</span><span class="err">$</span><span class="m">1</span><span class="o">,</span><span class="err">$</span><span class="n">NF</span><span class="o">,</span><span class="n">FILENAME</span><span class="p">}</span><span class="s1">&#39;  a.txt</span>
</span><span class='line'>
</span><span class='line'><span class="s1">45.在awk中调用系统变量必须用单引号，如果是双引号，则表示字符串</span>
</span><span class='line'><span class="s1">Flag=abcd</span>
</span><span class='line'><span class="s1">awk ‘{print ‘$Flag’}’ 结果为abcd</span>
</span><span class='line'><span class="s1">awk ‘{print “$Flag”}’ 结果为$Flag</span>
</span><span class='line'>
</span><span class='line'><span class="s1">46.把三个文件的内容追加到一个文件里</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">print</span> <span class="n">FILENAME</span><span class="o">,</span><span class="err">$</span><span class="m">0</span><span class="p">}</span><span class="s1">&#39; a b c &gt;all</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">47.通过管道把date的执行结果送给getline，并赋给变量d，然后打印。</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">BEGIN</span> <span class="p">{</span><span class="s2">&quot;date&quot;</span><span class="o">|</span><span class="n">getline</span> <span class="n">d</span><span class="p">;</span> <span class="n">print</span> <span class="n">d</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">48.通过getline命令交互输入name，并显示出来:</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="nt">BEGIN</span> <span class="p">{</span><span class="n">system</span><span class="p">(</span><span class="s2">&quot;echo \&quot;Input your name:\\c\&quot;&quot;</span><span class="p">);</span> <span class="n">getline</span> <span class="n">d</span><span class="p">;</span><span class="n">print</span> <span class="s2">&quot;\nYour name is&quot;</span><span class="o">,</span><span class="n">d</span><span class="o">,</span><span class="s2">&quot;\b!\n&quot;</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">49.输出不换行</span>
</span><span class='line'><span class="s1">#awk -F: &#39;</span><span class="p">{</span><span class="n">printf</span>  <span class="err">$</span><span class="m">1</span><span class="p">}</span><span class="s1">&#39;  /etc/passwd </span>
</span><span class='line'>
</span><span class='line'><span class="s1">50.toupper和tolower函数可用于字符串大小间的转换</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="p">{</span> <span class="n">print</span> <span class="n">toupper</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">)</span><span class="o">,</span> <span class="n">tolower</span><span class="p">(</span><span class="s2">&quot;TEST&quot;</span><span class="p">)</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">51.split函数可按给定的分隔符把字符串分割为一个数组.如果分隔符没提供,按当前FS值进行分割</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="p">{</span> <span class="n">split</span><span class="p">(</span> <span class="s2">&quot;20:18:00&quot;</span><span class="o">,</span> <span class="n">time</span><span class="o">,</span> <span class="s2">&quot;:&quot;</span> <span class="p">);</span> <span class="n">print</span> <span class="n">time</span><span class="cp">[</span><span class="mi">2</span><span class="cp">]</span><span class="o">,</span><span class="n">time</span><span class="cp">[</span><span class="mi">1</span><span class="cp">]</span><span class="o">,</span><span class="n">time</span><span class="cp">[</span><span class="mi">3</span><span class="cp">]</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">52.sub函数匹配记录中最大,最靠左边的子字符串的正则表达式,并用替换字符串替换这些字符串.如果没有指定目标字符串就默认使用整个记录.替换只发生在第一次匹配的时候.格式如下:</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="p">{</span> <span class="n">sub</span><span class="p">(</span><span class="o">/</span><span class="n">test</span><span class="o">/,</span> <span class="s2">&quot;mytest&quot;</span><span class="p">);</span> <span class="n">print</span> <span class="p">}</span><span class="s1">&#39; testfile</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="p">{</span> <span class="n">sub</span><span class="p">(</span><span class="o">/</span><span class="n">test</span><span class="o">/,</span> <span class="s2">&quot;mytest&quot;</span><span class="p">);</span> <span class="err">$</span><span class="m">1</span><span class="p">}</span><span class="o">;</span> <span class="nt">print</span> <span class="err">}</span><span class="s1">&#39; testfile</span>
</span><span class='line'>
</span><span class='line'><span class="s1">53.system函数可以在awk中执行linux的命令。</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="nt">BEGIN</span><span class="p">{</span><span class="n">system</span><span class="p">(</span><span class="s2">&quot;clear&quot;</span><span class="p">)}</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">54.执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给d，split函数把变量d转化成数组mon，然后打印数组mon的第二个元素</span>
</span><span class='line'><span class="s1">#awk &#39;</span><span class="nt">BEGIN</span><span class="p">{</span><span class="s2">&quot;date&quot;</span> <span class="o">|</span> <span class="n">getline</span> <span class="n">d</span><span class="p">;</span> <span class="n">split</span><span class="p">(</span><span class="n">d</span><span class="o">,</span><span class="n">mon</span><span class="p">);</span> <span class="n">print</span> <span class="n">mon</span><span class="cp">[</span><span class="mi">2</span><span class="cp">]</span><span class="p">}</span><span class="s1">&#39; test</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> </span>
</span><span class='line'>
</span><span class='line'><span class="s1"># 每行后面增加一行空行</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">1</span><span class="o">;</span><span class="p">{</span><span class="n">print</span> <span class="s2">&quot;&quot;</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">BEGIN</span><span class="p">{</span><span class="n">ORS</span><span class="o">=</span><span class="s2">&quot;\n\n&quot;</span><span class="p">}</span><span class="o">;</span><span class="nt">1</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 每行后面增加一行空行。输出文件不会包含连续的两个或两个以上的空行</span>
</span><span class='line'><span class="s1"># 注意：在Unix系统， DOS行包括的 CRLF （\r\n） 通常会被作为非空行对待</span>
</span><span class='line'><span class="s1"># 因此 &#39;</span><span class="nt">NF</span><span class="s1">&#39; 将会返回TRUE。</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">NF</span><span class="p">{</span><span class="n">print</span> <span class="err">$</span><span class="m">0</span> <span class="s2">&quot;\n&quot;</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 每行后面增加两行空行</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">1</span><span class="o">;</span><span class="p">{</span><span class="n">print</span> <span class="s2">&quot;\n&quot;</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">编号和计算：</span>
</span><span class='line'><span class="s1"># 以文件为单位，在每句行前加上编号 （左对齐）.</span>
</span><span class='line'><span class="s1"># 使用制表符 （\t） 来代替空格可以有效保护页变的空白。</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">print</span> <span class="n">FNR</span> <span class="s2">&quot;\t&quot;</span> <span class="err">$</span><span class="m">0</span><span class="p">}</span><span class="s1">&#39; files*</span>
</span><span class='line'><span class="s1"># 用制表符 （\t） 给所有文件加上连贯的编号。</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">print</span> <span class="n">NR</span> <span class="s2">&quot;\t&quot;</span> <span class="err">$</span><span class="m">0</span><span class="p">}</span><span class="s1">&#39; files*</span>
</span><span class='line'><span class="s1"># number each line of a file （number on left, right-aligned）</span>
</span><span class='line'><span class="s1"># Double the percent signs if typing from the DOS command prompt.</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">printf</span><span class="p">(</span><span class="s2">&quot;%5d : %s\n&quot;</span><span class="o">,</span> <span class="n">NR</span><span class="o">,</span><span class="err">$</span><span class="m">0</span><span class="p">)}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 给非空白行的行加上编号</span>
</span><span class='line'><span class="s1"># 记得Unix对于 \r 的处理的特殊之处。（上面已经提到）</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">NF</span><span class="p">{</span><span class="err">$</span><span class="m">0</span><span class="o">=++</span><span class="n">a</span> <span class="s2">&quot; :&quot;</span> <span class="err">$</span><span class="m">0</span><span class="p">}</span><span class="o">;</span><span class="p">{</span><span class="n">print</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">print</span> <span class="p">(</span><span class="n">NF</span><span class="o">?</span> <span class="o">++</span><span class="n">a</span> <span class="s2">&quot; :&quot;</span> <span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="err">$</span><span class="m">0</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 计算行数 （模拟 &quot;wc -l&quot;）</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">END</span><span class="p">{</span><span class="n">print</span> <span class="n">NR</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 计算每行每个区域之和</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">s</span><span class="o">=</span><span class="m">0</span><span class="p">;</span> <span class="n">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="m">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">NF</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="o">+</span><span class="err">$</span><span class="n">i</span><span class="p">;</span> <span class="n">print</span> <span class="n">s</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 计算所有行所有区域的总和</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="m">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">NF</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="o">+</span><span class="err">$</span><span class="n">i</span><span class="p">}</span><span class="o">;</span> <span class="nt">END</span><span class="p">{</span><span class="n">print</span> <span class="n">s</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 打印每行每区域的绝对值</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="m">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">NF</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">if</span> <span class="p">(</span><span class="err">$</span><span class="n">i</span> <span class="o">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="err">$</span><span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="err">$</span><span class="n">i</span><span class="p">;</span> <span class="n">print</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="m">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">NF</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="err">$</span><span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="err">$</span><span class="n">i</span> <span class="o">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="o">?</span> <span class="o">-</span><span class="err">$</span><span class="n">i</span> <span class="o">:</span> <span class="err">$</span><span class="n">i</span><span class="p">;</span> <span class="n">print</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 计算所有行所有区域（词）的个数</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span> <span class="n">total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="n">NF</span> <span class="p">}</span><span class="o">;</span> <span class="nt">END</span> <span class="p">{</span><span class="n">print</span> <span class="n">total</span><span class="p">}</span><span class="s1">&#39; file</span>
</span><span class='line'><span class="s1"># 打印包含 &quot;Beth&quot; 的行数</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="o">/</span><span class="nt">Beth</span><span class="o">/</span><span class="p">{</span><span class="n">n</span><span class="o">++</span><span class="p">}</span><span class="o">;</span> <span class="nt">END</span> <span class="p">{</span><span class="n">print</span> <span class="n">n</span><span class="o">+</span><span class="m">0</span><span class="p">}</span><span class="s1">&#39; file</span>
</span><span class='line'><span class="s1"># 打印第一列最大的行</span>
</span><span class='line'><span class="s1"># 并且在行前打印出这个最大的数</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="err">$</span><span class="nt">1</span> <span class="o">&gt;</span> <span class="nt">max</span> <span class="p">{</span><span class="n">max</span><span class="o">=</span><span class="err">$</span><span class="m">1</span><span class="p">;</span> <span class="n">maxline</span><span class="o">=</span><span class="err">$</span><span class="m">0</span><span class="p">}</span><span class="o">;</span> <span class="nt">END</span><span class="p">{</span> <span class="n">print</span> <span class="n">max</span><span class="o">,</span> <span class="n">maxline</span><span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 打印每行的列数，并在后面跟上此行内容</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span> <span class="n">print</span> <span class="n">NF</span> <span class="s2">&quot;:&quot;</span> <span class="err">$</span><span class="m">0</span> <span class="p">}</span> <span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 打印每行的最后一列</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span> <span class="n">print</span> <span class="err">$</span><span class="n">NF</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 打印最后一行的最后一列</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span> <span class="n">field</span> <span class="o">=</span> <span class="err">$</span><span class="n">NF</span> <span class="p">}</span><span class="o">;</span> <span class="nt">END</span><span class="p">{</span> <span class="n">print</span> <span class="n">field</span> <span class="p">}</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 打印列数超过4的行</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="nt">NF</span> <span class="o">&gt;</span> <span class="nt">4</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 打印最后一列大于4的行</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="err">$</span><span class="nt">NF</span> <span class="o">&gt;</span> <span class="nt">4</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">文本转换和替代：</span>
</span><span class='line'><span class="s1"># 在Unix环境：转换DOS新行 （CR/LF） 为Unix格式</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">sub</span><span class="p">(</span><span class="o">/</span><span class="err">\</span><span class="n">r</span><span class="err">$</span><span class="o">/,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="n">print</span><span class="p">}</span><span class="s1">&#39; # 假设每行都以Ctrl-M结尾</span>
</span><span class='line'><span class="s1"># 在Unix环境：转换Unix新行 （LF） 为DOS格式</span>
</span><span class='line'><span class="s1">awk &#39;</span><span class="p">{</span><span class="n">sub</span><span class="p">(</span><span class="o">/</span><span class="err">$</span><span class="o">/,</span><span class="s2">&quot;\r&quot;</span><span class="p">);</span><span class="n">print</span><span class="p">}</span>
</span><span class='line'><span class="err">#</span> <span class="err">在</span><span class="nt">DOS</span><span class="err">环境：转换</span><span class="nt">Unix</span><span class="err">新行</span> <span class="err">（</span><span class="nt">LF</span><span class="err">）</span> <span class="err">为</span><span class="nt">DOS</span><span class="err">格式</span>
</span><span class='line'><span class="nt">awk</span> <span class="nt">1</span>
</span><span class='line'><span class="err">#</span> <span class="err">在</span><span class="nt">DOS</span><span class="err">环境：转换</span><span class="nt">DOS</span><span class="err">新行</span> <span class="err">（</span><span class="nt">CR</span><span class="o">/</span><span class="nt">LF</span><span class="err">）</span> <span class="err">为</span><span class="nt">Unix</span><span class="err">格式</span>
</span><span class='line'><span class="err">#</span> <span class="nt">DOS</span><span class="err">版本的</span><span class="nt">awk</span><span class="err">不能运行</span><span class="o">,</span> <span class="err">只能用</span><span class="nt">gawk</span><span class="o">:</span>
</span><span class='line'><span class="nt">gawk</span> <span class="nt">-v</span> <span class="nt">BINMODE</span><span class="o">=</span><span class="s2">&quot;w&quot;</span> <span class="s1">&#39;1&#39;</span> <span class="nt">infile</span> <span class="o">&gt;</span><span class="nt">outfile</span>
</span><span class='line'><span class="err">#</span> <span class="err">用</span> <span class="s2">&quot;tr&quot;</span> <span class="err">替代的方法。</span>
</span><span class='line'><span class="nt">tr</span> <span class="nt">-d</span> <span class="err">\</span><span class="nt">r</span> <span class="o">&lt;</span><span class="nt">infile</span> <span class="o">&gt;</span><span class="nt">outfile</span> <span class="err">#</span> <span class="nt">GNU</span> <span class="nt">tr</span> <span class="err">版本为</span> <span class="nt">1</span><span class="nc">.22</span> <span class="err">或者更高</span>
</span><span class='line'><span class="err">#</span> <span class="err">删除每行前的空白（包括空格符和制表符）</span>
</span><span class='line'><span class="err">#</span> <span class="err">使所有文本左对齐</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{sub(/^</span><span class="cp">[</span> <span class="o">\</span><span class="nb">t</span><span class="cp">]</span><span class="s1">+/, &quot;&quot;); print}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">删除每行结尾的空白（包括空格符和制表符）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{sub(/</span><span class="cp">[</span> <span class="o">\</span><span class="nb">t</span><span class="cp">]</span><span class="s1">+$/, &quot;&quot;);print}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">删除每行开头和结尾的所有空白（包括空格符和制表符）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{gsub(/^</span><span class="cp">[</span> <span class="o">\</span><span class="nb">t</span><span class="cp">]</span><span class="s1">+|</span><span class="cp">[</span> <span class="o">\</span><span class="nb">t</span><span class="cp">]</span><span class="s1">+$/,&quot;&quot;);print}&#39;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{$1=$1;print}&#39;</span> <span class="err">#</span> <span class="err">每列之间的空白也被删除</span>
</span><span class='line'><span class="err">#</span> <span class="err">在每一行开头处插入</span><span class="nt">5</span><span class="err">个空格</span> <span class="err">（做整页的左位移）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{sub(/^/, &quot; &quot;);print}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">用</span><span class="nt">79</span><span class="err">个字符为宽度，将全部文本右对齐</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{printf &quot;%79s\n&quot;, $0}&#39;</span> <span class="nt">file</span><span class="o">*</span>
</span><span class='line'><span class="err">#</span> <span class="err">用</span><span class="nt">79</span><span class="err">个字符为宽度，将全部文本居中对齐</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{l=length();s=int((79-l)/2); printf &quot;%&quot;(s+l)&quot;s\n&quot;,$0}&#39;</span> <span class="nt">file</span><span class="o">*</span>
</span><span class='line'><span class="err">#</span> <span class="err">每行用</span> <span class="s2">&quot;bar&quot;</span> <span class="err">查找替换</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{sub(/foo/,&quot;bar&quot;);print}&#39;</span> <span class="err">#</span> <span class="err">仅仅替换第一个找到的</span><span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="nt">gawk</span> <span class="s1">&#39;{$0=gensub(/foo/,&quot;bar&quot;,4);print}&#39;</span> <span class="err">#</span> <span class="err">仅仅替换第四个找到的</span><span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{gsub(/foo/,&quot;bar&quot;);print}&#39;</span> <span class="err">#</span> <span class="err">全部替换</span>
</span><span class='line'><span class="err">#</span> <span class="err">在包含</span> <span class="s2">&quot;baz&quot;</span> <span class="err">的行里，将</span> <span class="s2">&quot;foo&quot;</span> <span class="err">替换为</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/baz/{gsub(/foo/, &quot;bar&quot;)};{print}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">在不包含</span> <span class="s2">&quot;baz&quot;</span> <span class="err">的行里，将</span> <span class="s2">&quot;foo&quot;</span> <span class="err">替换为</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;!/baz/{gsub(/foo/, &quot;bar&quot;)};{print}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">将</span> <span class="s2">&quot;scarlet&quot;</span> <span class="err">或者</span> <span class="s2">&quot;ruby&quot;</span> <span class="err">或者</span> <span class="s2">&quot;puce&quot;</span> <span class="err">替换为</span> <span class="s2">&quot;red&quot;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{gsub(/scarlet|ruby|puce/, &quot;red&quot;); print}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">倒排文本</span> <span class="err">（模拟</span> <span class="s2">&quot;tac&quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{a</span><span class="cp">[</span><span class="nx">i</span><span class="o">++</span><span class="cp">]</span><span class="s1">=$0} END {for (j=i-1; j&gt;=0;) print a</span><span class="cp">[</span><span class="nx">j</span><span class="o">--</span><span class="cp">]</span><span class="s1"> }&#39;</span> <span class="nt">file</span><span class="o">*</span>
</span><span class='line'><span class="err">#</span> <span class="err">如果一行结尾为反斜线符，将下一行接到这行后面</span>
</span><span class='line'><span class="err">#</span> <span class="err">（如果有连续多行后面带反斜线符，将会失败）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/\\$/ {sub(/\\$/,&quot;&quot;); getline t; print $0 t; next}; 1&#39;</span> <span class="nt">file</span><span class="o">*</span>
</span><span class='line'><span class="err">#</span> <span class="err">排序并打印所有登录用户的姓名</span>
</span><span class='line'><span class="nt">awk</span> <span class="nt">-F</span> <span class="s2">&quot;:&quot;</span> <span class="s1">&#39;{ print $1 | &quot;sort&quot; }&#39;</span> <span class="o">/</span><span class="nt">etc</span><span class="o">/</span><span class="nt">passwd</span>
</span><span class='line'><span class="err">#</span> <span class="err">以相反的顺序打印出每行的前两列</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{print $2, $1}&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="err">#</span> <span class="err">调换前两列的位置</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{temp = $1; $1 = $2; $2 = temp}&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印每行，并删除第二列</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{ $2 = &quot;&quot;; print }&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">倒置每行并打印</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{for (i=NF; i&gt;0; i--) printf(&quot;%s &quot;,i);printf (&quot;\n&quot;)}&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="err">#</span> <span class="err">删除重复连续的行</span> <span class="err">（模拟</span> <span class="s2">&quot;uniq&quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;a !~ $0; {a=$0}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">删除重复的、非连续的行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;! a</span><span class="cp">[</span><span class="err">$</span><span class="mi">0</span><span class="cp">]</span><span class="s1">++&#39;</span> <span class="err">#</span> <span class="err">最简练</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;!($0 in a) {a</span><span class="cp">[</span><span class="err">$</span><span class="mi">0</span><span class="cp">]</span><span class="s1">;print}&#39;</span> <span class="err">#</span> <span class="err">最有效</span>
</span><span class='line'><span class="err">#</span> <span class="err">用逗号链接每</span><span class="nt">5</span><span class="err">行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;ORS=%NR%5?&quot;,&quot;:&quot;\n&quot;&#39;</span> <span class="nt">file</span> <span class="nf">#bug</span> <span class="nt">awk</span> <span class="s1">&#39;ORS=NR%5?&quot;,&quot;:&quot;\n&quot;&#39;</span> <span class="nt">file</span>
</span><span class='line'><span class="err">选择性的打印某些行：</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印文件的前十行</span> <span class="err">（模拟</span> <span class="s2">&quot;head&quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;NR &lt; 11&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印文件的第一行</span> <span class="err">（模拟</span> <span class="s2">&quot;head -1&quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;NR&gt;1{exit};1&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印文件的最后两行</span> <span class="err">（模拟</span> <span class="s2">&quot;tail -2&quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;{y=x &quot;\n&quot; $0; x=$0};END{print y}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印文件的最后一行</span> <span class="err">（模拟</span> <span class="s2">&quot;tail -1&quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;END{print}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印匹配正则表达式的行</span> <span class="err">（模拟</span> <span class="s2">&quot;grep&quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/regex/&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印不匹配正则表达式的行</span> <span class="err">（模拟</span> <span class="s2">&quot;grep -v&quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;!/regex/&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印匹配正则表达式的前一行，但是不打印当前行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/regex/{print x};{x=$0}&#39;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/regex/{print (x==&quot;&quot; ? &quot;match on line 1&quot; : x)};{x=$0}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印匹配正则表达式的后一行，但是不打印当前行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/regex/{getline;print}&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">以任何顺序查找包含</span> <span class="nt">AAA</span><span class="err">、</span><span class="nt">BBB</span> <span class="err">和</span> <span class="nt">CCC</span> <span class="err">的行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/AAA/; /BBB/; /CCC/&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">以指定顺序查找包含</span> <span class="nt">AAA</span><span class="err">、</span><span class="nt">BBB</span> <span class="err">和</span> <span class="nt">CCC</span> <span class="err">的行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/AAA.*BBB.*CCC/&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印长度大于</span><span class="nt">64</span><span class="err">个字节的行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;length &gt; 64&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印长度小于</span><span class="nt">64</span><span class="err">个字节的行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;length &lt; 64&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印从匹配正则起到文件末尾的内容</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/regex/,0&#39;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/regex/,EOF&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印指定行之间的内容</span> <span class="err">（</span><span class="nt">8-12</span><span class="err">行</span><span class="o">,</span> <span class="err">包括第</span><span class="nt">8</span><span class="err">和第</span><span class="nt">12</span><span class="err">行）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;NR==8,NR==12&#39;</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印第</span><span class="nt">52</span><span class="err">行</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;NR==52&#39;</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;NR==52 {print;exit}&#39;</span> <span class="err">#</span> <span class="err">对于大文件更有效率</span>
</span><span class='line'><span class="err">#</span> <span class="err">打印两个正则匹配间的内容</span> <span class="err">（包括正则的内容）</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/Iowa/,/Montana/&#39;</span> <span class="err">#</span> <span class="err">大小写敏感</span>
</span><span class='line'><span class="err">选择性的删除某些行：</span>
</span><span class='line'><span class="err">#</span> <span class="err">删除所有空白行</span> <span class="err">（类似于</span> <span class="s2">&quot;grep &#39;.&#39; &quot;</span><span class="err">）</span>
</span><span class='line'><span class="nt">awk</span> <span class="nt">NF</span>
</span><span class='line'><span class="nt">awk</span> <span class="s1">&#39;/./&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">其他</span>
</span><span class='line'><span class="nt">1</span><span class="o">)</span> <span class="err">为了避免碰到</span><span class="nt">awk</span><span class="err">错误，可以总结出以下规律</span><span class="o">:</span>
</span><span class='line'><span class="err">①</span> <span class="err">确保整个</span><span class="nt">awk_script</span><span class="err">用单引号括起来。</span>
</span><span class='line'><span class="err">②</span> <span class="err">确保</span><span class="nt">awk_script</span><span class="err">内所有引号成对出现。</span>
</span><span class='line'><span class="err">③</span> <span class="err">确保用花括号括起动作语句，用圆括号括起条件语句。</span>
</span><span class='line'><span class="err">④</span> <span class="err">可能忘记使用花括号，也许你认为没有必要，但</span><span class="nt">awk</span><span class="err">不这样认为，将按之解释语法。</span>
</span><span class='line'><span class="err">⑤</span> <span class="err">如果使用字符串，一定要保证字符串被双引号括起来</span><span class="o">(</span><span class="err">在模式中除外</span><span class="o">)</span><span class="err">。</span>
</span><span class='line'><span class="nt">2</span><span class="o">)</span> <span class="err">在</span><span class="nt">awk</span><span class="err">中，设置有意义的域名是一种好习惯，在进行模式匹配或关系操作时更容易理解。一般的变量名设置方式为</span><span class="nt">name</span><span class="o">=</span><span class="err">$</span><span class="nt">n</span><span class="err">。</span><span class="o">(</span><span class="err">这里</span><span class="nt">name</span><span class="err">为调用的域变量名，</span> <span class="nt">n</span><span class="err">为实际域号。</span><span class="o">)</span>
</span><span class='line'><span class="nt">3</span><span class="o">)</span> <span class="err">通常在</span><span class="nt">BEGIN</span><span class="err">部分给一些变量赋值是很有益的，这样可以在</span><span class="nt">awk</span><span class="err">表达式进行改动时减少很多麻烦。</span>
</span><span class='line'><span class="nt">4</span><span class="o">)</span> <span class="nt">awk</span><span class="err">的基本功能是根据指定规则抽取输入数据的部分内容并输出，另一个重要的功能是对输入数据进行分析运算得到新的数据并输出，这是通过在</span><span class="nt">awk_script</span><span class="err">中对字段变量</span><span class="o">(</span><span class="err">$</span><span class="nt">1</span><span class="err">、$</span><span class="nt">2</span><span class="err">、$</span><span class="nt">3</span><span class="o">...)</span><span class="err">从新赋值或使用更大的字段变量$</span><span class="nt">n</span><span class="o">(</span><span class="nt">n</span><span class="err">大于当前记录的</span><span class="nt">NF</span><span class="o">)</span><span class="err">而实现的。</span>
</span><span class='line'><span class="nt">5</span><span class="o">)</span> <span class="err">使用字符串或正则表达式时，有时需要在输出中加入一新行或查询一元字符。这时就需要字符串屏蔽序列。</span><span class="nt">awk</span><span class="err">中经常使用的屏蔽序列有</span><span class="o">:</span> <span class="err">\</span><span class="nt">b</span> <span class="err">退格键</span> <span class="err">\</span><span class="nt">t</span> <span class="nt">tab</span><span class="err">键</span> <span class="err">\</span><span class="nt">f</span> <span class="err">走纸换页</span> <span class="err">\</span><span class="nt">ddd</span> <span class="err">八进制值</span> <span class="err">\</span><span class="nt">n</span> <span class="err">新行</span> <span class="err">\</span><span class="nt">r</span> <span class="err">回车键</span> <span class="err">\</span><span class="nt">c</span> <span class="err">任意其他特殊字符。</span><span class="nt">eg</span><span class="o">:</span> <span class="err">\\为反斜线符号</span>
</span><span class='line'><span class="nt">6</span><span class="o">)</span> <span class="nt">awk</span><span class="err">的输出函数</span><span class="nt">printf</span><span class="err">，基本上和</span><span class="nt">C</span><span class="err">语言的语法类似。</span>
</span><span class='line'>    <span class="err">①</span> <span class="err">格式</span><span class="o">:</span> <span class="nt">printf</span> <span class="o">(</span><span class="s2">&quot;输出模板字符串&quot;</span><span class="o">,</span><span class="err">参数列表</span><span class="o">)</span>
</span><span class='line'>    <span class="err">②</span> <span class="err">参数列表是以逗号分隔的列表，参数可以是变量、数字值或字符串。</span>
</span><span class='line'>    <span class="err">③</span> <span class="err">输出模板字符串的字符串中必须包含格式控制符，有几个参数就要求有几个格式控制符。模板字符串中可以只有格式控制符而没有其它字符。</span>
</span><span class='line'>    <span class="err">④</span> <span class="err">格式控制符</span><span class="o">:</span> <span class="o">%</span><span class="cp">[</span><span class="o">-</span><span class="cp">][</span><span class="nb">width</span><span class="cp">][</span><span class="bp">.</span><span class="nx">prec</span><span class="cp">]</span><span class="nt">fmt</span> <span class="o">%</span> <span class="o">:</span> <span class="err">标识一个格式控制符的开始，不可省略。</span> <span class="nt">-</span> <span class="o">:</span> <span class="err">表示参数输出时左对齐，可省略。</span> <span class="nt">width</span> <span class="o">:</span> <span class="err">一个数字，表示参数输出时占用域的宽度，可省略。</span> <span class="nc">.prec</span> <span class="o">:</span> <span class="nt">prec</span><span class="err">是一个数值，表示最大字符串长度或小数点右边的位数，可省略。</span> <span class="nt">fmt</span> <span class="o">:</span> <span class="err">一个小写字母，表示输出参数的数据类型，不可省略。</span>
</span><span class='line'>    <span class="err">⑤</span> <span class="err">常见的</span><span class="nt">fmt</span> <span class="o">:</span> <span class="nt">c</span> <span class="nt">ASCII</span><span class="err">字符</span> <span class="nt">d</span> <span class="err">整数</span> <span class="nt">e</span> <span class="err">浮点数，科学记数法</span> <span class="nt">f</span> <span class="err">浮点数，如</span> <span class="nt">123</span><span class="nc">.44</span> <span class="nt">g</span> <span class="err">由</span><span class="nt">awk</span><span class="err">决定使用哪种浮点数转换</span><span class="nt">e</span><span class="err">或</span><span class="nt">f</span> <span class="nt">o</span> <span class="err">八进制数</span> <span class="nt">s</span> <span class="err">字符串</span> <span class="nt">x</span> <span class="err">十六进制数</span>
</span><span class='line'>    <span class="err">⑥</span> <span class="err">举例</span><span class="o">:</span> <span class="nt">echo</span> <span class="s2">&quot;65&quot;</span> <span class="o">|</span> <span class="nt">awk</span> <span class="s1">&#39;{ printf (&quot;%c\n&quot;,$0) }&#39;</span> <span class="o">//</span> <span class="err">将打印</span> <span class="nt">A</span> <span class="nt">awk</span> <span class="s1">&#39;BEGIN{printf &quot;%.4f\n&quot;,999}&#39;</span> <span class="o">//</span><span class="err">将打印</span> <span class="nt">999</span><span class="nc">.0000</span> <span class="nt">awk</span> <span class="s1">&#39;BEGIN{printf &quot;2 number:%8.4f%8.2f&quot;,999,888}&#39;</span> <span class="o">//</span> <span class="err">将打印</span> <span class="nt">2</span> <span class="nt">number</span><span class="nd">:999</span><span class="nc">.0000</span> <span class="nt">888</span><span class="nc">.000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>转自<a href="http://blog.chinaunix.net/uid-83572-id-3690.html">http://blog.chinaunix.net/uid-83572-id-3690.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[myvimrc]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/myvimrc/"/>
    <updated>2013-05-19T18:55:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/myvimrc</id>
    <content type="html"><![CDATA[<p>my vimrc</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (myvimrc)</span> <a href='/downloads/code/myvimrc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set syntax=on
</span><span class='line'>
</span><span class='line'>set noeb
</span><span class='line'>
</span><span class='line'>set confirm
</span><span class='line'>
</span><span class='line'>set autoindent
</span><span class='line'>set cindent
</span><span class='line'>
</span><span class='line'>set tabstop=4
</span><span class='line'>
</span><span class='line'>set softtabstop=4
</span><span class='line'>set shiftwidth=4
</span><span class='line'>
</span><span class='line'>set noexpandtab
</span><span class='line'>
</span><span class='line'>set smarttab
</span><span class='line'>
</span><span class='line'>set number
</span><span class='line'>set history=1000
</span><span class='line'>
</span><span class='line'>set nobackup
</span><span class='line'>set noswapfile
</span><span class='line'>
</span><span class='line'>set ignorecase
</span><span class='line'>
</span><span class='line'>set hlsearch
</span><span class='line'>set incsearch
</span><span class='line'>
</span><span class='line'>set gdefault
</span><span class='line'>
</span><span class='line'>set enc=utf-8
</span><span class='line'>set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
</span><span class='line'>
</span><span class='line'>set langmenu=zh_CN.UTF-8
</span><span class='line'>set helplang=cn
</span><span class='line'>
</span><span class='line'>set statusline=%F%m%r%h%w\ <span class="cp">[</span><span class="n">FORMAT</span><span class="o">=%</span><span class="p">{</span><span class="o">&amp;</span><span class="nx">ff</span><span class="p">}</span><span class="cp">]</span>\ <span class="cp">[</span><span class="k">TYPE</span><span class="o">=%</span><span class="nx">Y</span><span class="cp">]</span>\ <span class="cp">[</span><span class="n">POS</span><span class="o">=%</span><span class="nx">l</span><span class="p">,</span><span class="o">%</span><span class="nx">v</span><span class="cp">][</span><span class="o">%</span><span class="nx">p</span><span class="o">%%</span><span class="cp">]</span>\ %{strftime(\&quot;%d/%m/%y\ -\ %H:%M\&quot;)}
</span><span class='line'>
</span><span class='line'>set laststatus=2
</span><span class='line'>
</span><span class='line'>set ruler
</span><span class='line'>
</span><span class='line'>set cmdheight=2
</span><span class='line'>
</span><span class='line'>filetype on
</span><span class='line'>
</span><span class='line'>filetype plugin on
</span><span class='line'>
</span><span class='line'>filetype indent on
</span><span class='line'>
</span><span class='line'>set viminfo+=!
</span><span class='line'>
</span><span class='line'>set iskeyword+=_,$,@,%,#,-
</span><span class='line'>
</span><span class='line'>set linespace=0
</span><span class='line'>
</span><span class='line'>set wildmenu
</span><span class='line'>
</span><span class='line'>set backspace=2
</span><span class='line'>
</span><span class='line'>set whichwrap+=<span class="err">&lt;</span>,&gt;,h,l
</span><span class='line'>
</span><span class='line'>set mouse=a
</span><span class='line'>set selection=exclusive
</span><span class='line'>set selectmode=mouse,key
</span><span class='line'>
</span><span class='line'>set report=0
</span><span class='line'>
</span><span class='line'>set shortmess=atI
</span><span class='line'>
</span><span class='line'>set fillchars=vert:\ ,stl:\ ,stlnc:\
</span><span class='line'>
</span><span class='line'>set showmatch
</span><span class='line'>
</span><span class='line'>set matchtime=5
</span><span class='line'>
</span><span class='line'>set scrolloff=3
</span><span class='line'>
</span><span class='line'>set smartindent
</span><span class='line'>
</span><span class='line'>if has(&quot;autocmd&quot;)
</span><span class='line'>   autocmd FileType xml,html,c,cs,java,perl,shell,bash,cpp,python,vim,php,ruby set number
</span><span class='line'>   autocmd FileType xml,html vmap <span class="nt">&lt;C</span><span class="na">-o</span><span class="nt">&gt;</span> <span class="nt">&lt;ESC&gt;</span>&#39;<span class="nt">&lt;i</span><span class="err">&lt;!</span><span class="na">--</span><span class="err">&lt;</span><span class="na">ESC</span><span class="nt">&gt;</span>o<span class="nt">&lt;ESC&gt;</span>&#39;&gt;o--&gt;
</span><span class='line'>   autocmd FileType java,c,cpp,cs vmap <span class="nt">&lt;C</span><span class="na">-o</span><span class="nt">&gt;</span> <span class="nt">&lt;ESC&gt;</span>&#39;<span class="nt">&lt;o</span><span class="err">/*&lt;</span><span class="na">ESC</span><span class="nt">&gt;</span>&#39;&gt;o*/
</span><span class='line'>   autocmd FileType html,text,php,vim,c,java,xml,bash,shell,perl,python setlocal textwidth=100
</span><span class='line'>   autocmd Filetype html,xml,xsl source $VIMRUNTIME/plugin/closetag.vim
</span><span class='line'>   autocmd BufReadPost *
</span><span class='line'>      \ if line(&quot;&#39;\&quot;&quot;) &gt; 0 <span class="err">&amp;&amp;</span> line(&quot;&#39;\&quot;&quot;) <span class="err">&lt;</span>= line(&quot;$&quot;) |
</span><span class='line'>      \   exe &quot;normal g`\&quot;&quot; |
</span><span class='line'>      \ endif
</span><span class='line'>endif &quot; has(&quot;autocmd&quot;)
</span><span class='line'>
</span><span class='line'>map <span class="nt">&lt;F5&gt;</span> :call CompileRunGcc()<span class="nt">&lt;CR&gt;</span>
</span><span class='line'>func! CompileRunGcc()
</span><span class='line'>exec &quot;w&quot;
</span><span class='line'>exec &quot;!gcc % -o %<span class="err">&lt;</span>&quot;
</span><span class='line'>exec &quot;! ./%<span class="err">&lt;</span>&quot;
</span><span class='line'>endfunc
</span><span class='line'>
</span><span class='line'>map <span class="nt">&lt;F6&gt;</span> :call CompileRunGpp()<span class="nt">&lt;CR&gt;</span>
</span><span class='line'>func! CompileRunGpp()
</span><span class='line'>exec &quot;w&quot;
</span><span class='line'>exec &quot;!g++ % -o %<span class="err">&lt;</span>&quot;
</span><span class='line'>exec &quot;! ./%<span class="err">&lt;</span>&quot;
</span><span class='line'>endfunc
</span><span class='line'>
</span><span class='line'>map <span class="nt">&lt;F7&gt;</span> :w<span class="nt">&lt;cr&gt;</span>:!python %<span class="nt">&lt;cr&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>map <span class="nt">&lt;F8&gt;</span> :call CompileRunSH()<span class="nt">&lt;CR&gt;</span>
</span><span class='line'>func! CompileRunSH()
</span><span class='line'>exec &quot;w&quot;
</span><span class='line'>exec &quot;!chmod u+x %&quot;
</span><span class='line'>exec &quot;!./%&quot;
</span><span class='line'>endfunc
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>map <span class="nt">&lt;F9&gt;</span> :call Debug()<span class="nt">&lt;CR&gt;</span>
</span><span class='line'>func!  Debug()
</span><span class='line'>exec &quot;w&quot;
</span><span class='line'>exec &quot;!gcc % -o %<span class="err">&lt;</span> -gstabs+&quot;
</span><span class='line'>exec &quot;!gdb %<span class="err">&lt;</span>&quot;
</span><span class='line'>endfunc
</span><span class='line'>
</span><span class='line'>set encoding=utf-8
</span><span class='line'>function! SetFileEncodings(encodings)
</span><span class='line'>    let b:myfileencodingsbak=<span class="err">&amp;</span>fileencodings
</span><span class='line'>    let <span class="err">&amp;</span>fileencodings=a:encodings
</span><span class='line'>endfunction
</span><span class='line'>function! RestoreFileEncodings()
</span><span class='line'>    let <span class="err">&amp;</span>fileencodings=b:myfileencodingsbak
</span><span class='line'>    unlet b:myfileencodingsbak
</span><span class='line'>endfunction
</span><span class='line'>
</span><span class='line'>au BufReadPre *.nfo call SetFileEncodings(&#39;cp437&#39;)|set ambiwidth=single
</span><span class='line'>au BufReadPost *.nfo call RestoreFileEncodings()
</span><span class='line'>
</span><span class='line'>au BufRead,BufNewFile *  setfiletype txt
</span><span class='line'>
</span><span class='line'>set foldenable
</span><span class='line'>set foldmethod=manual
</span><span class='line'>nnoremap <span class="nt">&lt;space&gt;</span> @=((foldclosed(line(&#39;.&#39;)) <span class="nt">&lt; 0</span><span class="err">)</span> <span class="err">?</span> <span class="err">&#39;</span><span class="na">zc</span><span class="err">&#39;</span> <span class="na">:</span> <span class="err">&#39;</span><span class="na">zo</span><span class="err">&#39;)&lt;</span><span class="na">CR</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>let g:miniBufExplMapWindowNavVim = 1
</span><span class='line'>let g:miniBufExplMapWindowNavArrows = 1
</span><span class='line'>let g:miniBufExplMapCTabSwitchBufs = 1
</span><span class='line'>let g:miniBufExplModSelTarget = 1
</span><span class='line'>:colorscheme evening
</span><span class='line'>filetype plugin indent on
</span><span class='line'>set guifont=Courier\ 12
</span><span class='line'>set nocompatible
</span><span class='line'>let $VIMFILES=$HOME.&#39;/.vim&#39;
</span><span class='line'>map <span class="nt">&lt;F4&gt;</span> :call TitleDet()<span class="nt">&lt;cr&gt;</span>&#39;s
</span><span class='line'>function AddTitle()
</span><span class='line'>    call append(0,&quot;/*=============================================================================&quot;)
</span><span class='line'>    call append(1,&quot;#&quot;)
</span><span class='line'>    call append(2,&quot;# Author: mengdaiku - mengdaikun@gmail.com&quot;)
</span><span class='line'>    call append(3,&quot;#&quot;)
</span><span class='line'>    call append(4,&quot;# QQ : 646978600&quot;)
</span><span class='line'>    call append(5,&quot;#&quot;)
</span><span class='line'>    call append(6,&quot;# Last modified: &quot;.strftime(&quot;%Y-%m-%d %H:%M&quot;))
</span><span class='line'>    call append(7,&quot;#&quot;)
</span><span class='line'>    call append(8,&quot;# Filename: &quot;.expand(&quot;%:t&quot;))
</span><span class='line'>    call append(9,&quot;#&quot;)
</span><span class='line'>    call append(10,&quot;# Description: &quot;)
</span><span class='line'>    call append(11,&quot;#&quot;)
</span><span class='line'>    call append(12,&quot;=============================================================================*/&quot;)
</span><span class='line'>    echohl WarningMsg | echo &quot;Successful in adding the copyright.&quot; | echohl None
</span><span class='line'>endf
</span><span class='line'>&quot;更新最近修改时间和文件名
</span><span class='line'>function UpdateTitle()
</span><span class='line'>    normal m&#39;
</span><span class='line'>    execute &#39;/# *Last modified:/s@:.*$@\=strftime(&quot;:\t%Y-%m-%d %H:%M&quot;)@&#39;
</span><span class='line'>    normal &#39;&#39;
</span><span class='line'>    normal mk
</span><span class='line'>    execute &#39;/# *Filename:/s@:.*$@\=&quot;:\t\t&quot;.expand(&quot;%:t&quot;)@&#39;
</span><span class='line'>    execute &quot;noh&quot;
</span><span class='line'>    normal &#39;k
</span><span class='line'>    echohl WarningMsg | echo &quot;Successful in updating the copy right.&quot; | echohl None
</span><span class='line'>endfunction
</span><span class='line'>&quot;判断前10行代码里面，是否有Last modified这个单词，
</span><span class='line'>&quot;如果没有的话，代表没有添加过作者信息，需要新添加；
</span><span class='line'>&quot;如果有的话，那么只需要更新即可
</span><span class='line'>function TitleDet()
</span><span class='line'>    let n=1
</span><span class='line'>    &quot;默认为添加
</span><span class='line'>    while n <span class="nt">&lt; 10</span>
</span><span class='line'>        <span class="na">let</span> <span class="na">line =</span><span class="err"> </span><span class="s">getline(n)</span>
</span><span class='line'>        <span class="na">if</span> <span class="na">line =</span><span class="s">~</span> <span class="err">&#39;^\#\</span><span class="na">s</span><span class="err">*\</span><span class="na">S</span><span class="err">*</span><span class="na">Last</span><span class="err">\</span><span class="na">smodified:</span><span class="err">\</span><span class="na">S</span><span class="err">*.*$&#39;</span>
</span><span class='line'>            <span class="na">call</span> <span class="na">UpdateTitle</span><span class="err">()</span>
</span><span class='line'>            <span class="na">return</span>
</span><span class='line'>        <span class="na">endif</span>
</span><span class='line'>        <span class="na">let</span> <span class="na">n =</span><span class="err"> </span><span class="s">n</span> <span class="err">+</span> <span class="na">1</span>
</span><span class='line'>    <span class="na">endwhile</span>
</span><span class='line'>    <span class="na">call</span> <span class="na">AddTitle</span><span class="err">()</span>
</span><span class='line'><span class="na">endfunction</span>
</span><span class='line'><span class="na">map</span> <span class="err">&lt;</span><span class="na">F3</span><span class="nt">&gt;</span> :call TitleDet1()<span class="nt">&lt;cr&gt;</span>&#39;s
</span><span class='line'>function AddTitle1()
</span><span class='line'>    call append(0,&quot;#/*=============================================================================&quot;)
</span><span class='line'>    call append(1,&quot;#&quot;)
</span><span class='line'>    call append(2,&quot;# Author: mengdaikun - mengdaikun@gmail.com&quot;)
</span><span class='line'>    call append(3,&quot;#&quot;)
</span><span class='line'>    call append(4,&quot;# QQ : 646978600&quot;)
</span><span class='line'>    call append(5,&quot;#&quot;)
</span><span class='line'>    call append(6,&quot;# Last modified: &quot;.strftime(&quot;%Y-%m-%d %H:%M&quot;))
</span><span class='line'>    call append(7,&quot;#&quot;)
</span><span class='line'>    call append(8,&quot;# Filename: &quot;.expand(&quot;%:t&quot;))
</span><span class='line'>    call append(9,&quot;#&quot;)
</span><span class='line'>    call append(10,&quot;# Description: &quot;)
</span><span class='line'>    call append(11,&quot;#&quot;)
</span><span class='line'>    call append(12,&quot;#=============================================================================*/&quot;)
</span><span class='line'>    echohl WarningMsg | echo &quot;Successful in adding the copyright.&quot; | echohl None
</span><span class='line'>endf
</span><span class='line'>&quot;更新最近修改时间和文件名
</span><span class='line'>function UpdateTitle1()
</span><span class='line'>    normal m&#39;
</span><span class='line'>    execute &#39;/# *Last modified:/s@:.*$@\=strftime(&quot;:\t%Y-%m-%d %H:%M&quot;)@&#39;
</span><span class='line'>    normal &#39;&#39;
</span><span class='line'>    normal mk
</span><span class='line'>    execute &#39;/# *Filename:/s@:.*$@\=&quot;:\t\t&quot;.expand(&quot;%:t&quot;)@&#39;
</span><span class='line'>    execute &quot;noh&quot;
</span><span class='line'>    normal &#39;k
</span><span class='line'>    echohl WarningMsg | echo &quot;Successful in updating the copy right.&quot; | echohl None
</span><span class='line'>endfunction
</span><span class='line'>&quot;判断前10行代码里面，是否有Last modified这个单词，
</span><span class='line'>&quot;如果没有的话，代表没有添加过作者信息，需要新添加；
</span><span class='line'>&quot;如果有的话，那么只需要更新即可
</span><span class='line'>function TitleDet1()
</span><span class='line'>    let n=1
</span><span class='line'>    &quot;默认为添加
</span><span class='line'>    while n <span class="nt">&lt; 10</span>
</span><span class='line'>        <span class="na">let</span> <span class="na">line =</span><span class="err"> </span><span class="s">getline(n)</span>
</span><span class='line'>        <span class="na">if</span> <span class="na">line =</span><span class="s">~</span> <span class="err">&#39;^\#\</span><span class="na">s</span><span class="err">*\</span><span class="na">S</span><span class="err">*</span><span class="na">Last</span><span class="err">\</span><span class="na">smodified:</span><span class="err">\</span><span class="na">S</span><span class="err">*.*$&#39;</span>
</span><span class='line'>            <span class="na">call</span> <span class="na">UpdateTitle1</span><span class="err">()</span>
</span><span class='line'>            <span class="na">return</span>
</span><span class='line'>        <span class="na">endif</span>
</span><span class='line'>        <span class="na">let</span> <span class="na">n =</span><span class="err"> </span><span class="s">n</span> <span class="err">+</span> <span class="na">1</span>
</span><span class='line'>    <span class="na">endwhile</span>
</span><span class='line'>    <span class="na">call</span> <span class="na">AddTitle1</span><span class="err">()</span>
</span><span class='line'><span class="na">endfunction</span>
</span><span class='line'><span class="na">map</span> <span class="err">&lt;</span><span class="na">F2</span><span class="nt">&gt;</span> :call TitleDet2()<span class="nt">&lt;cr&gt;</span>&#39;s
</span><span class='line'>function AddTitle2()
</span><span class='line'>    call append(0,&quot;&#39;&#39;&#39;/*=============================================================================&quot;)
</span><span class='line'>    call append(1,&quot;#&quot;)
</span><span class='line'>    call append(2,&quot;# Author: mengdaikun - mengdaikun@gmail.com&quot;)
</span><span class='line'>    call append(3,&quot;#&quot;)
</span><span class='line'>    call append(4,&quot;# QQ : 646978600&quot;)
</span><span class='line'>    call append(5,&quot;#&quot;)
</span><span class='line'>    call append(6,&quot;# Last modified: &quot;.strftime(&quot;%Y-%m-%d %H:%M&quot;))
</span><span class='line'>    call append(7,&quot;#&quot;)
</span><span class='line'>    call append(8,&quot;# Filename: &quot;.expand(&quot;%:t&quot;))
</span><span class='line'>    call append(9,&quot;#&quot;)
</span><span class='line'>    call append(10,&quot;# Description: &quot;)
</span><span class='line'>    call append(11,&quot;#&quot;)
</span><span class='line'>    call append(12,&quot;=============================================================================*/&#39;&#39;&#39;&quot;)
</span><span class='line'>    echohl WarningMsg | echo &quot;Successful in adding the copyright.&quot; | echohl None
</span><span class='line'>endf
</span><span class='line'>&quot;更新最近修改时间和文件名
</span><span class='line'>function UpdateTitle2()
</span><span class='line'>    normal m&#39;
</span><span class='line'>    execute &#39;/# *Last modified:/s@:.*$@\=strftime(&quot;:\t%Y-%m-%d %H:%M&quot;)@&#39;
</span><span class='line'>    normal &#39;&#39;
</span><span class='line'>    normal mk
</span><span class='line'>    execute &#39;/# *Filename:/s@:.*$@\=&quot;:\t\t&quot;.expand(&quot;%:t&quot;)@&#39;
</span><span class='line'>    execute &quot;noh&quot;
</span><span class='line'>    normal &#39;k
</span><span class='line'>    echohl WarningMsg | echo &quot;Successful in updating the copy right.&quot; | echohl None
</span><span class='line'>endfunction
</span><span class='line'>&quot;判断前10行代码里面，是否有Last modified这个单词，
</span><span class='line'>&quot;如果没有的话，代表没有添加过作者信息，需要新添加；
</span><span class='line'>&quot;如果有的话，那么只需要更新即可
</span><span class='line'>function TitleDet2()
</span><span class='line'>    let n=1
</span><span class='line'>    &quot;默认为添加
</span><span class='line'>    while n <span class="nt">&lt; 10</span>
</span><span class='line'>        <span class="na">let</span> <span class="na">line =</span><span class="err"> </span><span class="s">getline(n)</span>
</span><span class='line'>        <span class="na">if</span> <span class="na">line =</span><span class="s">~</span> <span class="err">&#39;^\#\</span><span class="na">s</span><span class="err">*\</span><span class="na">S</span><span class="err">*</span><span class="na">Last</span><span class="err">\</span><span class="na">smodified:</span><span class="err">\</span><span class="na">S</span><span class="err">*.*$&#39;</span>
</span><span class='line'>            <span class="na">call</span> <span class="na">UpdateTitle2</span><span class="err">()</span>
</span><span class='line'>            <span class="na">return</span>
</span><span class='line'>        <span class="na">endif</span>
</span><span class='line'>        <span class="na">let</span> <span class="na">n =</span><span class="err"> </span><span class="s">n</span> <span class="err">+</span> <span class="na">1</span>
</span><span class='line'>    <span class="na">endwhile</span>
</span><span class='line'>    <span class="na">call</span> <span class="na">AddTitle2</span><span class="err">()</span>
</span><span class='line'><span class="na">endfunction</span>
</span><span class='line'><span class="na">set</span> <span class="na">t_Co=</span><span class="s">256</span>
</span><span class='line'><span class="na">colorscheme</span> <span class="na">darkburn</span>
</span><span class='line'><span class="na">let</span> <span class="na">g:SuperTabRetainCompletionType=</span><span class="s">2</span>
</span><span class='line'><span class="na">let</span> <span class="na">g:SuperTabDefaultCompletionType=</span><span class="s">&quot;&lt;C-X&gt;&lt;C-O&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内核启动流程]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/linuxnei-he-qi-dong-liu-cheng/"/>
    <updated>2013-05-19T11:09:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/linuxnei-he-qi-dong-liu-cheng</id>
    <content type="html"><![CDATA[<p>启动流程一览</p>

<p>既然启动是很严肃的一件事，那我们就来了解一下整个启动的过程吧！ 好让大家比较容易发现启动过程里面可能会发生问题的地方，以及出现问题后的解决之道！ 不过，由於启动的过程中，那个启动管理程序 (Boot Loader) 使用的软件可能不一样，例如目前各大 Linux distributions 的主流为 grub，但早期 Linux 默认是使用 LILO 。 但无论如何，我们总是得要了解整个 boot loader 的工作情况，才能了解为何进行多重启动的配置时， 老是听人家讲要先安装 Windows 再安装 Linux 的原因～</p>

<p>假设以个人计算机架设的 Linux 主机为例 ， 当你按下电源按键后计算机硬件会主动的读取 BIOS 来加载硬件资讯及进行硬件系统的自我测试， 之后系统会主动的去读取第一个可启动的装置 (由 BIOS 配置的) ，此时就可以读入启动管理程序了。</p>

<p>启动管理程序可以指定使用哪个核心文件来启动，并实际加载核心到内存当中解压缩与运行， 此时核心就能够开始在内存内活动，并侦测所有硬件资讯与加载适当的驱动程序来使整部主机开始运行， 等到核心侦测硬件与加载驱动程序完毕后，一个最阳春的操作系统就开始在你的 PC 上面跑了。</p>

<p>主机系统开始运行后，此时 Linux 才会呼叫外部程序开始准备软件运行的环境， 并且实际的加载所有系统运行所需要的软件程序哩！最后系统就会开始等待你的登陆与操作啦！ 简单来说，系统启动的经过可以汇整成底下的流程的：</p>

<pre><code>加载 BIOS 的硬件资讯与进行自我测试，并依据配置取得第一个可启动的装置；
读取并运行第一个启动装置内 MBR 的 boot Loader (亦即是 grub, spfdisk 等程序)；
依据 boot loader 的配置加载 Kernel ，Kernel 会开始侦测硬件与加载驱动程序；
</code></pre>

<p>BIOS, 启动自我测试与 MBR</p>

<p>在个人计算机架构下，你想要启动整部系统首先就得要让系统去加载 BIOS (Basic Input Output System)，并透过 BIOS 程序去加载 CMOS 的资讯，并且藉由 CMOS 内的配置值取得主机的各项硬件配置， 例如 CPU 与周边设备的沟通时脉啊、启动装置的搜寻顺序啊、硬盘的大小与类型啊、 系统时间啊、各周边汇流排的是否启动 Plug and Play (PnP, 随插即用装置) 啊、 各周边设备的 I/O 位址啊、以及与 CPU 沟通的 IRQ 岔断等等的资讯。</p>

<p>在取得这些资讯后，BIOS 还会进行启动自我测试 (Power-on Self Test, POST) 。 然后开始运行硬件侦测的初始化，并配置 PnP 装置，之后再定义出可启动的装置顺序， 接下来就会开始进行启动装置的数据读取了 (MBR 相关的任务开始)。</p>

<p>由於我们的系统软件大多放置到硬盘中嘛！所以 BIOS 会指定启动的装置好让我们可以读取磁碟中的操作系统核心文件。 但由於不同的操作系统他的文件系统格式不相同，因此我们必须要以一个启动管理程序来处理核心文件加载 (load) 的问题， 因此这个启动管理程序就被称为 Boot Loader 了。那这个 Boot Loader 程序安装在哪里呢？就在启动装置的第一个磁区 (sector) 内，也就是我们一直谈到的 MBR (Master Boot Record, 主要启动记录区)。</p>

<p>那你会不会觉得很奇怪啊？既然核心文件需要 loader 来读取，那每个操作系统的 loader 都不相同， 这样的话 BIOS 又是如何读取 MBR 内的 loader 呢？很有趣的问题吧！其实 BIOS 是透过硬件的 INT 13 中断功能来读取 MBR 的，也就是说，只要 BIOS 能够侦测的到你的磁碟 (不论该磁碟是 SATA 还是 IDE 介面)，那他就有办法透过 INT 13 这条通道来读取该磁碟的第一个磁区内的 MBR 啦！这样 boot loader 也就能够被运行罗！</p>

<p>我们知道每颗硬盘的第一个磁区内含有 446 bytes的 MBR 区域，那么如果我的主机上面有两颗硬盘的话， 系统会去哪颗硬盘的 MBR 读取 boot loader 呢？这个就得要看 BIOS 的配置了。 基本上，我们常常讲的『系统的 MBR』其实指的是 第一个启动装置的 MBR 才对！ 所以，改天如果你要将启动管理程序安装到某颗硬盘的 MBR 时， 要特别注意当时系统的『第一个启动装置』是哪个，否则会安装到错误的硬盘上面的 MBR 喔！
Boot Loader</p>

<p>刚刚说到 Loader 的最主要功能是要认识操作系统的文件格式并据以加载核心到主内存中去运行。 由於不同操作系统的文件格式不一致，因此每种操作系统都有自己的 boot loader 啦！用自己的 loader 才有办法加载核心文件嘛！那问题就来啦，你应该有听说过多重操作系统吧？也就是在一部主机上面安装多种不同的操作系统。 既然你 (1)必须要使用自己的 loader 才能够加载属於自己的操作系统核心，而 (2)系统的 MBR 只有一个，那你怎么会有办法同时在一部主机上面安装 Windows 与 Linux 呢？</p>

<p>其实每个文件系统 (filesystem, 或者是 partition) 都会保留一块启动磁区 (boot sector) 提供操作系统安装 boot loader ， 而通常操作系统默认都会安装一份 loader 到他根目录所在的文件系统的 boot sector 上。如果我们在一部主机上面安装 Windows 与 Linux 后，该 boot sector, boot loader 与 MBR 的相关性会有点像下图：</p>

<p>图 1.2.1、 boot loader 安装在 MBR, boot sector 与操作系统的关系
如上图所示，每个操作系统默认是会安装一套 boot loader 到他自己的文件系统中 (就是每个 filesystem 左下角的方框)，而在 Linux 系统安装时，你可以选择将 boot loader 安装到 MBR 去，也可以选择不安装。 如果选择安装到 MBR 的话，那理论上你在 MBR 与 boot sector 都会保有一份 boot loader 程序的。 至於 Windows 安装时，他默认会主动的将 MBR 与 boot sector 都装上一份 boot loader！所以啦， 你会发现安装多重操作系统时，你的 MBR 常常会被不同的操作系统的 boot loader 所覆盖啦！ ^^</p>

<p>我们刚刚提到的两个问题还是没有解决啊！虽然各个操作系统都可以安装一份 boot loader 到他们的 boot sector 中， 这样操作系统可以透过自己的 boot loader 来加载核心了。问题是系统的 MBR 只有一个哩！ 你要怎么运行 boot sector 里面的 loader 啊？</p>

<p>boot loader 主要的功能如下</p>

<pre><code>提供菜单：使用者可以选择不同的启动项目，这也是多重启动的重要功能！
加载核心文件：直接指向可启动的程序区段来开始操作系统；
转交其他 loader：将启动管理功能转交给其他 loader 负责。
</code></pre>

<p>由於具有菜单功能，因此我们可以选择不同的核心来启动。而由於具有控制权转交的功能，因此我们可以加载其他 boot sector 内的 loader 啦！不过 Windows 的 loader 默认不具有控制权转交的功能，因此你不能使用 Windows 的 loader 来加载 Linux 的 loader 喔！这也是为啥第三章谈到 MBR 与多重启动时，会特别强调先装 Windows 再装 Linux 的缘故。 我们将上述的三个功能以底下的图示来解释你就看的懂了！(与第三章的图示也非常类似啦！)</p>

<p>图 1.2.2、 启动管理程序的菜单功能与控制权转交功能示意图
如上图所示，我的 MBR 使用 Linux 的 grub 这个启动管理程序，并且里面假设已经有了三个菜单， 第一个菜单可以直接指向 Linux 的核心文件并且直接加载核心来启动；第二个菜单可以将启动管理程序控制权交给 Windows 来管理，此时 Windows 的 loader 会接管启动流程，这个时候他就能够启动 windows 了。第三个菜单则是使用 Linux 在 boot sector 内的启动管理程序，此时就会跳出另一个 grub 的菜单啦！了解了吗？</p>

<p>而最终 boot loader 的功能就是『加载 kernel 文件』啦！</p>

<p>加载核心侦测硬件与 initrd</p>

<p>当我们藉由 boot loader 的管理而开始读取核心文件后，接下来， Linux 就会将核心解压缩到主内存当中， 并且利用核心的功能，开始测试与驱动各个周边装置，包括储存装置、CPU、网络卡、声卡等等。 此时 Linux 核心会以自己的功能重新侦测一次硬件，而不一定会使用 BIOS 侦测到的硬件资讯喔！也就是说，核心此时才开始接管 BIOS 后的工作了。 那么核心文件在哪里啊？一般来说，他会被放置到 /boot 里面，并且取名为 /boot/vmlinuz 才对！
<code>
[root@www ~]# ls --format=single-column -F /boot
config-2.6.18-92.el5      &lt;==此版本核心被编译时选择的功能与模块配置档
grub/                     &lt;==就是启动管理程序 grub 相关数据目录
initrd-2.6.18-92.el5.img  &lt;==虚拟文件系统档！
System.map-2.6.18-92.el5  &lt;==核心功能放置到内存位址的对应表
vmlinuz-2.6.18-92.el5     &lt;==就是核心文件啦！最重要者！
</code>
从上表我们也可以知道此版本的 Linux 核心为 2.6.18-92.el5 这个版本！为了硬件开发商与其他核心功能开发者的便利， 因此 Linux 核心是可以透过动态加载核心模块的 (就请想成驱动程序即可)，这些核心模块就放置在 /lib/modules/ 目录内。 由于模块放置到磁盘根目录内 (要记得 /lib 不可以与 / 分别放在不同的 partition ！)， 因此在启动的过程中核心必须要挂载根目录，这样才能够读取核心模块提供加载驱动程序的功能。 而且为了担心影响到磁碟内的文件系统，因此启动过程中根目录是以唯读的方式来挂载的喔。</p>

<p>一般来说，非必要的功能且可以编译成为模块的核心功能，目前的 Linux distributions 都会将他编译成为模块。 因此 U盘, SATA, SCSI… 等磁碟装置的驱动程序通常都是以模块的方式来存在的。 现在来思考一种情况，假设你的 linux 是安装在 SATA 磁碟上面的，你可以透过 BIOS 的 INT 13 取得 boot loader 与 kernel 文件来启动，然后 kernel 会开始接管系统并且侦测硬件及尝试挂载根目录来取得额外的驱动程序。</p>

<p>问题是，核心根本不认识 SATA 磁碟，所以需要加载 SATA 磁碟的驱动程序， 否则根本就无法挂载根目录。但是 SATA 的驱动程序在 /lib/modules 内，你根本无法挂载根目录又怎么读取到 /lib/modules/ 内的驱动程序？是吧！非常的两难吧！在这个情况之下，你的 Linux 是无法顺利启动的！ 那怎办？没关系，我们可以透过虚拟文件系统来处理这个问题。</p>

<p>虚拟文件系统 (Initial RAM Disk) 一般使用的档名为 /boot/initrd ，这个文件的特色是，他也能够透过 boot loader 来加载到内存中， 然后这个文件会被解压缩并且在内存当中模拟成一个根目录， 且此模拟在内存当中的文件系统能够提供一支可运行的程序，透过该程序来加载启动过程中所最需要的核心模块， 通常这些模块就是 U盘, RAID, LVM, SCSI 等文件系统与磁碟介面的驱动程序啦！等加载完成后， 会帮助核心重新呼叫 /sbin/init 来开始后续的正常启动流程。</p>

<p>如上图所示，boot loader 可以加载 kernel 与 initrd ，然后在内存中让 initrd 解压缩成为根目录， kernel 就能够藉此加载适当的驱动程序，最终释放虚拟文件系统，并挂载实际的根目录文件系统， 就能够开始后续的正常启动流程。更详细的 initrd 说明，你可以自行使用 man initrd 去查阅看看。 底下让我们来了解一下 CentOS 5.x 的 initrd 文件内容有什么吧！</p>

<p><code>
[root@www ~]# mkdir /tmp/initrd
[root@www ~]# cp /boot/initrd-2.6.18-92.el5.img /tmp/initrd/
[root@www ~]# cd /tmp/initrd
[root@www initrd]# file initrd-2.6.18-92.el5.img
initrd-2.6.18-92.el5.img: gzip compressed data, ...
</code></p>

<p><code>
[root@www initrd]# mv initrd-2.6.18-92.el5.img initrd-2.6.18-92.el5.gz
[root@www initrd]# gzip -d initrd-2.6.18-92.el5.gz
[root@www initrd]# file initrd-2.6.18-92.el5
initrd-2.6.18-92.el5: ASCII cpio archive (SVR4 with no CRC)
</code></p>

<p><code>
[root@www initrd]# cpio -ivcdu &lt; initrd-2.6.18-92.el5
[root@www initrd]# ll
drwx------ 2 root root    4096 Apr 10 02:05 bin
drwx------ 3 root root    4096 Apr 10 02:05 dev
drwx------ 2 root root    4096 Apr 10 02:05 etc
-rwx------ 1 root root    1888 Apr 10 02:05 init
-rw------- 1 root root 5408768 Apr 10 02:00 initrd-2.6.18-92.el5
drwx------ 3 root root    4096 Apr 10 02:05 lib
drwx------ 2 root root    4096 Apr 10 02:05 proc
lrwxrwxrwx 1 root root       3 Apr 10 02:05 sbin -&gt; bin
drwx------ 2 root root    4096 Apr 10 02:05 sys
drwx------ 2 root root    4096 Apr 10 02:05 sysroot
</code>
<code>
[root@www initrd]# cat init
</code></p>

<p>```</p>

<h1>!/bin/nash</h1>

<p>mount -t proc /proc /proc    挂载内存的虚拟文件系统
&hellip;.(中间省略)&hellip;.
echo Creating initial device nodes
mknod /dev/null c 1 3        创建系统所需要的各项装置！
&hellip;.(中间省略)&hellip;.
echo &ldquo;Loading ehci-hcd.ko module&rdquo;
insmod /lib/ehci-hcd.ko      加载各项核心模块，就是驱动程序！
&hellip;.(中间省略)&hellip;.
echo Creating root device.
mkrootdev -t ext3 -o defaults,ro hdc2 尝试挂载根目录啦！
&hellip;.(底下省略)&hellip;.
```</p>

<p>透过上述运行档的内容，我们可以知道 initrd 有加载模块并且尝试挂载了虚拟文件系统。 接下来就能够顺利的运行啦！那么是否一定需要 initrd 呢？</p>

<p>是否没有 initrd 就无法顺利启动？
答：
不见得的！需要 initrd 最重要的原因是，当启动时无法挂载根目录的情况下， 此时就一定需要 initrd ，例如你的根目录在特殊的磁碟介面 (U盘, SATA, SCSI) ， 或者是你的文件系统较为特殊 (LVM, RAID) 等等，才会需要 initrd。</p>

<p>如果你的 Linux 是安装在 IDE 介面的磁碟上，并且使用默认的 ext2/ext3 文件系统， 那么不需要 initrd 也能够顺利的启动进入 Linux 的！</p>

<p>在核心完整的加载后，您的主机应该就开始正确的运行了</p>

<p>转自 <a href="http://vbird.dic.ksu.edu.tw/linux_basic/0510osloader_1.php">http://vbird.dic.ksu.edu.tw/linux_basic/0510osloader_1.php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux系统调用列表]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/linuxxi-tong-diao-yong-lie-biao/"/>
    <updated>2013-05-19T11:08:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/linuxxi-tong-diao-yong-lie-biao</id>
    <content type="html"><![CDATA[<p>以下是Linux系统调用的一个列表，包含了大部分常用系统调用和由系统调用派生出的的函数。这可能是你在互联网上所能看到的唯一一篇中文注释的Linux系统调用列表，即使是简单的字母序英文列表，能做到这么完全也是很罕见的。</p>

<p>按照惯例，这个列表以man pages第2节，即系统调用节为蓝本。按照笔者的理解，对其作了大致的分类，同时也作了一些小小的修改，删去了几个仅供内核使用，不允许用户调用的系统调用，对个别本人稍觉不妥的地方作了一些小的修改，并对所有列出的系统调用附上简要注释。</p>

<p>其中有一些函数的作用完全相同，只是参数不同。（可能很多熟悉C++朋友马上就能联想起函数重载，但是别忘了Linux核心是用C语言写的，所以只 能取成不同的函数名）。还有一些函数已经过时，被新的更好的函数所代替了（gcc在链接这些函数时会发出警告），但因为兼容的原因还保留着，这些函数我会 在前面标上星号以示区别。</p>

<p>一、进程控制：</p>

<p><code>
fork    创建一个新进程
clone   按指定条件创建子进程
execve  运行可执行文件
exit    中止进程
_exit   立即中止当前进程
getdtablesize   进程所能打开的最大文件数
getpgid     获取指定进程组标识号
setpgid     设置指定进程组标志号
getpgrp     获取当前进程组标识号
setpgrp     设置当前进程组标志号
getpid  获取进程标识号
getppid     获取父进程标识号
getpriority     获取调度优先级
setpriority     设置调度优先级
modify_ldt  读写进程的本地描述表
nanosleep   使进程睡眠指定的时间
nice    改变分时进程的优先级
pause   挂起进程，等待信号
personality     设置进程运行域
prctl   对进程进行特定操作
ptrace  进程跟踪
sched_get_priority_max  取得静态优先级的上限
sched_get_priority_min  取得静态优先级的下限
sched_getparam  取得进程的调度参数
sched_getscheduler  取得指定进程的调度策略
sched_rr_get_interval   取得按RR算法调度的实时进程的时间片长度
sched_setparam  设置进程的调度参数
sched_setscheduler  设置指定进程的调度策略和参数
sched_yield     进程主动让出处理器,并将自己等候调度队列队尾
vfork   创建一个子进程，以供执行新程序，常与execve等同时使用
wait    等待子进程终止
wait3   参见wait
waitpid     等待指定子进程终止
wait4   参见waitpid
capget  获取进程权限
capset  设置进程权限
getsid  获取会晤标识号
setsid  设置会晤标识号
</code>
二、文件系统控制
<code>
1、文件读写操作
fcntl   文件控制
open    打开文件
creat   创建新文件
close   关闭文件描述字
read    读文件
write   写文件
readv   从文件读入数据到缓冲数组中
writev  将缓冲数组里的数据写入文件
pread   对文件随机读
pwrite  对文件随机写
lseek   移动文件指针
_llseek     在64位地址空间里移动文件指针
dup     复制已打开的文件描述字
dup2    按指定条件复制文件描述字
flock   文件加/解锁
poll    I/O多路转换
truncate    截断文件
ftruncate   参见truncate
umask   设置文件权限掩码
fsync   把文件在内存中的部分写回磁盘
</code>
2、文件系统操作
<code>
access  确定文件的可存取性
chdir   改变当前工作目录
fchdir  参见chdir
chmod   改变文件方式
fchmod  参见chmod
chown   改变文件的属主或用户组
fchown  参见chown
lchown  参见chown
chroot  改变根目录
stat    取文件状态信息
lstat   参见stat
fstat   参见stat
statfs  取文件系统信息
fstatfs     参见statfs
readdir     读取目录项
getdents    读取目录项
mkdir   创建目录
mknod   创建索引节点
rmdir   删除目录
rename  文件改名
link    创建链接
symlink     创建符号链接
unlink  删除链接
readlink    读符号链接的值
mount   安装文件系统
umount  卸下文件系统
ustat   取文件系统信息
utime   改变文件的访问修改时间
utimes  参见utime
quotactl    控制磁盘配额
</code></p>

<p>三、系统控制</p>

<p><code>
ioctl   I/O总控制函数
_sysctl     读/写系统参数
acct    启用或禁止进程记账
getrlimit   获取系统资源上限
setrlimit   设置系统资源上限
getrusage   获取系统资源使用情况
uselib  选择要使用的二进制函数库
ioperm  设置端口I/O权限
iopl    改变进程I/O权限级别
outb    低级端口操作
reboot  重新启动
swapon  打开交换文件和设备
swapoff     关闭交换文件和设备
bdflush     控制bdflush守护进程
sysfs   取核心支持的文件系统类型
sysinfo     取得系统信息
adjtimex    调整系统时钟
alarm   设置进程的闹钟
getitimer   获取计时器值
setitimer   设置计时器值
gettimeofday    取时间和时区
settimeofday    设置时间和时区
stime   设置系统日期和时间
time    取得系统时间
times   取进程运行时间
uname   获取当前UNIX系统的名称、版本和主机等信息
vhangup     挂起当前终端
nfsservctl  对NFS守护进程进行控制
vm86    进入模拟8086模式
create_module   创建可装载的模块项
delete_module   删除可装载的模块项
init_module     初始化模块
query_module    查询模块信息
get_kernel_syms     取得核心符号,已被query_module代替
</code>
四、内存管理
<code>
brk     改变数据段空间的分配
sbrk    参见brk
mlock   内存页面加锁
munlock     内存页面解锁
mlockall    调用进程所有内存页面加锁
munlockall  调用进程所有内存页面解锁
mmap    映射虚拟内存页
munmap  去除内存页映射
mremap  重新映射虚拟内存地址
msync   将映射内存中的数据写回磁盘
mprotect    设置内存映像保护
getpagesize     获取页面大小
sync    将内存缓冲区数据写回硬盘
cacheflush  将指定缓冲区中的内容写回磁盘
</code></p>

<p>五、网络管理
<code>
getdomainname   取域名
setdomainname   设置域名
gethostid   获取主机标识号
sethostid   设置主机标识号
gethostname     获取本主机名称
sethostname     设置主机名称
</code></p>

<p>六、socket控制</p>

<p><code>
socketcall  socket系统调用
socket  建立socket
bind    绑定socket到端口
connect     连接远程主机
accept  响应socket连接请求
send    通过socket发送信息
sendto  发送UDP信息
sendmsg     参见send
recv    通过socket接收信息
recvfrom    接收UDP信息
recvmsg     参见recv
listen  监听socket端口
select  对多路同步I/O进行轮询
shutdown    关闭socket上的连接
getsockname     取得本地socket名字
getpeername     获取通信对方的socket名字
getsockopt  取端口设置
setsockopt  设置端口参数
sendfile    在文件或端口间传输数据
socketpair  创建一对已联接的无名socket
</code>
七、用户管理
<code>
getuid  获取用户标识号
setuid  设置用户标志号
getgid  获取组标识号
setgid  设置组标志号
getegid     获取有效组标识号
setegid     设置有效组标识号
geteuid     获取有效用户标识号
seteuid     设置有效用户标识号
setregid    分别设置真实和有效的的组标识号
setreuid    分别设置真实和有效的用户标识号
getresgid   分别获取真实的,有效的和保存过的组标识号
setresgid   分别设置真实的,有效的和保存过的组标识号
getresuid   分别获取真实的,有效的和保存过的用户标识号
setresuid   分别设置真实的,有效的和保存过的用户标识号
setfsgid    设置文件系统检查时使用的组标识号
setfsuid    设置文件系统检查时使用的用户标识号
getgroups   获取后补组标志清单
setgroups   设置后补组标志清单
</code></p>

<p>八、进程间通信</p>

<p><code>
ipc     进程间通信总控制调用
</code></p>

<p>1、信号</p>

<p><code>
sigaction   设置对指定信号的处理方法
sigprocmask     根据参数对信号集中的信号执行阻塞/解除阻塞等操作
sigpending  为指定的被阻塞信号设置队列
sigsuspend  挂起进程等待特定信号
signal  参见signal
kill    向进程或进程组发信号
*sigblock   向被阻塞信号掩码中添加信号,已被sigprocmask代替
*siggetmask     取得现有阻塞信号掩码,已被sigprocmask代替
*sigsetmask     用给定信号掩码替换现有阻塞信号掩码,已被sigprocmask代替
*sigmask    将给定的信号转化为掩码,已被sigprocmask代替
*sigpause   作用同sigsuspend,已被sigsuspend代替
sigvec  为兼容BSD而设的信号处理函数,作用类似sigaction
ssetmask    ANSI C的信号处理函数,作用类似sigaction
</code></p>

<p>2、消息</p>

<p><code>
msgctl  消息控制操作
msgget  获取消息队列
msgsnd  发消息
msgrcv  取消息
</code></p>

<p>3、管道</p>

<p><code>
pipe    创建管道
</code></p>

<p>4、信号量</p>

<p><code>
semctl  信号量控制
semget  获取一组信号量
semop   信号量操作
</code></p>

<p>5、共享内存</p>

<p><code>
shmctl  控制共享内存
shmget  获取共享内存
shmat   连接共享内存
shmdt   拆卸共享内存
</code></p>

<p>转自:<a href="http://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html">http://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html</a></p>
]]></content>
  </entry>
  
</feed>
