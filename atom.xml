<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mdk Blog home]]></title>
  <link href="http://mdkvimer.github.io/atom.xml" rel="self"/>
  <link href="http://mdkvimer.github.io/"/>
  <updated>2013-05-19T10:43:38+08:00</updated>
  <id>http://mdkvimer.github.io/</id>
  <author>
    <name><![CDATA[mdkvimer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[运维的那些命令]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/yun-wei-de-na-xie-ming-ling/"/>
    <updated>2013-05-19T10:42:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/yun-wei-de-na-xie-ming-ling</id>
    <content type="html"><![CDATA[<p>转自:<a href="http://deepin.iteye.com/blog/711813">http://deepin.iteye.com/blog/711813</a>
1.删除0字节文件
find -type f -size 0 -exec rm -rf {} \;</p>

<p>2.查看进程
按内存从大到小排列
ps -e   -o “%C   : %p : %z : %a”|sort -k5 -nr</p>

<p>3.按cpu利用率从大到小排列
ps -e   -o “%C   : %p : %z : %a”|sort   -nr</p>

<p>4.打印说cache里的URL
grep -r -a   jpg /data/cache/* | strings | grep “<a href="http:%E2%80%9D">http:%E2%80%9D</a> | awk -F’<a href="http:%E2%80%99">http:%E2%80%99</a> ‘{print “<a href="http:%E2%80%9D$2;">http:%E2%80%9D$2;</a>}’</p>

<p>5.查看http的并发请求数及其TCP连接状态：
netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</p>

<ol>
<li>sed -i ‘/Root/s/no/yes/’ /etc/ssh/sshd_config   sed在这个文里Root的一行，匹配Root一行，将no替换成yes.
7.1.如何杀掉mysql进程：
ps aux |grep mysql |grep -v grep  |awk ‘{print $2}’ |xargs kill -9 (从中了解到awk的用途)</li>
</ol>


<p>killall -TERM mysqld</p>

<p>kill -9 <code>cat /usr/local/apache2/logs/httpd.pid</code>   试试查杀进程PID</p>

<p>8.显示运行3级别开启的服务:
ls /etc/rc3.d/S* |cut -c 15-   (从中了解到cut的用途，截取数据)</p>

<p>9.如何在编写SHELL显示多个信息，用EOF
cat &lt;&lt; EOF
+————————————————————–+
|       === Welcome to Tunoff services ===                |
+————————————————————–+
EOF</p>

<ol>
<li><p>for 的巧用(如给mysql建软链接)
cd /usr/local/mysql/bin
for i in *
do ln /usr/local/mysql/bin/$i /usr/bin/$i
done</p></li>
<li><p>取IP地址：
ifconfig eth0 |grep “inet addr:” |awk ‘{print $2}’|cut -c 6-   或者</p></li>
</ol>


<p>ifconfig   | grep ‘inet addr:’| grep -v ’127.0.0.1′ | cut -d: -f2 | awk ‘{ print $1}’</p>

<p>12.内存的大小:
free -m |grep “Mem” | awk ‘{print $2}’</p>

<ol>
<li><p>netstat -an -t | grep “:80″ | grep ESTABLISHED | awk ‘{printf “%s %s\n”,$5,$6}’ | sort</p></li>
</ol>


<p>14.查看Apache的并发请求数及其TCP连接状态：
netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</p>

<p>15.因为同事要统计一下服务器下面所有的jpg的文件的大小,写了个shell给他来统计.原来用xargs实现,但他一次处理一部分,搞的有多个总和….,下面的命令就能解决啦.
find / -name *.jpg -exec wc -c {} \;|awk ‘{print $1}’|awk ‘{a+=$1}END{print a}’</p>

<p>CPU的数量（多核算多个CPU，cat /proc/cpuinfo |grep -c processor）越多，系统负载越低，每秒能处理的请求数也越多。</p>

<p>—————————————————————————————
16   CPU负载   # cat /proc/loadavg
检查前三个输出值是否超过了系统逻辑CPU的4倍。</p>

<p>18   CPU负载   #mpstat 1 1
检查%idle是否过低(比如小于5%)</p>

<p>19   内存空间   # free
检查free值是否过低   也可以用 # cat /proc/meminfo</p>

<p>20   swap空间   # free
检查swap used值是否过高   如果swap used值过高，进一步检查swap动作是否频繁：</p>

<h1>vmstat 1 5</h1>

<p>观察si和so值是否较大</p>

<p>21   磁盘空间   # df -h
检查是否有分区使用率(Use%)过高(比如超过90%)   如发现某个分区空间接近用尽，可以进入该分区的挂载点，用以下命令找出占用空间最多的文件或目录：</p>

<h1>du -cks * | sort -rn | head -n 10</h1>

<p>22   磁盘I/O负载   # iostat -x 1 2
检查I/O使用率(%util)是否超过100%</p>

<p>23   网络负载   # sar -n DEV
检查网络流量(rxbyt/s, txbyt/s)是否过高</p>

<p>24   网络错误   # netstat -i
检查是否有网络错误(drop fifo colls carrier)   也可以用命令：# cat /proc/net/dev</p>

<p>25 网络连接数目   # netstat -an | grep -E “<sup>tcp</sup>” | cut -c 68- | sort | uniq -c | sort -n</p>

<p>26   进程总数   # ps aux | wc -l
检查进程个数是否正常 (比如超过250)</p>

<p>27   可运行进程数目   # vmwtat 1 5
列给出的是可运行进程的数目，检查其是否超过系统逻辑CPU的4倍</p>

<p>28   进程   # top -id 1
观察是否有异常进程出现</p>

<p>29   网络状态   检查DNS, 网关等是否可以正常连通</p>

<p>30   用户   # who | wc -l
检查登录用户是否过多 (比如超过50个)   也可以用命令：# uptime</p>

<p>31   系统日志   # cat /var/log/rflogview/*errors
检查是否有异常错误记录   也可以搜寻一些异常关键字，例如：</p>

<h1>grep -i error /var/log/messages</h1>

<h1>grep -i fail /var/log/messages</h1>

<p>32   核心日志   # dmesg
检查是否有异常错误记录</p>

<p>33   系统时间   # date
检查系统时间是否正确</p>

<p>34   打开文件数目   # lsof | wc -l
检查打开文件总数是否过多</p>

<p>35   日志   # logwatch –print   配置/etc/log.d/logwatch.conf，将 Mailto 设置为自己的email 地址，启动mail服务 (sendmail或者postfix)，这样就可以每天收到日志报告了。
缺省logwatch只报告昨天的日志，可以用# logwatch –print –range all 获得所有的日志分析结果。
可以用# logwatch –print –detail high 获得更具体的日志分析结果(而不仅仅是出错日志)。</p>

<p>36.杀掉80端口相关的进程
lsof -i :80|grep -v “PID”|awk ‘{print “kill -9″,$2}’|sh</p>

<p>37.清除僵死进程。
ps -eal | awk ‘{ if ($2 == “Z”) {print $4}}’ | kill -9</p>

<p>38.tcpdump 抓包 ，用来防止80端口被人攻击时可以分析数据</p>

<h1>tcpdump -c 10000 -i eth0 -n dst port 80 > /root/pkts</h1>

<p>39.然后检查IP的重复数 并从小到大排序 注意 “-t\ +0″   中间是两个空格</p>

<h1>less pkts | awk {‘printf $3″\n”‘} | cut -d. -f 1-4 | sort | uniq -c | awk {‘printf $1″ “$2″\n”‘} | sort -n -t\ +0</h1>

<p>40.查看有多少个活动的php-cgi进程
netstat -anp | grep php-cgi | grep ^tcp | wc -l</p>

<p>chkconfig –list | awk ‘{if ($5==”3:on”) print $1}’</p>

<p>41.kudzu查看网卡型号
kudzu –probe –class=network</p>

<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]
评注：匹配中文还真是个头疼的事，有了这个表达式就好办了</p>

<p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]
评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p>

<p>匹配空白行的正则表达式：\n\s*\r
评注：可以用来删除空白行</p>

<p>匹配HTML标记的正则表达式：&lt;(\S<em>?)[^>]</em>>.<em>?&lt;/\1>|&lt;.</em>? />
评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p>

<p>匹配首尾空白字符的正则表达式：^\s<em>|\s</em>$
评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p>

<p>匹配Email地址的正则表达式：\w+([&ndash;+.]\w+)<em>@\w+([&ndash;.]\w+)</em>.\w+([&ndash;.]\w+)*
评注：表单验证时很实用</p>

<p>匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*
评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p>

<p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
评注：表单验证时很实用</p>

<p>匹配国内电话号码：\d{3}&ndash;\d{8}|\d{4}&ndash;\d{7}
评注：匹配形式如 0511-4405222 或 021-87888822</p>

<p>匹配腾讯QQ号：[1-9][0-9]{4,}
评注：腾讯QQ号从10000开始</p>

<p>匹配中国邮政编码：[1-9]\d{5}(?!\d)
评注：中国邮政编码为6位数字</p>

<p>匹配身份证：\d{15}|\d{18}
评注：中国的身份证为15位或18位</p>

<p>匹配ip地址：\d+.\d+.\d+.\d+</p>

<p>评注：提取ip地址时有用</p>

<p>匹配特定数字：
^[1-9]\d<em>$　 　 //匹配正整数
^&ndash;[1-9]\d</em>$ 　 //匹配负整数
^&ndash;?[1-9]\d<em>$　　 //匹配整数
^[1-9]\d</em>|0$　 //匹配非负整数（正整数 + 0）
^&ndash;[1-9]\d<em>|0$　　 //匹配非正整数（负整数 + 0）
^[1-9]\d</em>.\d<em>|0.\d</em>[1-9]\d<em>$　　 //匹配正浮点数
^&ndash;([1-9]\d</em>.\d<em>|0.\d</em>[1-9]\d<em>)$　 //匹配负浮点数
^&ndash;?([1-9]\d</em>.\d<em>|0.\d</em>[1-9]\d<em>|0?.0+|0)$　 //匹配浮点数
^[1-9]\d</em>.\d<em>|0.\d</em>[1-9]\d<em>|0?.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）
^(&ndash;([1-9]\d</em>.\d<em>|0.\d</em>[1-9]\d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）
评注：处理大量数据时有用，具体应用时注意修正</p>

<p>匹配特定字符串：
^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串
^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串
^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串
^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串
^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串
评注：最基本也是最常用的一些表达式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos启动]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/centosqi-dong/"/>
    <updated>2013-05-19T10:40:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/centosqi-dong</id>
    <content type="html"><![CDATA[<p>启动流程概览</p>

<pre><code>在硬件驱动成功后，Kernel 会主动呼叫 init 程序，而 init 会取得 run-level 资讯；
init 运行 /etc/rc.d/rc.sysinit 文件来准备软件运行的作业环境 (如网络、时区等)；
init 运行 run-level 的各个服务之启动 (script 方式)；
init 运行 /etc/rc.d/rc.local 文件；
init 运行终端机模拟程序 mingetty 来启动 login 程序，最后就等待使用者登陆啦；
</code></pre>

<p> init,/etc/inittab,runlevel介绍</p>

<p>在核心加载完毕、进行完硬件侦测与驱动程序加载后，此时你的主机硬件应该已经准备就绪了 (ready) ， 此时核心会主动的呼叫第一支程序，那就是 /sbin/init 罗。 init 的 PID 号码是一号啦。 /sbin/init 最主要的功能就是准备软件运行的环境，包括系统的主机名称、网络配置、语系处理、文件系统格式及其他服务的启动等。 而所有的动作都会透过 init 的配置档，亦即是 /etc/inittab 来规划，而 inittab 内还有一个很重要的配置项目，那就是默认的 runlevel (启动运行等级) 啦！
Run level：运行等级有哪些？</p>

<p>那么什么是 run level 呢？他有什么功用啊？其实很简单啦， Linux 就是藉由配置 run level 来规定系统使用不同的服务来启动，让 Linux 的使用环境不同。基本上，依据有无网络与有无 X Window 而将 run level 分为 7 个等级，分别是：</p>

<pre><code>0 – halt (系统直接关机)
1 – single user mode (单人维护模式，用在系统出问题时的维护)
2 – Multi-user, without NFS (类似底下的 runlevel 3，但无 NFS 服务)
3 – Full multi-user mode (完整含有网络功能的纯文字模式)
4 – unused (系统保留功能)
5 – X11 (与 runlevel 3 类似，但加载使用 X Window)
6 – reboot (重新启动)
</code></pre>

<p>由於 run level 0, 4, 6 不是关机、重新启动就是系统保留的，所以：『 您当然不能将默认的 run level 配置为这三个值 』， 否则系统就会不断的自动关机或自动重新启动…. 好了，那么我们启动时，到底是如何取得系统的 run level 的？当然是 /etc/inittab 所配置的罗！ 那么 /etc/inittab 到底有什么资讯呢？我们先来看看这个文件的内容好了：
/etc/inittab 的内容与语法
复制代码</p>

<p>[root@www ~]# vim /etc/inittab
id:5:initdefault:                 &lt;==默认的 runlevel 配置, 此 runlevel 为 5</p>

<p>si::sysinit:/etc/rc.d/rc.sysinit  &lt;==准备系统软件运行的环境的脚本运行档</p>

<p>l0:0:wait:/etc/rc.d/rc 0    &lt;==runlevel 0 在 /etc/rc.d/rc0.d/
l1:1:wait:/etc/rc.d/rc 1    &lt;==runlevel 1 在 /etc/rc.d/rc1.d/
l2:2:wait:/etc/rc.d/rc 2    &lt;==runlevel 2 在 /etc/rc.d/rc2.d/
l3:3:wait:/etc/rc.d/rc 3    &lt;==runlevel 3 在 /etc/rc.d/rc3.d/
l4:4:wait:/etc/rc.d/rc 4    &lt;==runlevel 4 在 /etc/rc.d/rc4.d/
l5:5:wait:/etc/rc.d/rc 5    &lt;==runlevel 5 在 /etc/rc.d/rc5.d/
l6:6:wait:/etc/rc.d/rc 6    &lt;==runlevel 6 在 /etc/rc.d/rc6.d/</p>

<p>ca::ctrlaltdel:/sbin/shutdown -t3 -r now</p>

<p>pf::powerfail:/sbin/shutdown -f -h +2 &ldquo;Power Failure; System Shutting Down&rdquo;
pr:12345:powerokwait:/sbin/shutdown -c &ldquo;Power Restored; Shutdown Cancelled&rdquo;</p>

<p>1:2345:respawn:/sbin/mingetty tty1  &lt;==其实 tty1~tty6 是由底下这六行决定的。
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6</p>

<p>x:5:respawn:/etc/X11/prefdm -nodaemon &lt;==X window 则是这行决定的！</p>

<p>复制代码</p>

<p>让我们解析一下这个文件吧！首先，这个文件的语法是利用冒号 (:) 将配置分隔成为四个栏位，每个栏位的意义与说明如下：</p>

<pre><code>配置项目：最多四个字节，代表 init 的主要工作项目，只是一个简单的代表说明。
run level：该项目在哪些 run level 底下进行的意思。如果是 35 则代表 runlevel 3 与 5 都会运行。
init 的动作项目：主要可以进行的动作项目意义有：
inittab 配置值   意义说明
initdefault     代表默认的 run level 配置值
sysinit     代表系统初始化的动作项目
ctrlaltdel  代表 [ctrl]+[alt]+[del] 三个按键是否可以重新启动的配置
wait    代表后面栏位配置的命令项目必须要运行完毕才能继续底下其他的动作
respawn     代表后面栏位的命令可以无限制的再生 (重新启动)。举例来说， tty1 的 mingetty 产生的可登陆画面， 在你注销而结束后，系统会再开一个新的可登陆画面等待下一个登陆。

更多的配置项目请参考 man inittab 的说明。
命令项目：亦即应该可以进行的命令，通常是一些 script 罗。
</code></pre>

<p>init 的处理流程</p>

<p>事实上 /etc/inittab 的配置也有点类似 shell script 啦，因为该文件内容的配置也是一行一行的从上往下处理的， 因此我们可以知道 CentOS 的 init 依据 inittab 配置的处理流程会是：</p>

<pre><code>先取得 runlevel 亦即默认运行等级的相关等级 (以鸟哥的测试机为例，为 5 号)；
使用 /etc/rc.d/rc.sysinit 进行系统初始化
由於 runlevel 是 5 ，因此只进行『l5:5:wait:/etc/rc.d/rc 5』，其他行则略过
配置好 [ctrl]+[alt]+[del] 这组的组合键功能
配置不断电系统的 pf, pr 两种机制；
启动 mingetty 的六个终端机 (tty1 ~ tty6)
最终以 /etc/X11/perfdm -nodaemon 启动图形介面啦！
</code></pre>

<p>现在你可以知道为啥 [ctrl]+[alt]+[del] 可以重新启动而我们默认提供 6 个虚拟终端机 (tty1~tty6) 给你使用了吧！由於整个配置都是依据 /etc/inittab 来决定的，因此如果你想要修改任何细节的话， 可以这样做喔：</p>

<pre><code>如果不想让使用者利用 [crtl]+[alt]+[del] 来重新启动系统，可以将『 ca::ctrlaltdel:/sbin/shutdown -t3 -r now 』加上注解 (#) 来取消该配置
规定启动的默认 run level 是纯文字的 3 号或者是具有图形介面的 5 号 ，可经由 『 id:5:initdefault: 』那个数字来决定！ 以鸟哥自己这个文件为例，我是使用默认的图形介面。如果你想要关闭图形介面的话，将该行 5 改成 3 即可。
如果不想要启动六个终端机 (tty1~tty6)，那么可以将『 6:2345:respawn:/sbin/mingetty tty6』关闭数个。但务必至少启动一个喔！
</code></pre>

<p>所以说，你现在会自行修改登陆时的默认 run level 配置值了吗？够简单的吧？ 一般来说，我们默认都是 3 或者是 5 来作为默认的 run level 的。但有时后可能需要进入 run level 1， 也就是单人维护模式的环境当中。这个 run level 1 有点像是 Windows 系统当中的『安全模式』啦， 专门用来处理当系统有问题时的操作环境。此外，当系统发现有问题时，举例来说，不正常关机造成 filesystem 的不一致现象时，系统会主动的进入单人维护模式呢！</p>

<p>好了， init 在取得 run level 之后，接下来要干嘛？ 上面 /etc/inittab 文件内容不是有提到 sysinit 吗？准备初始化系统了吧！</p>

<p>init 处理系统初始化流程 (/etc/rc.d/rc.sysinit)</p>

<p>还记得上面提到 /etc/inittab 里头有这一句『 si::sysinit:/etc/rc.d/rc.sysinit 』吧？ 这表示：『我开始加载各项系统服务之前，得先做好整个系统环境，我主要利用 /etc/rc.d/rc.sysinit 这个 shell script 来配置好我的系统环境的。』够清楚了吧？ 所以，我想要知道到底 CentOS 启动的过程当中帮我进行了什么动作，就得要仔细的分析 /etc/rc.d/rc.sysinit 罗。</p>

<p>如果你使用 vim 去查阅过 /etc/rc.d/rc.sysinit 的话，那么可以发现他主要的工作大抵有这几项：</p>

<pre><code>取得网络环境与主机类型：
读取网络配置档 /etc/sysconfig/network ，取得主机名称与默认通讯闸 (gateway) 等网络环境。
测试与挂载内存装置 /proc 及 U盘 装置 /sys：
除挂载内存装置 /proc 之外，还会主动侦测系统上是否具有 usb 的装置， 若有则会主动加载 usb 的驱动程序，并且尝试挂载 usb 的文件系统。
决定是否启动 SELinux ：
SELinux 在此时进行一些检测， 并且检测是否需要帮所有的文件重新编写标准的 SELinux 类型 (auto relabel)。
启动系统的乱数产生器
乱数产生器可以帮助系统进行一些口令加密演算的功能，在此需要启动两次乱数产生器。
配置终端机 (console) 字形：
配置显示於启动过程中的欢迎画面 (text banner)；
配置系统时间 (clock) 与时区配置：需读入 /etc/sysconfig/clock 配置值
周边设备的侦测与 Plug and Play (PnP) 参数的测试：
根据核心在启动时侦测的结果 (/proc/sys/kernel/modprobe ) 开始进行 ide / scsi / 网络 / 音效 等周边设备的侦测，以及利用以加载的核心模块进行 PnP 装置的参数测试。
使用者自订模块的加载
使用者可以在 /etc/sysconfig/modules/*.modules 加入自订的模块，则此时会被加载到系统当中
加载核心的相关配置：
系统会主动去读取 /etc/sysctl.conf 这个文件的配置值，使核心功能成为我们想要的样子。
配置主机名称与初始化电源管理模块 (ACPI)
初始化软件磁盘阵列：主要是透过 /etc/mdadm.conf 来配置好的。
初始化 LVM 的文件系统功能
以 fsck 检验磁碟文件系统：会进行 filesystem check
进行磁碟配额 quota 的转换 (非必要)：
重新以可读写模式挂载系统磁碟：
启动 quota 功能：所以我们不需要自订 quotaon 的动作
启动系统虚拟乱数产生器 (pseudo-random)：
清除启动过程当中的缓存文件：
将启动相关资讯加载 /var/log/dmesg 文件中。
</code></pre>

<p>在 /etc/rc.d/rc.sysinit 将基本的系统配置数据都写好了，也将系统的数据配置完整！ 而如果你想要知道到底启动的过程中发生了什么事情呢？那么就运行『 dmesg 』吧。 另外，基本上，在这个文件当中所进行的很多工作的默认配置档，其实都在 /etc/sysconfig/ 当中呢！ 所以，请记得将 /etc/sysconfig/ 内的文件好好的瞧一瞧喔！ ^_^</p>

<p>在这个过程当中，比较值得注意的是自订模块的加载！在 CentOS 当中，如果我们想要加载核心模块的话， 可以将整个模块写入到 /etc/sysconfig/modules/*.modules 当中，在该目录下， 只要记得档名最后是以 .modules 结尾即可。 这个过程是非必要的，因为我们目前的默认模块实在已经很够用了，除非是您的主机硬件实在太新了， 非要自己加载新的模块不可，否则，在经过 /etc/rc.d/rc.sysinit 的处理后， 你的主机系统应该是已经跑得很顺畅了啦！就等著你将系统相关的服务与网络服务启动罗！</p>

<p>启动系统服务与相关启动配置档 (/etc/rc.d/rc N &amp; /etc/sysconfig)</p>

<p>加载核心让整个系统准备接受命令来工作，再经过 /etc/rc.d/rc.sysinit 的系统模块与相关硬件资讯的初始化后，你的 CentOS 系统应该已经顺利工作了。 只是，我们还得要启动系统所需要的各项『服务』啊！这样主机才能提供我们相关的网络或者是主机功能嘛！ 这个时候，依据我们在 /etc/inittab 里面提到的 run level 配置值，就可以来决定启动的服务项目了。 举例来说，使用 run level 3 当然就不需要启动 X Window 的相关服务罗，您说是吧？</p>

<p>那么各个不同的 run level 服务启动的各个 shell script 放在哪？还记得 /etc/inittab 里面提到的：
复制代码</p>

<p>l0:0:wait:/etc/rc.d/rc 0
l1:1:wait:/etc/rc.d/rc 1
l2:2:wait:/etc/rc.d/rc 2
l3:3:wait:/etc/rc.d/rc 3
l4:4:wait:/etc/rc.d/rc 4
l5:5:wait:/etc/rc.d/rc 5  &lt;==本例中，以此项目来解释
l6:6:wait:/etc/rc.d/rc 6</p>

<p>复制代码</p>

<p>上面提到的就是各个 run level 要运行的各项脚本放置处啦！主要是透过 /etc/rc.d/rc 这个命令来处理相关任务！ 由於鸟哥使用默认的 runlevel 5 ，因此我们主要针对上述特殊字体那行来解释好了： /etc/rc.d/rc 5 的意义是这样的 (建议您自行使用 vim 去观察一下 /etc/rc.d/rc 这个文件，你会更有概念！)：</p>

<pre><code>透过外部第一号参数 ($1) 来取得想要运行的脚本目录。亦即由 /etc/rc.d/rc 5 可以取得 /etc/rc5.d/ 这个目录来准备处理相关的脚本程序；
找到 /etc/rc5.d/K??* 开头的文件，并进行『 /etc/rc5.d/K??* stop 』的动作；
找到 /etc/rc5.d/S??* 开头的文件，并进行『 /etc/rc5.d/S??* start 』的动作；
</code></pre>

<p>透过上面的说明我们可以知道所有的项目都与 /etc/rc5.d/ 有关，那么我们就来瞧瞧这个目录下有些什么玩意儿吧！
复制代码</p>

<p>[root@www ~]# ll /etc/rc5.d/
lrwxrwxrwx 1 root root 16 Sep  4  2008 K02dhcdbd &ndash;> ../init.d/dhcdbd
&hellip;.(中间省略)&hellip;.
lrwxrwxrwx 1 root root 14 Sep  4  2008 K91capi &ndash;> ../init.d/capi
lrwxrwxrwx 1 root root 23 Sep  4  2008 S00microcode_ctl &ndash;> ../init.d/microcode_ctl
lrwxrwxrwx 1 root root 22 Sep  4  2008 S02lvm2-monitor &ndash;> ../init.d/lvm2-monitor
&hellip;.(中间省略)&hellip;.
lrwxrwxrwx 1 root root 17 Sep  4  2008 S10network &ndash;> ../init.d/network
&hellip;.(中间省略)&hellip;.
lrwxrwxrwx 1 root root 11 Sep  4  2008 S99local &ndash;> ../rc.local
lrwxrwxrwx 1 root root 16 Sep  4  2008 S99smartd &ndash;> ../init.d/smartd
&hellip;.(底下省略)&hellip;.</p>

<p>复制代码</p>

<p>在这个目录下的文件很有趣，主要具有几个特点：</p>

<pre><code>档名全部以 Sxx 或 Kxx ，其中 xx 为数字，且这些数字在文件之间是有相关性的！
全部是连结档，连结到 stand alone 服务启动的目录 /etc/init.d/ 去
</code></pre>

<p>服务的启动主要是以『/etc/init.d/服务档名 {start,stop}』 来启动与关闭的，那么透过刚刚 /etc/rc.d/rc 程序的解说，我们可以清楚的了解到了 /etc/rc5.d/[SK]xx 其实就是跑到 /etc/init.d/ 去找到相对应的服务脚本， 然后分别进行 start (Sxx) 或 stop (Kxx) 的动作而已啦！举例来说，以上述的表格内的 K91capi 及 S10network 为例好了， 透过 /etc/rc.d/rc 5 的运行，这两个文件会这样进行：</p>

<pre><code>/etc/rc5.d/K91capi stop –&gt; /etc/init.d/capi stop
/etc/rc5.d/S10network start –&gt; /etc/init.d/network start
</code></pre>

<p>所以说，你有想要启动该 runlevel 时就运行的服务，那么利用 Sxx 并指向 /etc/init.d/ 的特定服务启动脚本后， 该服务就能够在启动时启动啦！就这么简单！问题是，你需要自行处理这个 K, S 开头的连结档吗？ 并不需要的，chkconfig 就是在负责处理这个连结档啦！这样有没有跟第十八章的观念串在一起了呢？ ^_^</p>

<p>那么为什么 K 与 S 后面要有数字呢？因为各不同的服务其实还是互有关系的。举例来说，如果要启动 WWW 服务，总是得要有网络吧？所以 /etc/init.d/network 就会比较先被启动啦！那么您就会知道在 S 或者是 K 后面接的数字是啥意思了吧？嘿嘿，那就是运行的顺序啦！那么哪个文件被最后运行呢？ 看到最后一个被运行的项目是啥？没错，就是 S99local ，亦即是：/etc/rc.d/rc.local 这个文件啦！</p>

<p>使用者自订启动启动程序 (/etc/rc.d/rc.local)</p>

<p>在完成默认 runlevel 指定的各项服务的启动后，如果我还有其他的动作想要完成时，举例来说， 我还想要寄一封 mail 给某个系统管理帐号，通知他，系统刚刚重新启动完毕，那么是否应该要制作一个 shell script 放置在 /etc/init.d/ 里面，然后再以连结方式连结到 /etc/rc5.d/ 里面呢？呵呵！当然不需要！还记得上一小节提到的 /etc/rc.d/rc.local 吧？ 这个文件就可以运行您自己想要运行的系统命令了。</p>

<p>也就是说，我有任何想要在启动时就进行的工作时，直接将他写入 /etc/rc.d/rc.local ， 那么该工作就会在启动的时候自动被加载喔！而不必等我们登陆系统去启动呢！ 是否很方便啊！一般来说，鸟哥就很喜欢把自己制作的 shell script 完整档名写入 /etc/rc.d/rc.local ，如此一来，启动就会将我的 shell script 运行过，真是好棒那！</p>

<p>根据 /etc/inittab 之配置，加载终端机或 X-Window 介面</p>

<p>在完成了系统所有服务的启动后，接下来 Linux 就会启动终端机或者是 X Window 来等待使用者登陆啦！ 实际参考的项目是 /etc/inittab 内的这一段：
复制代码</p>

<p>1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6
x:5:respawn:/etc/X11/prefdm -nodaemon</p>

<p>复制代码</p>

<p>这一段代表，在 run level 2, 3, 4, 5 时，都会运行 /sbin/mingetty 这个咚咚， 而且运行六个，这也是为何我们 Linux 会提供『六个纯文字终端机』的配置所在啊！ 因为 mingetty 就是在启动终端机的命令说。</p>

<p>要注意的是那个 respawn 的 init 动作项目，他代表『当后面的命令被终止 (terminal) 时， init 会主动的重新启动该项目。』这也是为何我们登陆 tty1 终端机介面后，以 exit 离开后， 系统还是会重新显示等待使用者输入的画面的原因啊！</p>

<p>如果改天您不想要有六个终端机时，可以取消某些终端机介面吗？当然可以啊！ 就将上面表格当中的某些项目注解掉即可！例如不想要 tty5 与 tty6 ，就将那两行注解， 则下次重新启动后，您的 Linux 就只剩下『 F1 ~ F4 』有效而已，这样说，可以了解吧！！^_^</p>

<p>至於如果我们使用的是 run level 5 呢？那么除了这六个终端机之外， init 还会运行 /etc/X11/prefdm -nodaemon 那个命令喔！ 他主要的功能就是在启动 X Window 啦！</p>

<p>启动过程会用到的主要配置档</p>

<p>我们在 /sbin/init 的运行过程中有谈到许多运行脚本，包括 /etc/rc.d/rc.sysinit 以及 /etc/rc.d/rc 等等， 其实这些脚本都会使用到相当多的系统配置档，这些启动过程会用到的配置档则大多放置在 /etc/sysconfig/ 目录下。 同时，由於核心还是需要加载一些驱动程序 (核心模块)，此时系统自订的装置与模块对应档 (/etc/modprobe.conf) 就显的挺重要了喔！
关於模块： /etc/modprobe.conf</p>

<p>/etc/rc.d/rc.sysinit 当中的加载使用者自订模块的地方吗？就是在 /etc/sysconfig/modules/ 目录下啊！ 虽然核心提供的默认模块已经很足够我们使用了，但是，某些条件下我们还是得对模块进行一些参数的规划， 此时就得要使用到 /etc/modprobe.conf 罗！举例来说，鸟哥的 CentOS 主机的 modprobe.conf 有点像这样：</p>

<p>[root@www ~]# cat /etc/modprobe.conf
alias eth0 8139too               &lt;==让 eth0 使用 8139too 的模块
alias scsi_hostadapter pata_sis
alias snd-card-0 snd-trident
options snd-card-0 index=0       &lt;==额外指定 snd-card-0 的参数功能
options snd-trident index=0</p>

<p>以上表的第一行为例，鸟哥使用螃蟹卡 (Realtek 的芯片组) 来作为我的网络卡，那螃蟹卡使用的模块就是 8139too 啦！这样看的懂了吧？当我要启动网络卡时，系统会跑到这个文件来查阅一下，然后加载 8139too 驱动程序来驱动网络卡罗！更多的相关说明，请 man modprobe.conf 喔！这个文件大多在指定系统内的硬件所使用的模块啦！这个文件通常系统是可以自行产生的，所以你不必手动去订正他！ 不过，如果系统捉到错误的驱动程序，或者是你想要使用升级的驱动程序来对应相关的硬件配备时， 你就得要自行手动的处理一下这个文件了。
 /etc/sysconfig/*</p>

<p>不说您也知道，整个启动的过程当中，老是读取的一些服务的相关配置档都是记录在 /etc/sysconfig 目录下的！那么该目录底下有些啥玩意儿？我们找几个重要的文件来谈谈：</p>

<pre><code>authconfig：
这个文件主要在规范使用者的身份认证的机 制，包括是否使用本机的 /etc/passwd, /etc/shadow 等， 以及 /etc/shadow 口令记录使用何种加密演算法，还有是否使用外部口令服务器提供的帐号验证 (NIS, LDAP) 等。 系统默认使用 MD5 加密演算法，并且不使用外部的身份验证机制；
clock：
此文件在配置 Linux 主机的时区，可以使用格林威治时间(GMT)，也可以使用台湾的本地时间 (local)。基本上，在 clock 文件内的配置项目『 ZONE 』所参考的时区位於 /usr/share/zoneinfo 目录下的相对路径中。而且要修改时区的话，还得将 /usr/share/zoneinfo/Asia/Taipei 这个文件复制成为 /etc/localtime 才行！
i18n：
i18n 在配置一些语系的使用方面，例如最麻烦的文字介面下的日期显示问题！ 如果你是以中文安装的，那么默认语系会被选择 zh_TW.UTF8 ，所以在纯文字介面之下， 你的文件日期显示可能就会呈现乱码！这个时候就需要更改一下这里啦！更动这个 i18n 的文件，将里面的 LC_TIME 改成 en 即可！
keyboard &amp; mouse：
keyboard 与 mouse 就是在配置键盘与鼠标的形式；
network：
network 可以配置是否要启动网络，以及配置主机名称还有通讯闸 (GATEWAY) 这两个重要资讯呢！
network-scripts/：
至於 network-scripts 里面的文件，则是主要用在配置网络卡～
</code></pre>

<p>总而言之一句话，这个目录下的文件很重要的啦！启动过程里面常常会读取到的！</p>

<p>Run level 的切换</p>

<p>在我们完成上面的所有资讯后，其实整个 Linux 主机就已经在等待我们使用者的登陆啦！ 但是，相信您应该还是会有一点疑问的地方，那就是：『我该如何切换 run level 呢？』会不会很难啊？不会啦！很简单～但是依据运行的时间而有不同的方式啊！</p>

<p>事实上，与 run level 有关的启动其实是在 /etc/rc.d/rc.sysinit 运行完毕之后。也就是说，其实 run level 的不同仅是 /etc/rc[0-6].d 里面启动的服务不同而已。不过，依据启动是否自动进入不同 run level 的配置，我们可以说：</p>

<pre><code>要每次启动都运行某个默认的 run level ，则需要修改 /etc/inittab 内的配置项目， 亦即是『 id:5:initdefault: 』里头的数字啊；
如果仅只是暂时变更系统的 run level 时，则使用 init [0-6] 来进行 run level 的变更。 但下次重新启动时，依旧会是以 /etc/inittab 的配置为准。
</code></pre>

<p>假设原本我们是以 run level 5 登陆系统的，但是因为某些因素，想要切换成为 run level 3 时， 该怎么办呢？很简单啊，运行『 init 3 』即可切换。但是 init 3 这个动作到底做了什么呢？ 我们不是说了吗？事实上，不同的 run level 只是加载的服务不同罢了， 亦即是 /etc/rc5.d/ 还有 /etc/rc3.d 内的 Sxxname 与 Kxxname 有差异而已。 所以说，当运行 init 3 时，系统会：</p>

<pre><code>先比对 /etc/rc3.d/ 及 /etc/rc5.d 内的 K 与 S 开头的文件；
在新的 runlevel 亦即是 /etc/rc3.d/ 内有多的 K 开头文件，则予以关闭；
在新的 runlevel 亦即是 /etc/rc3.d/ 内有多的 S 开头文件，则予以启动；
</code></pre>

<p>也就是说，两个 run level 都存在的服务就不会被关闭啦！如此一来，就很容易切换 run level 了， 而且还不需要重新启动呢！真方便。那我怎么知道目前的 run level 是多少呢？ 直接在 bash 当中输入 runlevel 即可啊！
复制代码</p>

<p>[root@www ~]# runlevel
N 5</p>

<h1>左边代表前一个 runlevel ，右边代表目前的 runlevel。</h1>

<h1>由於之前并没有切换过 runlevel ，因此前一个 runlevel 不存在 (N)</h1>

<h1>将目前的 runlevel 切换成为 3 (注意， tty7 的数据会消失！)</h1>

<p>[root@www ~]# init 3
NIT: Sending processes the TERM signal
Applying Intel CPU microcode update:        [  OK  ]
Starting background readahead:              [  OK  ]
Starting irqbalance:                        [  OK  ]
Starting httpd:                             [  OK  ]
Starting anacron:                           [  OK  ]</p>

<h1>这代表，新的 runlevel 亦即是 runlevel3 比前一个 runlevel 多出了上述 5 个服务</h1>

<p>[root@www ~]# runlevel
5 3</p>

<h1>看吧！前一个是 runlevel 5 ，目前的是 runlevel 3 啦！</h1>

<p>复制代码</p>

<p>那么你能不能利用 init 来进行关机与重新启动呢？可以的啦！利用『 init 0 』就能够关机， 而『 init 6 』就能够重新启动！为什么？往前翻一下 runlevel 的定义即可了解吧！</p>

<p>转自 <a href="http://vbird.dic.ksu.edu.tw/linux_basic/0510osloader_1.php#startup_init">http://vbird.dic.ksu.edu.tw/linux_basic/0510osloader_1.php#startup_init</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/shell/"/>
    <updated>2013-05-19T10:38:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/shell</id>
    <content type="html"><![CDATA[<p>很多人误以为shell脚本只能在命令行下使用。其实shell也可以调用一些GUI组件， 例如菜单，警告框，进度条等等。你可以控制最终的输出，光标位置还有各种输出效果。下面我将介绍一些工具，帮助你创建强大的，互动的，用户友好的 Unix/Linux shell脚本。我在FreeBSD和Linux下测试过这些工具，不过其他UNIX系列的操作系统应该都支持的。</p>

<ol>
<li>notify-send 命令</li>
</ol>


<p>这个命令可以让你通过通知进程发送一个桌面通知给用户。这可以用来向用户发送提示，或者显示一些信息而不用打断用户工作。你需要安装如下软件包：
PHP代码</p>

<pre><code>$ sudo apt-get install libnotify-bin
</code></pre>

<p>下面这个例子展示了如何从命令行向桌面发送一个简单的消息：
PHP代码</p>

<pre><code>notify-send “rsnapshot done \”static/image/smiley/default/smile.gif\”" smilieid=”\”1\”" alt=”\”\”" border=”\”0\”"&gt;”
</code></pre>

<p>输出：</p>

<p>下面是一个复杂一点的例子：
PHP代码</p>

<pre><code>….
alert=18000
live=$(lynx –dump http://money.rediff.com/ | grep ‘BSE LIVE’ | awk ‘{ print $5}’ | sed ‘s/,//g;s/\.[0-9]*//g’)
[ $notify_counter -eq 0 ] &amp;&amp; [ $live -ge $alert ] &amp;&amp; { notify-send -t 5000 -u low -i  ”BSE Sensex touched 18k”;  notify_counter=1; }
…
</code></pre>

<p>输出：</p>

<p>这里的参数解释如下：</p>

<pre><code>-t 5000：指定超时的时间，毫秒
-u low：设置是否紧急
-i gtk-dialog-info：通知图标，你可以指定图标 -i /path/to/your-icon.png
</code></pre>

<ol>
<li>tput 命令</li>
</ol>


<p>这个命令是用来设置终端特性的：</p>

<pre><code>  移动光标
  获得终端信息
  设置前景和背景色
  设置粗体模式
  设置反模式等等
</code></pre>

<p>举例：
PHP代码</p>

<pre><code>#!/bin/bash
# clear the screen
tput clear
# Move cursor to screen location X,Y (top left is 0,0)
tput cup 3 15
# Set a foreground colour using ANSI escape
tput setaf 3
echo “XYX Corp LTD.”
tput sgr0
tput cup 5 17
# Set reverse video mode
tput rev
echo “M A I N – M E N U”
tput sgr0
tput cup 7 15
echo “1. User Management”
tput cup 8 15
echo “2. Service Management”
tput cup 9 15
echo “3. Process Management”
tput cup 10 15
echo “4. Backup”
# Set bold mode
tput bold
tput cup 12 15
read -p “Enter your choice [1-4] ” choice
tput clear
tput sgr0
tput rc
</code></pre>

<p>输出：</p>

<ol>
<li>setleds 命令</li>
</ol>


<p>这个命令可以让你控制键盘灯，例如打开数字键盘灯：</p>

<p>PHP代码</p>

<pre><code>setleds -D +num
</code></pre>

<p>关闭数字键盘灯：</p>

<p>PHP代码</p>

<pre><code>setleds -D -num

  -caps: 清除大写灯
  +caps：打开大写灯
  -scroll：清除滚动锁
  +scroll：打开滚动锁
</code></pre>

<ol>
<li>zenity 命令</li>
</ol>


<p>这个命令可以显示GTK+的对话框，然后返回用户的输入。你可以用这个命令在脚本中显示信息，并要求用户输入信息。下面这段代码就是域名的whois查询：
PHP代码</p>

<pre><code>#!/bin/bash
# Get domain name
_zenity=”/usr/bin/zenity”
_out=”/tmp/whois.output.[    DISCUZ_CODE_4    ]quot;
domain=$(${_zenity} –title  ”Enter domain” \
      –entry –text “Enter the domain you would like to see whois info” )
if [ $? -eq 0 ]
then
  # Display a progress dialog while searching whois database
  whois $domain  | tee &gt;(${_zenity} –width=200 –height=100 \
        –title=”whois” –progress \
        –pulsate –text=”Searching domain info…” \
            –auto-kill –auto-close \
            –percentage=10) &gt;${_out}
  # Display back output
  ${_zenity} –width=800 –height=600  \
    –title “Whois info for $domain” \
    –text-info –filename=”${_out}”
else
  ${_zenity} –error \
    –text=”No input provided”
fi
</code></pre>

<p>输出：</p>

<ol>
<li>kdialog 命令</li>
</ol>


<p>这个命令和zenity很想，只不过它是为KDE/QT应用准备的。使用方法如下：
PHP代码</p>

<pre><code>kdialog –dontagain myscript:nofilemsg –msgbox “File: ‘~/.backup/config’ not found.”
</code></pre>

<p>输出</p>

<ol>
<li>Dialog</li>
</ol>


<p>这个命令可以在shell脚本中显示文本组件。它使用了curses和ncurses类库。示例代码：
PHP代码</p>

<pre><code>&gt;#!/bin/bash
dialog –title “Delete file” \
–backtitle “Linux Shell Script Tutorial Example” \
–yesno “Are you sure you want to permanently delete \”/tmp/foo.txt\”?” 7 60
# Get exit status
# 0 means user hit [yes] button.
# 1 means user hit [no] button.
# 255 means user hit [Esc] key.
response=$?
case $response in
  0) echo “File deleted.”;;
  1) echo “File not deleted.”;;
  255) echo “[ESC] key pressed.”;;
esac
</code></pre>

<ol>
<li>logger 命令</li>
</ol>


<p>这个命令可以让你写入系统日志例如 /var/log/messages：
PHP代码</p>

<pre><code>logger “MySQL database backup failed.”
tail -f /var/log/messages
logger -t mysqld -p daemon.error “Database Server failed”
tail -f /var/log/syslog
</code></pre>

<p>输出：
Apr 20 00:11:45 vivek-desktop kernel: [38600.515354] CPU0: Temperature/speed normal</p>

<p>Apr 20 00:12:20 vivek-desktop mysqld: Database Server failed</p>

<ol>
<li>setterm 命令</li>
</ol>


<p>这个命令可以设置中断的属性。下面的例子是强制屏幕全黑15分钟，并且60分钟后把显示器设为待机状态：
PHP代码</p>

<pre><code>setterm -blank 15 -powersave powerdown -powerdown 60
</code></pre>

<p>下面这段命令可以在中断显示加下划线的文字：
PHP代码</p>

<pre><code>setterm -underline on;
echo “Add Your Important Message Here”
setterm -underline off
</code></pre>

<p>或者你可以关闭光标：
PHP代码</p>

<pre><code>setterm -cursor off
</code></pre>

<ol>
<li>smbclient：向 MS-Windows 系统发送消息</li>
</ol>


<p>smbclient可以和 SMB/CIFS服务器通信。它可以向MS-Windows系统的指定用户发送消息：
PHP代码</p>

<pre><code>smbclient -M WinXPPro &lt;&lt;EOF
Message 1
Message 2
…
..
EOF
</code></pre>

<p>或者
PHP代码</p>

<pre><code>echo “${Message}” | smbclient -M salesguy2
</code></pre>

<ol>
<li>Bash Socket 编程</li>
</ol>


<p>你可以在bash中开启一个socket链接，并且传输数据。Bash有两个特殊的设备文件：</p>

<pre><code>  /dev/tcp/host/port – 如果hostname，和port是合法的话，bash会尝试开启一个TCP连接。
  /dev/udp/host/port – 如果hostname和port是合法的话，bash会开启一个UDP连接。
</code></pre>

<p>你可以利用这个技术来测试一台主机的端口是否是开启的，而不需要使用nmap或者port扫描器：
PHP代码</p>

<pre><code># find out if TCP port 25 open or not
(echo &gt;/dev/tcp/localhost/25) &amp;&gt;/dev/null &amp;&amp; echo “TCP port 25 open” || echo “TCP port 25 close”
</code></pre>

<p>你可以 使用循环来查找开着的端口：
PHP代码</p>

<pre><code>echo “Scanning TCP ports…”
for p in {1..1023}
do
  (echo &gt;/dev/tcp/localhost/$p) &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo “$p open”
done
</code></pre>

<p>输出：
Scanning TCP ports…</p>

<p>22 open</p>

<p>53 open</p>

<p>80 open</p>

<p>139 open</p>

<p>445 open</p>

<p>631 open</p>

<p>下面的这个例子让你的脚本扮演HTTP客户端：
PHP代码</p>

<pre><code>#!/bin/bash
exec 3&lt;&gt; /dev/tcp/${1:-www.cyberciti.biz}/80
printf “GET / HTTP/1.0\r\n” &gt;&amp;3
printf “Accept: text/html, text/plain\r\n” &gt;&amp;3
printf “Accept-Language: en\r\n” &gt;&amp;3
printf “User-Agent: nixCraft_BashScript v.%s\r\n” “${BASH_VERSION}”  &gt;&amp;3
printf “\r\n” &gt;&amp;3
while read LINE &lt;&amp;3
do
  # do something on $LINE
  # or send $LINE to grep or awk for grabbing data
  # or simply display back data with echo command
  echo $LINE
done
</code></pre>

<p>关于GUITools和Cronjob</p>

<p>如果你使用cronjob来调用你的脚本的话，你要通过“ export DISPLAY=[user&rsquo;s machine]:0”命令来设置本地的 display/input 服务。例如调用 /home/vivek/scripts/monitor.stock.sh脚本，它使用了 zenity 工具：
PHP代码</p>

<pre><code>@hourly DISPLAY=:0.0 /home/vivek/scripts/monitor.stock.sh
</code></pre>

<p>所有的命令你都可以通过“man”来查询详细的使用方式。</p>

<p>文章转载自：<a href="http://www.oschina.net/question/28_39527">http://www.oschina.net/question/28_39527</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网易笔试]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/wang-yi-bi-shi/"/>
    <updated>2013-05-19T10:31:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/wang-yi-bi-shi</id>
    <content type="html"><![CDATA[<p>应该说网易的这个笔试对我来说很简单~有那么几个点可以写出来</p>

<p>mysql 一些基础的应用</p>

<p>linux操作系统</p>

<p>tcp/ip</p>

<p>tcp/ip的三次握手过程~</p>

<p>vim/gcc/gdb的使用</p>

<p>进程线程端口号</p>

<p>文件的权限使用情况</p>

<p>大概就这么几点~总体难度不大的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[企鹅实习生笔试]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/qi-e-shi-xi-sheng-bi-shi/"/>
    <updated>2013-05-19T10:31:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/qi-e-shi-xi-sheng-bi-shi</id>
    <content type="html"><![CDATA[<p>笔试的范围面算是比较广吧～涉及操作系统～数据结构和算法～网络～c/c++~软件工程~唉～还是太弱了～抱着打酱油的心去带回一大瓶酱油～还是得总结总结打有准备的仗~考到线程的并发~插入排序～tcp/ip~操作系统内存分配~~加油了～要有准备要努力啊</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这三天]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/zhe-san-tian/"/>
    <updated>2013-05-19T10:29:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/zhe-san-tian</id>
    <content type="html"><![CDATA[<p>逃了三天课，这三天来~也算是对三年来的验证吧。星期一，浙大玉泉校区参加163.com的笔试（sa反垃圾邮件工程师）,星期二，笔试太累,基本一天在实验室睡觉。今天去了趟滨江。在163.com的c座大厦里就吃了一个他们的小面包和一杯水。╮(╯▽╰)╭，不管结果如何~或许都得到历练了~
星期一，下午两点多，自个火急火燎的赶到浙大，看到玉泉校区才知道什么是读书人的地方，人家的校园，人家的读书氛围，看的像我这种二本掉渣的院校心里不是一般滋味.在里面逛了一圈后终于找到了曹光彪科技楼.晚上的宣讲会赵HR看起来很年轻，讲得很有渲染力。演讲的能力让我打心底里佩服。到场有三百多个人~大部分都是浙大~好不自卑吗~我是坐b1去的玉泉校区~然后我的笔试座位号也B1(神座啊)~八点的考试~主考官最后一个把考卷给我~算是从8:10开始的~我是9:01交的卷子~当时在场的我第三个交卷~自我感觉不错的~就赶着坐公交回下沙了~回到学校的时候已经10:30了~所以没回寝室~在实验室睡了一晚~还因此感冒了~杭州的天气还真是易变啊
星期二，因为笔试那天晚上赶着回来太累了~而且这一天就一节软件工程~所以逃了~也因HR告诉我们笔试的通知最晚在第二天的晚上告诉我们~这一天我是在焦虑中度过的~但我觉得自己的笔试很好~可以拿到面试的~晚上跟着老聂从实验室回去~吃了个饭洗了个澡~然后突然发现163.com的面试通知短信~很兴奋~跑去特地要老聂找去滨江的公交路线~一整晚睡得还可以~
今天~怎么说呢~一切的一切或许又回归了吧~今天又逃了一天的课~早上八点跑来实验室拿简历~九点的时候去书店给天师取快递~快十点的时候坐着566前往滨江~快中午的时候到达滨江~好久都不出去了~下车后有点找不着北的感觉~找了好久才找到面试的地点~快下午一点的时候开始前往面试地点~路上认识一位从上海赶过来的哥们~他研二搞安卓的~他说饿想找吃的~最后我们一起来到了163.com大厦的C座签到，发现面试区域居然提供吃喝~163.com的研究所所在地的确很偏僻~跟我一起的哥们也这么说~他一口气吃了两个面包~我们才坐下不久我就面试开始了~面我的是个很年轻的技术哥~他首先让我自我介绍~然后他开始看我的网上简历和我的笔试卷子~边看边问~当时也是脑子一片空白~随性也跟他扯起来~我记得他让我介绍了我的两个项目~一个是在线评判系统~另一个是ftp（半成品的项目）~我糊里糊涂的也不知道怎么说了~最后依稀记得他向我问了tcpdump和smtp协议~我记得笔试的卷有两道tcp/ip的题目~我答得都挺好的~一个是tcp的三次握手过程和那七层协议~其实我看到面试官手里我的卷子上打着一个不错的分数~心里窃喜啊~最后面试官让我问他问题~我问了几个后就不问了~然后他说面试结束了让我去面试区等待HR通知~走出来的时候我问面试官怎么不问shell啊？他没回答~他过了会问我课多吗~我随性的回答了~出来后发现跟我一起来的那哥们也刚面完出来~我们彼此谈了感受~期间他又吃了两个面包~我们在等待区侯着期间认识了一位中国科技大学的研一的也搞安卓的~他还没有面~他不断地询问都面了啥~我看了他的简历~光项目他就有了一页纸了~牛人啊~然后的然后~那个女HR告诉我结果~我没有追问为何~走出来的时候也挺释然的~╮(╯▽╰)╭╮(╯▽╰)╭~
一句话概括：面包挺好吃的，水也挺甜的~这三天也算是攒了经验值吧~结果已经不重要了~过程已经享受了~在此之前在群里也吼了好多~╮(╯▽╰)╭~回去洗个澡~睡个觉明天的太阳依旧灿烂~一个掉渣的二本院校的技术屌丝男的小逆袭？或许吧~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程之生产者于消费者问题]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/19/duo-xian-cheng-zhi-sheng-chan-zhe-yu-xiao-fei-zhe-wen-ti/"/>
    <updated>2013-05-19T10:26:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/19/duo-xian-cheng-zhi-sheng-chan-zhe-yu-xiao-fei-zhe-wen-ti</id>
    <content type="html"><![CDATA[<p>生产者线程向一缓冲区中写入数据~消费者线程从缓冲区中读取数据，由于生产者线程和消费者线程共享同一缓冲区，为了正确的读写数据，在使用缓冲队列时必须保持互至。生产者线程和消费者线程必须满足：生产者写入的缓冲区的数目不能超过缓冲区的容量，消费者线程读取的数目不能超过生产者写入的数目。初始化读写指针为0，如果读指针等于写指针。则缓冲区是空的~如果（写指针+1） % N 等于读指针，则缓冲区是满的</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;stdlib.h></h1>

<h1>include&lt;string.h></h1>

<h1>include&lt;sys/wait.h></h1>

<h1>include&lt;sys/types.h></h1>

<h1>include&lt;unistd.h></h1>

<h1>include&lt;pthread.h></h1>

<h1>include&lt;time.h></h1>

<h1>include&lt;math.h></h1>

<h1>define BUFFER_SIZE 8</h1>

<p>struct prodcons {
int buffer[BUFFER_SIZE];
pthread_mutex_t lock;
int readpos,writepos;
pthread_cond_t notempty;
pthread_cond_t notfull;
};</p>

<p>void init(struct prodcons *b)
{
pthread_mutex_init(&amp;b->lock,NULL);
pthread_cond_init(&amp;b->notempty,NULL);
pthread_cond_init(&amp;b->notfull,NULL);
b->readpos = 0 ;
b->writepos = 0 ;
}</p>

<p>void put(struct prodcons *b,int data)
{
pthread_mutex_lock(&amp;b->lock);
if((b->writepos + 1)%BUFFER_SIZE == b->readpos)
{
pthread_cond_wait(&amp;b->notfull,&amp;b->lock);
}
b->buffer[b->writepos] = data;
b->writepos++;
if(b->writepos >= BUFFER_SIZE)
b->writepos = 0;
pthread_cond_signal(&amp;b->notempty);
pthread_mutex_unlock(&amp;b->lock);
}</p>

<p>int get(struct prodcons *b)
{
int data;
pthread_mutex_lock(&amp;b->lock);
if(b->writepos == b->readpos)
{
pthread_cond_wait(&amp;b->notempty,&amp;b->lock);
}
data = b->buffer[b->readpos];
b->readpos++;</p>

<p>if(b->readpos >= BUFFER_SIZE)
b->readpos = 0;</p>

<p>pthread_cond_signal(&amp;b->notfull);
pthread_mutex_unlock(&amp;b->lock);
return data;
}</p>

<h1>define OVER (-1)</h1>

<p>struct prodcons buffer;
void <em>producer(void </em>data)
{
int n;
for(n = 0 ; n &lt; 50 ; n++)
{
printf(“%d\t”,n);
put(&amp;buffer,n);
}
put(&amp;buffer,OVER);
return NULL;
}
void <em>consumer(void </em>data)
{
int d;
while(1)
{
d = get(&amp;buffer);
if(d == OVER)
break;
printf(“%d\t”,d);
}
return NULL;
}
int main(void)
{
pthread_t th_a,th_b;
void *retval;
init(&amp;buffer);
pthread_create(&amp;th_a,NULL,producer,0);
pthread_create(&amp;th_b,NULL,consumer,0);
pthread_join(th_a,&amp;retval);
pthread_join(th_b,&amp;retval);
printf(“\n”);
return 0;
}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新交通规则]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/xin-jiao-tong-gui-ze/"/>
    <updated>2013-05-18T22:49:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/xin-jiao-tong-gui-ze</id>
    <content type="html"><![CDATA[<p>/<em>
 * =====================================================================================
 *
 *       Filename:  1314.cpp
 *
 *    Description:  new rules
 *
 *        Version:  1.0
 *        Created:  2013/&frac14; 15:23:06
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  mdk-vim.cpp-c (mdk), <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x6d;&#101;&#110;&#103;&#x64;&#97;&#105;&#107;&#x75;&#x6e;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;">&#x6d;&#101;&#x6e;&#x67;&#100;&#x61;&#105;&#x6b;&#x75;&#x6e;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;</a>
 *        Company:  cjluacm-vim-mdk
 *
 * =====================================================================================
 </em>/</p>

<h1>include<iostream></h1>

<h1>include<cstdio></h1>

<p>using namespace std;
int main()
{</p>

<pre><code>//before
if(light == “green”){
  run();
}else if(light == “red”){
  stop();
}else if(light == “yellow”){
  holdOn();
}

//now
if(light == “green”){
  run();
}else if(light == “red”){
  stop();
}else if(light == “yellow”){
  stop();
}
return 0;
</code></pre>

<p>}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unix socket server&amp;client]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/unix-socket-server-and-client/"/>
    <updated>2013-05-18T22:48:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/unix-socket-server-and-client</id>
    <content type="html"><![CDATA[<p>socket()函数创建一个socket,然后调用bind()函数将其与本机的地址以及一个本地端口绑定~然后利用listen()在相应的socket上监听，当accept()接收到一个连接的服务请求时，服务器将显示客户机的ip地址,并通过新的socket向客户端发送字符串”Hello,you are connected!”最后关闭socket</p>

<p>myserver.c:</p>

<p>/<em>
 </em>socket server
 * */</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;stdlib.h></h1>

<h1>include&lt;errno.h></h1>

<h1>include&lt;unistd.h></h1>

<h1>include&lt;sys/types.h></h1>

<h1>include&lt;netinet/in.h></h1>

<h1>include&lt;sys/socket.h></h1>

<h1>include&lt;sys/wait.h></h1>

<h1>define SERVERPORT 3333</h1>

<h1>define BACKLOG 10</h1>

<p>int main()
{</p>

<pre><code>int sockfd,clientfd;
struct sockaddr_in my_addr;
struct sockaddr_in remote_addr;
if((sockfd = socket(AF_INET , SOCK_STREAM ,0))== -1){
perror(“socket create error !!!”);
exit(1);
}
my_addr.sin_family = AF_INET;
my_addr.sin_port = htons(SERVERPORT);
my_addr.sin_addr.s_addr = INADDR_ANY;
bzero(&amp;(my_addr.sin_zero),8);
if(bind(sockfd,(struct sockaddr *)&amp;my_addr,sizeof(struct sockaddr)) == -1){
 perror(“bind error….”);
 exit(1);
}
if(listen(sockfd,BACKLOG) == -1)
{
 perror(“listen error ..”);
 exit(1);
}
while(1){
 int sin_size = sizeof(struct sockaddr_in);
 if((clientfd = accept(sockfd,(struct sockaddr *)&amp;remote_addr,&amp;sin_size))==-1){
 perror(“accept error…”);
 continue;
 }
 printf(“Receied a connection from %s\n”,inet_ntoa(remote_addr.sin_addr));
 if(!fork()){
  if(send(clientfd,”Hello,you are connected!\n”,26,0) == -1)
  perror(“send error…”);
  close(clientfd);
  exit(0);
 }
 close(clientfd);
}
</code></pre>

<p>}</p>

<p>客户端通过服务器域名获得服务器的ip,然后新建一个socket调用connect与服务器连接，连接成功后接收从服务器发送过来的数据，最后关闭socket</p>

<p>gethostbyname()是完成域名转换的 struct hostent <em>gethostbyname(const char </em>name)</p>

<p>myclient.c:</p>

<p>/<em>
 </em>socket client
 * */</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;stdlib.h></h1>

<h1>include&lt;string.h></h1>

<h1>include&lt;unistd.h></h1>

<h1>include&lt;errno.h></h1>

<h1>include&lt;netdb.h></h1>

<h1>include&lt;sys/types.h></h1>

<h1>include&lt;sys/wait.h></h1>

<h1>include&lt;sys/socket.h></h1>

<h1>include&lt;netinet/in.h></h1>

<h1>define SERVERPORT 3333</h1>

<h1>define MAXDATASIZE 100</h1>

<p>int main(int argc,char <em>argv[])
{
  int sockfd,recvbytes;
  char buf[MAXDATASIZE];
  struct hostent </em>host;
  struct sockaddr_in serv_addr;
  if(argc &lt; 2)
  {
   fprintf(stderr,”Please enter the server’hostname!\n”);
   exit(1);
  }
  if((host= gethostbyname(argv[1])) == NULL){
   perror(“gethostbyname error…”);
   exit(1);
  }
  if((sockfd=socket(AF_INET,SOCK_STREAM ,0)) == -1)
  {
   perror(“socket error…”);
   exit(1);
  }
  serv_addr.sin_family = AF_INET ;
  serv_addr.sin_port = htons(SERVERPORT);
  serv_addr.sin_addr = <em>((struct in_addr </em>)host->h_addr);
  bzero(&amp;(serv_addr.sin_zero),8);
  if(connect(sockfd,(struct sockaddr *)&amp;serv_addr,sizeof(struct sockaddr)) == -1)
  {
  perror(“connext error…”);
  exit(1);
  }
  if((recvbytes=recv(sockfd,buf,MAXDATASIZE,0)) == -1)
  {
   perror(“recv error ….”);
   exit(1);
  }
  buf[recvbytes]=’\0′;
  printf(“REceived:%s \n”,buf);
  close(sockfd);
}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gentoo最小化安装]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/gentoozui-xiao-hua-an-zhuang/"/>
    <updated>2013-05-18T22:48:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/gentoozui-xiao-hua-an-zhuang</id>
    <content type="html"><![CDATA[<p>转载自有删减<a href="http://www.gentoo.org/doc/zh_cn/gentoo-x86-quickinstall.xml">http://www.gentoo.org/doc/zh_cn/gentoo-x86-quickinstall.xml</a>
代码 1.1: 测试机器的规格</p>

<p>（下述配置和耗时情况帮你粗略估计完成整个安装过程大概需要的时间）</p>

<h1>grep bogo /proc/cpuinfo</h1>

<p>bogomips       : 3337.81</p>

<h1>hdparm -tT /dev/sda</h1>

<p>/dev/sda:
 Timing cached reads:   1100 MB in  2.00 seconds = 549.97 MB/sec
 Timing buffered disk reads:  224 MB in  3.01 seconds =  74.36 MB/sec</p>

<h1>grep MemTotal /proc/meminfo</h1>

<p>MemTotal:       509248 kB</p>

<ol>
<li>快速安装指南</li>
</ol>


<p>安装介质</p>

<p>从我们的镜像下载一张光盘。可以在releases/x86/current-iso/中找到最小光盘的ISO文件。最小安装光盘只适用于有网络环境的安装。本指南将使用最小光盘。</p>

<p>刻制光盘，用它引导机器。</p>

<p>从光盘启动</p>

<p>启动时按下F2查看有哪些引导选项。你可以启动gentoo或者gentoo-nofb，后者禁用帧缓冲。如果你用LiveCD引导，别忘了添上nox选项以防止启动X图形环境。有好几个选项可用于启用或禁用一些特性。正常情况下会检测出你的硬件并装载所有模块。如果内核无法正确引导或是在引导过程中挂机，你可能不得不尝试不同的配置。最安全的办法大概是使用nodetect选项，然后显式地载入需要的模块。</p>

<p>代码 2.1: 引导最小光盘</p>

<p>Gentoo Linux Installation LiveCD                     <a href="http://www.gentoo.org">http://www.gentoo.org</a>
Enter to Boot; F1 for kernels  F2 for options.
boot: gentoo-nofb
（或在有问题的情况下）
boot: gentoo-nofb nodetect</p>

<p>可选：装载模块</p>

<p>如果使用了nodetect选项，就要在启动后载入必要的模块。你还要配置好网络并拥有访问磁盘的权限。lspci命令能帮助你确认硬件信息。</p>

<p>代码 2.2: 载入必要的模块</p>

<p>livecd root # lspci
（根据lspci的输出查看需要哪些模块）</p>

<p>（以下只是个例子，实际以具体硬件为准）
livecd root # modprobe 3w-9xxx
livecd root # modprobe r8169</p>

<p>网络配置</p>

<p>如果还没开启网络，可以用net-setup来配置网络。配置之前可能要先用modprobe为网卡载入支持模块。如果你有ADSL，请使用pppoe-setup和pppoe-start。要支持PPTP，首先编辑/etc/ppp/chap-secrets和/etc/ppp/options.pptp，然后使用pptp <server ip>。</p>

<p>如果是无线连接，用iwconfig设置无线连接参数，然后再次执行net-setup或者手动运行ifconfig、dhcpcd和/或route。</p>

<p>如果你用代理，不要忘了使用export http_proxy、ftp_proxy和RSYNC_PROXY初始化系统环境。</p>

<p>代码 2.3: 通过向导配置网络</p>

<p>livecd root # net-setup eth0</p>

<p>或者，你也可以手动打开网络。下面的例子把你电脑的IP地址配置为192.168.1.10，并把网关和域名服务器设为192.168.1.1。</p>

<p>代码 2.4: 手动配置网络</p>

<p>livecd root # ifconfig eth0 192.168.1.10/24
livecd root # route add default gw 192.168.1.1
livecd root # echo nameserver 192.168.1.1 > /etc/resolv.conf</p>

<p>安装盘允许你启动一个sshd服务，添加用户，运行irssi（一个命令行的客户端聊天工具），还可以使用links进行网上冲浪。</p>

<p>可选：通过ssh连接到你的新机器</p>

<p>最有趣的功能当然是sshd。启动这个服务，从另一台机器连过来，然后从本指南复制/粘贴命令。</p>

<p>代码 2.5: 启动sshd</p>

<p>livecd root # time /etc/init.d/sshd start
 * Generating hostkey &hellip;
（sshd生成密钥并显示更多输出）
 * starting sshd &hellip;                            [ok]</p>

<p>real   0m13.688s
user   0m9.420s
sys    0m0.090s</p>

<p>现在设置一下安装盘的root密码，使你能通过另一台电脑连接。请注意正常情况下不推荐你允许root通过ssh连接。如果你的本地网络不太可靠，请设一个又长又复杂的密码。它只能使用一次，因为机器重启后就没掉了。</p>

<p>代码 2.6: 设置root密码</p>

<p>livecd root # passwd
New UNIX password: 输入密码
Retype new UNIX password: 输入密码
passwd: password updated successfully</p>

<p>现在就可以在另一台电脑上打开一个终端并连接到你的新机器，在新的窗口中继续本指南接下去的内容，复制/粘贴文中的命令。</p>

<p>代码 2.7: 从另一台电脑连到你的新机器</p>

<p>（使用你新机器的IP地址）
$ ssh <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#114;&#x6f;&#x6f;&#x74;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#56;&#46;&#49;&#x2e;&#x31;&#x30;">&#114;&#111;&#111;&#116;&#64;&#49;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#49;&#x2e;&#x31;&#x30;</a>
The authenticity of host &lsquo;192.168.1.10 (192.168.1.10)&rsquo; can&rsquo;t be established.
RSA key fingerprint is 96:e7:2d:12:ac:9c:b0:94:90:9f:40:89:b0:45:26:8f.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.1.10&rsquo; (RSA) to the list of known hosts.
Password: 输入密码</p>

<p>准备磁盘</p>

<p>使用fdisk或者cfdisk创建分区规划。至少需要一个交换分区（类别为82）和一个Linux分区（类别为83）。下面是我们的手册选用的方案，创建包括一个/boot分区，一个交换分区和一个主分区。将/dev/sda替换为你自己的磁盘。大多数系统忽略启动标志，但有的系统需要它。使用fdisk的a命令在启动分区上设置这个标志。</p>

<p>代码 2.8: 创建分区</p>

<p>livecd ~ # fdisk /dev/sda</p>

<p>（本手册接下去使用以下分区规划）
livecd ~ # fdisk -l /dev/sda</p>

<p>Disk /dev/sda: 599.9 GB, 599978409984 bytes
255 heads, 63 sectors/track, 72943 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes</p>

<p>   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *           1          12       96358+  83  Linux
/dev/sda2              13         110      787185   82  Linux swap / Solaris
/dev/sda3             111       72943   585031072+  83  Linux</p>

<p>使用mke2fs，mke2fs -j，mkreiserfs，mkfs.xfs和mkfs.jfs建立Linux分区的文件系统。使用mkswap和swapon初始化交换分区。</p>

<p>代码 2.9: 创建文件系统并激活交换分区</p>

<p>（ext2完全满足/boot分区的需要）
livecd ~ # mke2fs /dev/sda1</p>

<p>（主分区就用ext3吧）
livecd ~ # mke2fs -j /dev/sda3</p>

<p>（创建并激活交换分区）
livecd ~ # mkswap /dev/sda2 &amp;&amp; swapon /dev/sda2</p>

<p>把新建的文件系统挂载到/mnt/gentoo。如果需要其他挂载点（如/mnt/gentoo/boot），也要为它们创建目录并挂载好。</p>

<p>代码 2.10: 挂载文件系统</p>

<p>livecd ~ # mount /dev/sda3 /mnt/gentoo
livecd ~ # mkdir /mnt/gentoo/boot
livecd ~ # mount /dev/sda1 /mnt/gentoo/boot
livecd ~ # cd /mnt/gentoo</p>

<p>安装Stage</p>

<p>首先确保正确设置了日期和时间。执行date MMDDhhmmYYYY，使用UTC时间。</p>

<p>代码 2.11: 设定日期和UTC时间</p>

<p>（查看时钟）
livecd gentoo # date
Mon Mar  6 00:14:13 UTC 2006</p>

<p>（设置当前日期和时间，如果需要的话）
livecd gentoo # date 030600162006 （格式为MMDDhhmmYYYY）
Mon Mar  6 00:16:00 UTC 2006</p>

<p>接下来，从我们的镜像下载一份stage包：</p>

<p>代码 2.12: 下载一份stage3压缩包</p>

<p>livecd gentoo # links <a href="http://www.gentoo.org/main/en/mirrors.xml">http://www.gentoo.org/main/en/mirrors.xml</a>
（选一个镜像，进入releases/x86/current-stage3/目录，高亮显示你需要的stage3包，
即i686 stage3，按下D键下载）</p>

<p>进入/mnt/gentoo，执行tar xjpf <stage3 tarball>解压stage包。</p>

<p>代码 2.13: 解开stage3压缩包</p>

<p>livecd gentoo # time tar xjpf stage3*</p>

<p>real  1m14.157s
user  1m2.920s
sys   0m7.530s</p>

<p>安装最新的Portage快照。跟下载stage3压缩包一样：从我们的列表选择一个最近的镜像，下载最新的快照并解压。</p>

<p>代码 2.14: 下载最新的Portage快照</p>

<p>livecd gentoo # cd /mnt/gentoo/usr
livecd usr # wget <a href="http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2">http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2</a></p>

<p>代码 2.15: 解开Portage快照</p>

<p>livecd usr # time tar xjf portage-lat*</p>

<p>real  0m40.523s
user  0m28.280s
sys   0m8.240s</p>

<p>切换系统</p>

<p>挂载/proc &amp; /dev文件系统，拷贝/etc/resolv.conf文件，然后chroot到你的Gentoo环境。</p>

<p>代码 2.16: Chroot</p>

<p>livecd usr # cd /
livecd / # mount -t proc proc /mnt/gentoo/proc
livecd / # mount -o bind /dev /mnt/gentoo/dev
livecd / # cp -L /etc/resolv.conf /mnt/gentoo/etc/
livecd / # chroot /mnt/gentoo /bin/bash
livecd / # env-update &amp;&amp; source /etc/profile</p>

<blockquote><blockquote><blockquote><p>Regenerating /etc/ld.so.cache&hellip;</p></blockquote></blockquote></blockquote>

<p>设定时区</p>

<p>设置你的时区信息：使用/usr/share/zoneinfo中的正确条目。</p>

<p>代码 2.17: 设置时区</p>

<p>livecd / # ls /usr/share/zoneinfo
（以上海为例）
livecd / # cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
livecd / # date
Thu Aug 30 11:03:16 CST 2007</p>

<p>设定主机名和域名</p>

<p>在/etc/conf.d/hostname和/etc/hosts中设置主机名。以下例子中我们用mybox作为主机名，用at.myplace作为域名。可以用nano编辑这些配置文件，或者使用下面的命令：</p>

<p>代码 2.18: 设置主机名和域名</p>

<p>livecd / # cd /etc
livecd etc # echo &ldquo;127.0.0.1 mdk-server.vim.myplace mybox localhost&rdquo; > hosts
livecd etc # sed -i -e &rsquo;s/HOSTNAME.*/HOSTNAME=&ldquo;mdk-server&rdquo;/&lsquo; conf.d/hostname
（使用指定的主机名并检查）
livecd etc # hostname mdk-server
livecd etc # hostname -f
mdk-server.vim.myplace</p>

<p>内核配置</p>

<p>安装一个内核源码包（通常为gentoo-sources），配置、编译并拷贝arch/i386/boot/bzImage文件到/boot。</p>

<p>代码 2.19: 安装内核源码包，编译和安装内核</p>

<p>livecd etc # time emerge gentoo-sources</p>

<p>real  2m51.435s
user  0m58.220s
sys   0m29.890s
livecd etc # cd /usr/src/linux
livecd linux # make menuconfig
（配置内核）
livecd linux # time make -j2</p>

<p>（所花的时间很大程度上决定于你所选的选项）
real  3m51.962s
user  3m27.060s
sys   0m24.310s</p>

<p>livecd linux # make modules_install
livecd linux # cp arch/i386/boot/bzImage /boot/kernel</p>

<p>配置系统</p>

<p>编辑/etc/fstab，用实际的分区名代替BOOT、ROOT和SWAP。记得确认一下文件系统是否与所安装的相匹配。</p>

<p>代码 2.20: fstab范例</p>

<p>livecd linux # cd /etc
livecd etc # nano -w fstab
/dev/sda1   /boot     ext2    noauto,noatime     1 2
/dev/sda3   /         ext3    noatime            0 1
/dev/sda2   none      swap    sw                 0 0</p>

<p>在/etc/conf.d/net中配置网络。把net.eth0启动脚本添加到默认运行级别。如果有多张网卡，分别为它们建立符号链接到net.eth0启动脚本，并一起添加到默认运行级别。用nano编辑/etc/conf.d/net，或者使用如下命令：</p>

<p>代码 2.21: 配置网络</p>

<p>livecd etc # cd conf.d
livecd conf.d # echo &lsquo;config_eth0=( &ldquo;192.168.1.10/24&rdquo; )&rsquo; >> net
livecd conf.d # echo &lsquo;routes_eth0=( &ldquo;default via 192.168.1.1&rdquo; )&rsquo; >> net
livecd conf.d # rc-update add net.eth0 default
（如果你把网卡驱动编译为模块，
需要将它添加到/etc/modules.autoload.d/kernel-2.6）
livecd conf.d # echo r8169 >> /etc/modules.autoload.d/kernel-2.6
（如果希望重启后通过ssh重新连接到新机器）
livecd conf.d # rc-update add sshd default</p>

<p>注意: 如果需要支持PCMCIA卡，请emerge pcmciautils。</p>

<p>执行passwd设置root密码。</p>

<p>代码 2.22: 设置root密码</p>

<p>livecd conf.d # passwd
New UNIX password: 输入密码
Retype new UNIX password: 再输入密码
passwd: password updated successfully</p>

<p>编辑/etc/conf.d/clock以定义前面所使用的时区。</p>

<p>代码 2.23: 编辑/etc/conf.d/clock</p>

<p>livecd conf.d # nano -w /etc/conf.d/clock
TIMEZONE=&ldquo;Asia/Shanghai&rdquo;</p>

<p>检查系统配置，查看并编辑这些配置文件：/etc/rc.conf， /etc/conf.d/rc，/etc/conf.d/keymaps。</p>

<p>代码 2.24: 可选：编辑一些配置文件</p>

<p>livecd conf.d # nano -w /etc/rc.conf
livecd conf.d # nano -w /etc/conf.d/rc
livecd conf.d # nano -w /etc/conf.d/keymaps</p>

<p>安装系统工具</p>

<p>安装一个系统日志如syslog-ng和一个cron守护进程如vixie-cron，并把它们添加到默认运行级别。
注意: Cron守护进程依赖于MTA。mail-mta/ssmtp会因依赖性而被一起安装。如果你想使用一种更高级的MTA，可以现在安装它。要是现在没空，暂时先安装ssmtp，以后再卸载并安装你要的MTA。</p>

<p>代码 2.25: 安装系统日志和cron守护进程</p>

<p>livecd conf.d # time emerge syslog-ng vixie-cron</p>

<p>real  1m54.099s
user  1m2.630s
sys   0m34.620s
livecd conf.d # rc-update add syslog-ng default
livecd conf.d # rc-update add vixie-cron default</p>

<p>安装必要的文件系统工具（xfsprogs，reiserfsprogs或jfsutils）和网络工具（dhcpcd或ppp）。</p>

<p>代码 2.26: 安装其它工具</p>

<p>livecd conf.d # emerge xfsprogs       （如果使用XFS文件系统）
livecd conf.d # emerge jfsutils       （如果使用JFS文件系统）
livecd conf.d # emerge reiserfsprogs  （如果使用Reiser文件系统）
livecd conf.d # emerge dhcpcd         （如果使用DHCP客户端）
livecd conf.d # emerge ppp            （如果使用PPPoE ADSL连接）</p>

<p>配置引导程序</p>

<p>安装并配置grub。</p>

<p>代码 2.27: Emerge grub并编辑它的配置文件</p>

<p>livecd conf.d # time emerge grub</p>

<p>real  1m4.634s
user  0m39.460s
sys   0m15.280s
livecd conf.d # nano -w /boot/grub/grub.conf</p>

<p>代码 2.28: grub.conf范例</p>

<p>default 0
timeout 10</p>

<p>title Gentoo
root (hd0,0)
kernel /boot/kernel root=/dev/sda3</p>

<p>代码 2.29: 安装grub</p>

<p>livecd conf.d # grub
Probing devices to guess BIOS drives. This may take a long time.</p>

<p>grub> root (hd0,0)
 Filesystem type is ext2fs, partition type 0xfd</p>

<p>grub> setup (hd0)
 Checking if &ldquo;/boot/grub/stage1&rdquo; exists&hellip; yes
 Checking if &ldquo;/boot/grub/stage2&rdquo; exists&hellip; yes
 Checking if &ldquo;/boot/grub/e2fs_stage1_5&rdquo; exists&hellip; yes
 Running &ldquo;embed /boot/grub/e2fs_stage1_5 (hd0)&rdquo;&hellip;  16 sectors are embedded.
succeeded
 Running &ldquo;install /boot/grub/stage1 (hd0) (hd0)1+16 p (hd0,0)/boot/grub/stage2 /boot/
grub/menu.lst&rdquo;&hellip; succeeded
Done.</p>

<p>grub> quit</p>

<p>重启</p>

<p>退出chroot环境，卸载所有文件系统并重启：</p>

<p>代码 2.30: 重启</p>

<p>livecd conf.d # exit
livecd / # umount /mnt/gentoo/dev /mnt/gentoo/proc /mnt/gentoo/boot /mnt/gentoo
livecd / # reboot
（别忘了取出光盘）</p>

<p>完成安装
注意: 在我们这台测试机器上，从minimal CD启动显示boot提示符开始，到重启后显示登录提示符， 总用时为00:42:31 。没错，不到一个小时！注意这个时间还包含了stage3包、Portage快照和一些软件包的下载时间，以及配置内核所花的时间。</p>

<p>以root身份登录，用useradd添加一个或多个用户，作为日常使用。</p>

<p>代码 2.31: 从另一台电脑连到你的新机器</p>

<p>（清理known_hosts文件中的内容，因为你的新机器已生成一个新的
通用主机密钥）
$ nano -w ~/.ssh/known_hosts
（找出新机器的IP并删除那一行，保存并退出nano）</p>

<p>（使用你新机器的IP地址）
$ ssh <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#114;&#x6f;&#111;&#x74;&#x40;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#x31;&#x2e;&#49;&#x30;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#49;&#54;&#56;&#46;&#49;&#46;&#x31;&#48;</a>
The authenticity of host &lsquo;192.168.1.10 (192.168.1.10)&rsquo; can&rsquo;t be established.
RSA key fingerprint is 96:e7:2d:12:ac:9c:b0:94:90:9f:40:89:b0:45:26:8f.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.1.10&rsquo; (RSA) to the list of known hosts.
Password: 输入密码</p>

<p>代码 2.32: 添加一个新用户</p>

<p>mybox ~ # adduser -g users -G lp,wheel,audio,cdrom,portage,cron -m john
mybox ~ # passwd john
New UNIX password: 设置John的密码
Retype new UNIX password: 再次输入John的密码
passwd: password updated successfully</p>

<p>最后涉及的配置</p>

<p>开始选择最近的镜像，在/etc/make.conf中定义SYNC变量和GENTOO_MIRRORS变量，或者也可以使用mirrorselect。此时你还可以定义并行编译的进程数。</p>

<p>代码 2.33: 使用mirrorselect并设置MAKEOPTS</p>

<p>mybox ~ # emerge mirrorselect
mybox ~ # mirrorselect -i -o >> /etc/make.conf
mybox ~ # mirrorselect -i -r -o >> /etc/make.conf
（通常，一个较好的值为处理器数加一）
mybox ~ # echo &lsquo;MAKEOPTS=&ldquo;-j2&rdquo;&rsquo; >> /etc/make.conf</p>

<p>现在是启用或禁用一些USE标记的好时机。运行emerge -vpe world，列出所有当前已安装的软件包以及它们被启用和禁用的USE标记。编辑/etc/make.conf或使用下列命令定义USE变量：</p>

<p>代码 2.34: 查看当前使用的USE标记并启用或禁用一些</p>

<p>mybox ~ # emerge -vpe world
（Portage列出软件包和它们的USE标记。作为例子，让我们禁用ipv6和fortran，
并启用unicode）
mybox ~ # echo &lsquo;USE=&ldquo;nptl nptlonly -ipv6 -fortran unicode&rdquo;&rsquo; >> /etc/make.conf</p>

<p>新版本的glibc使用/etc/locale.gen来定义语言环境。</p>

<p>代码 2.35: 定义语言环境</p>

<p>mybox ~ # cd /etc
mybox etc # nano -w locale.gen
mybox etc # locale-gen</p>

<p>最后但并非最轻松的，你可能想修改/etc/make.conf中的CFLAGS变量来优化编码，以满足你的特定需要。请注意极少需要一长串的标记列表，那样甚至可能导致系统崩溃。建议通过march选项指定处理器类型并赋上-O2 -pipe。</p>

<p>可能你还想转到 ~x86。只有当你能够对付那些脆弱不良的ebuild和软件包时才能这么做。如果你倾向于保持系统的稳定性，请不要添加ACCEPT_KEYWORDS变量。添加FEATURES=”ccache”却是个好主意。</p>

<p>代码 2.36: 为make.conf作最后的修改</p>

<p>mybox etc # nano -w make.conf
（在CFLAGS中将-march设为你的CPU类型）
CFLAGS=&ldquo;-O2 -march=athlon-xp -pipe&rdquo;
（添加下面一行）
FEATURES=&ldquo;ccache&rdquo;
（只有清楚自己在干什么才添加下面一行）
ACCEPT_KEYWORDS=&ldquo;~x86&rdquo;</p>

<p>可能你会想重编译整个系统两次，以使你所作的最新配置完全生效。这要花很长的时间来完成，而只能得到微小的速度提升。你可以让系统自己随着以后新软件包的发布而逐步完成优化。不过，站在保持系统一致性的立场来看，重编译仍不失为一个好主意。请参考文档Gentoo GCC升级指南，其中讨论了如何搭建一个具有良好一致性的system和world，以及这样做的好处。</p>

<p>只重编译那些因你应用了新的USE标记或受此影响而需要升级的软件包，也要花费不少时间。可能还必须卸载会阻止你升级的软件包。在emerge -vpuD –newuse world的输出中寻找“[blocks B ]”，用emerge -C卸载它们。</p>

<p>代码 2.37: 升级软件包</p>

<p>（安装ccache）
mybox etc # emerge ccache</p>

<p>（请注意转到~x86会导致很多软件包要升级）
mybox etc # emerge -vpuD &mdash;newuse world
（好好看一看软件包列表和它们的USE标记，
有阻止的包就先卸载，然后启动漫长的过程）
mybox etc # time emerge -vuD &mdash;newuse world
（（重）编译了79个软件包）</p>

<p>real  180m13.276s
user  121m22.905s
sys   36m31.472s</p>

<p>（重编译libtool以避免一些潜在的问题）
mybox etc # emerge &mdash;oneshot libtool</p>

<p>（更新配置文件，确保不要让dispatch-conf更新你配置好的文件）
mybox etc # dispatch-conf</p>

<p>（如果升级了perl，应该执行perl-cleaner脚本）
mybox etc # time perl-cleaner all
real  1m6.495s
user  0m42.699s
sys   0m10.641s</p>

<p>（如果升级了python的主要软件包，应该执行python-updater脚本）
mybox etc # python-updater</p>

<p>接下来该做什么</p>

<p>想安装服务器应用程序还是一个桌面系统，取决于你打算让你的新Gentoo做什么。以下仅作为一个例子，统计了emerge gnome和emerge kde在~x86系统（按之前的描述安装的）上所花费的时间。两者是在同一起点开始安装的。</p>

<p>去看看我们的文档目录，研究一下如何安装和配置你挑选的软件。
重要: 以下只是举个例子，并不意味着就作为推荐设置。</p>

<p>代码 2.38: Emerge GNOME</p>

<p>mybox etc # emerge -vp gnome
（查看软件包列表和它们的USE标记，
如果需要请编辑make.conf
mybox etc # nano -w /etc/make.conf
（定义了以下USE标记）
USE=&ldquo;nptl nptlonly -ipv6 -fortran unicode svg hal dbus \</p>

<pre><code> -kde -qt4 -arts -eds -esd gnome gstreamer gtk firefox"
</code></pre>

<p>mybox etc # time emerge gnome
（安装了326个软件包）</p>

<p>real  520m44.532s
user  339m21.144s
sys   146m22.337s</p>

<p>代码 2.39: Emerge KDE</p>

<p>mybox etc # emerge -vp kde-meta
（查看软件包列表和它们的USE标记，
如果需要请编辑make.conf
mybox etc # nano -w /etc/make.conf
定义了以下USE标记）
USE=&ldquo;nptl nptlonly -ipv6 -fortran unicode svg hal dbus \</p>

<pre><code> kde qt4 -arts -eds -esd -gnome -gstreamer -gtk -firefox"
</code></pre>

<p>mybox etc # time emerge kde-meta
（安装了391个软件包）</p>

<p>real  1171m25.318s
user  851m26.393s
sys   281m45.629s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发与开发]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/yan-fa-yu-kai-fa/"/>
    <updated>2013-05-18T22:47:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/yan-fa-yu-kai-fa</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++虚函数及虚函数表解析]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/c-plus-plus-xu-han-shu-ji-xu-han-shu-biao-jie-xi/"/>
    <updated>2013-05-18T22:47:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/c-plus-plus-xu-han-shu-ji-xu-han-shu-biao-jie-xi</id>
    <content type="html"><![CDATA[<p>转自:<a href="http://www.cnblogs.com/realyan/archive/2011/07/14/2106339.html">http://www.cnblogs.com/realyan/archive/2011/07/14/2106339.html</a>
虚函数的定义：</p>

<p>　　虚函数必须是类的非静态成员函数（且非构造函数），其访问权限是public（可以定义为private or proteceted， 但是对于多态来说，没有意义。），在基类的类定义中定义虚函数的一般形式：</p>

<p>　　virtual 函数返回值类型 虚函数名（形参表）</p>

<p>　　{ 函数体 }</p>

<p>　　虚函数的作用是实现动态联编，也就是在程序的运行阶段动态地选择合适的成员函数，在定义了虚函数后，</p>

<p>　　可以在基类的派生类中对虚函数重新定义（形式也 是：virtual 函数返回值类型 虚函数名（形参表）{ 函数体 }），在派生类中重新定义的函数应与虚函数具有相同的形参个数和形参类型。以实现统一的接口，不同定义过程。如果在派生类中没有对虚函数重新定义，则它继 承其基类的虚函数。当程序发现虚函数名前的关键字virtual后，会自动将其作为动态联编处理，即在程序运行时动态地选择合适的成员函数。</p>

<p>　　实现动态联编需要三个条件：</p>

<p>　　1、 必须把需要动态联编的行为定义为类的公共属性的虚函数。</p>

<p>　　2、 类之间存在子类型关系，一般表现为一个类从另一个类公有派生而来。</p>

<p>　　3、 必须先使用基类指针指向子类型的对象，然后直接或者间接使用基类指针调用虚函数。</p>

<p>　　定义虚函数的限制：</p>

<p>　　（1）非类的成员函数不能定义为虚函数，类的成员函数中静态 成员函数和构造函数也不能定义为虚函数，但可以将析构函数定义为虚函数。实际上，优秀的程序员常常把基类的析构函数定义为虚函数。因为，将基类的析构函数 定义为虚函数后，当利用delete删除一个指向派生类定义的对象指针时，系统会调用相应的类的析构函数。而不将析构函数定义为虚函数时，只调用基类的析 构函数。</p>

<p>　　（2）只需要在声明函数的类体中使用关键字“virtual”将函数声明为虚函数，而定义函数时不需要使用关键字“virtual”。</p>

<p>　　（3）如果声明了某个成员函数为虚函数，则在该类中不能出现和这个成员函数同名并且返回值、参数个数、参数类型都相同的非虚函数。在以该类为基类的派生类中，也不能出现这种非虚的同名同返回值同参数个数同参数类型函数。</p>

<p>　　为什么虚函数必须是类的成员函数：</p>

<p>　　虚函数诞生的目的就是为了实现多态，在类外定义虚函数毫无实际用处。</p>

<p>　　为什么类的静态成员函数不能为虚函数：</p>

<p>　　如果定义为虚函数，那么它就是动态绑定的，也就是在派生类中可以被覆盖的，这与静态成员函数的定义（：在内存中只有一份拷贝；通过类名或对象引用访问静态成员）本身就是相矛盾的。</p>

<p>　　为什么构造函数不能为虚函数：</p>

<p>　　因为如果构造函数为虚函数的话，它将在执行期间被构造，而执行期则需要对象已经建立，构造函数所完成的工作就 是为了建立合适的对象，因此在没有构建好的对象上不可能执行多态（虚函数的目的就在于实现多态性）的工作。在继承体系中，构造的顺序就是从基类到派生类， 其目的就在于确保对象能够成功地构建。构造函数同时承担着虚函数表的建立，如果它本身都是虚函数的话，如何确保vtbl的构建成功呢？</p>

<p>　　注意：当基类的构造函数内部有虚函数时，会出现什么情况呢？ 结果是在构造函数中，虚函数机制不起作用了，调用虚函数如同调用一般的成员函数一样。当基类的析构函数内部有虚函数时，又如何工作呢？与构造函数相同，只 有“局部”的版本被调用。但是，行为相同，原因是不一样的。构造函数只能调用“局部”版本，是因为调用时还没有派生类版本的信息。析构函数则是因为派生类 版本的信息已经不可靠了。我们知道，析构函数的调用顺序与构造函数相反，是从派生类的析构函数到基类的析构函数。当某个类的析构函数被调用时，其派生类的 析构函数已经被调用了，相应的数据也已被丢失，如果再调用虚函数的派生类的版本，就相当于对一些不可靠的数据进行操作，这是非常危险的。因此，在析构函数 中，虚函数机制也是不起作用的。</p>

<p>　　C++中的虚函数的作用主要是实现了多态的机制。关于多态， 简而言之就是用父类型别的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，这是一种泛型技 术。所谓泛型技术，说白了就是试图使用不变的代码（Or 不变的 接口）来实现可变的算法。比如：模板技术，RTTI技术，虚函数技术，要么是试图做到在编译时决议，要么试图做到运行时决议。</p>

<p>　　关于虚函数的使用方法，我在这里不做过多的阐述。大家可以看看相关的C++的书籍。在这篇文章中，我只想从虚函数的实现机制上面为大家一个清晰的剖析。</p>

<p>　　当然，相同的文章在网上也出现过一些了，但我总感觉这些文章不是很容易阅读，大段大段的代码，没有图片，没有详细的说明，没有比较，没有举一反三。不利于学习和阅读，所以这是我想写下这篇文章的原因。也希望大家多给我提意见</p>

<p>言归正传，让我们一起进入虚函数的世界。</p>

<p>　　虚函数表</p>

<p>　　对C++ 了解的人都应该知道虚函数（Virtual Function）是通过一张虚函数表（Virtual Table）来实现的。简称为V-Table。在这个表中，主是要一个类的虚函数的地址表，这张表解决了继承、覆盖的问题，保证其容真实反应实际的函数。 这样，在有虚函数的类的实例（注：抽象类即有纯虚函数的类不能被实例化。）中这个表被分配在了这个实例的内存中（注：一个类的虚函数表是静态的，也就是说 对这个类的每个实例，他的虚函数表的是固定的，不会为每个实例生成一个相应的虚函数表。），所以，当我们用父类的指针来操作一个子类的时候，这张虚函数表 就显得由为重要了，它就像一个地图一样，指明了实际所应该调用的函数。</p>

<p>　　这里我们着重看一下这张虚函数表。在C++的标准规格说明书 中说到，编译器必需要保证虚函数表的指针存在于对象实例中最前面的位置（这是为了保证正确取到虚函数的偏移量）。这意味着我们通过对象实例的地址得到这张 虚函数表，然后就可以遍历其中函数指针，并调用相应的函数。</p>

<p>　　假设我们有这样的一个类：
　　class Base { 　</p>

<p>　　　public: 　　</p>

<p>　　　　virtual void f() { cout &lt;&lt; “Base::f” &lt;&lt; endl; } 　</p>

<p>　　　　virtual void g() { cout &lt;&lt; “Base::g” &lt;&lt; endl; } 　</p>

<p>　　　　virtual void h() { cout &lt;&lt; “Base::h” &lt;&lt; endl; } 　</p>

<p>　};</p>

<p>　　按照上面的说法，我们可以通过Base的实例来得到Base的虚函数表。 下面是实际例程：
　　{ 　　… 　　typedef void(*Fun)(void); 　　</p>

<p>Base b; 　</p>

<p>　　　Fun pFun = NULL;</p>

<p>　　 　cout &lt;&lt; “虚函数表地址：” &lt;&lt; (int*)(&amp;b) &lt;&lt; endl; 　</p>

<p>　　　cout &lt;&lt; “虚函数表 — 第一个函数地址：” &lt;&lt; (int<em>)</em>(int*)(&amp;b) &lt;&lt; endl; 　　// Invoke the first virtual function</p>

<p>　　　pFun = (Fun)<em>((int</em>)<em>(int</em>)(&amp;b));</p>

<p>　　　pFun(); 　　… 　</p>

<p>　}</p>

<p>　　实际运行经果如下(Windows XP+VS2003, Linux 2.6.22 + GCC 4.1.3) ：</p>

<p>　　虚函数表地址：0012FED4</p>

<p>　　虚函数表 — 第一个函数地址：0044F148</p>

<p>　　Base::f</p>

<p>　　通过这个示例，我们可以看到，我们可以通过强行 把&amp;b转成int <em>，取得虚函数表的地址，然后，再次取址就可以得到第一个虚函数的地址了，也就是Base::f()，这在上面的程序中得到了验证（把int</em> 强制转成了函数指针）。通过这个示例，我们就可以知道如果要调用Base::g()和Base::h()，其代码如下：</p>

<p>　　(Fun)<em>((int</em>)<em>(int</em>)(&amp;b)+0); // Base::f()</p>

<p>　　(Fun)<em>((int</em>)<em>(int</em>)(&amp;b)+1); // Base::g()</p>

<p>　　(Fun)<em>((int</em>)<em>(int</em>)(&amp;b)+2); // Base::h()</p>

<p>　　画个图解释一下。如下所示：</p>

<p>　　注意：在上面这个图中，我在虚函数表的最后多加了一个结点，这是虚函数表的结束结点，就像字符串的结束符“\0”一样，其标志了虚函数表的结束。这个结束标志的值在不同的编译器下是不同的。</p>

<p>　　在WinXP+VS2003下，这个值是NULL。</p>

<p>　　而在Ubuntu 7.10 + Linux 2.6.22 + GCC 4.1.3下，这个值是如果1，表示还有下一个虚函数表，如果值是0，表示是最后一个虚函数表。</p>

<p>　　下面，我将分别说明“无覆盖”和“有覆盖”时的子类虚函数表的样子。没有覆盖父类的虚函数是毫无意义的。我之所以要讲述没有覆盖的情况，主要目的是为了给一个对比。在比较之下，我们可以更加清楚地知道其内部的具体实现。</p>

<p>一般继承（无虚函数覆盖）</p>

<p>　　下面，再让我们来看看继承时的虚函数表是什么样的。假设有如下所示的一个继承关系：</p>

<p>　　请注意，在这个继承关系中，子类没有重写任何父类的函数。那么，在派生类的实例的虚函数表如下所示：</p>

<p>　　对于实例：Derive d; 的虚函数表如下： （overload（重载） 和 override（重写），重载就是所谓的名同而签名不同，重写就是对子类对虚函数的重新实现。）</p>

<p>　　我们可以看到下面几点：</p>

<p>　　1）虚函数按照其声明顺序放于表中。</p>

<p>　　2）父类的虚函数在子类的虚函数前面。</p>

<p>　　一般继承（有虚函数覆盖）</p>

<p>　　覆盖父类的虚函数是很显然的事情，不然，虚函数就变得毫无意义。下面，我们来看一下，如果子类中有虚函数重载了父类的虚函数，会是一个什么样子？假设，我们有下面这样的一个继承关系。</p>

<p>　　为了让大家看到被继承过后的效果，在这个类的设计中，我只覆盖了父类的一个函数：f()。那么，对于派生类的实例的虚函数表会是下面的样子：</p>

<p>　　我们从表中可以看到下面几点，</p>

<p>　　1）覆盖的f()函数被放到了子类虚函数表中原来父类虚函数的位置。</p>

<p>　　2）没有被覆盖的函数依旧。</p>

<p>　　这样，我们就可以看到对于下面这样的程序，</p>

<p>　　Base *b = new Derive();</p>

<p>　　b->f();</p>

<p>　　由b所指的内存中的虚函数表（子类的虚函数表）的f()的位置已经被Derive::f()函数地址所取代，于是在实际调用发生时，是Derive::f()被调用了。这就实现了多态。</p>

<p>多重继承（无虚函数覆盖）</p>

<p>　　下面，再让我们来看看多重继承中的情况，假设有下面这样一个类的继承关系。注意：子类并没有覆盖父类的函数。</p>

<p>　　对于子类实例中的虚函数表，是下面这个样子：</p>

<p>　　我们可以看到：</p>

<p>　　1） 每个父类都有自己的虚表。</p>

<p>　　2） 子类的成员函数被放到了第一个父类的表中。（所谓的第一个父类是按照声明顺序来判断的）</p>

<p>　　这样做就是为了解决不同的父类类型的指针指向同一个子类实例，而能够调用到实际的函数。</p>

<p>　　多重继承（有虚函数覆盖）</p>

<p>　　下面我们再来看看，如果发生虚函数覆盖的情况。</p>

<p>　　下图中，我们在子类中覆盖了父类的f()函数。</p>

<p>　　下面是对于子类实例中的虚函数表的图：</p>

<p>　　我们可以看见，三个父类虚函数表中的f()的位置被替换成了子类的函数指针。这样，我们就可以用任一个父类指针来指向子类，并调用子类的f()了。如：</p>

<p>　　　Derive d; 　</p>

<p>　　　Base1 *b1 = &d; 　</p>

<p>　　　Base2 *b2 = &d; 　　</p>

<p>　　　Base3 *b3 = &d; 　</p>

<p>　　　b1->f(); //Derive::f()</p>

<p>　　　b2->f(); //Derive::f() 　</p>

<p>　　　b3->f(); //Derive::f() 　　</p>

<p>　　　b1->g(); //Base1::g() 　　</p>

<p>　　　b2->g(); //Base2::g() 　</p>

<p>　　　b3->g(); //Base3::g()</p>

<p>安全性</p>

<p>　　每次写C++的文章，总免不了要批判一下C++。这篇文章也不例外。通过上面的讲述，相信我们对虚函数表有一个比较细致的了解了。水可载舟，亦可覆舟。下面，让我们来看看我们可以用虚函数表来干点什么坏事吧。</p>

<p>　　一、尝试：通过父类型的指针（指向子类对象）访问子类自己的虚函数</p>

<p>　　我们知道，子类没有重载父类的虚函数是一件毫无意义的事情。因为多态也是要基于函数重载的。虽然在上面的图中我们可以看到子类的虚表中有Derive自己的虚函数，但我们根本不可能使用基类的指针来调用子类的自有虚函数：</p>

<p>　　Base1 *b1 = new Derive();</p>

<p>　　b1->f1(); //编译出错</p>

<p>　　任何妄图使用父类指针想调用子类中的未覆盖父类的成员函数的行为都会被编译器视为非法，所以，这样的程序根本无法编译通过。</p>

<p>　　但在运行时，我们可以通过指针的方式访问虚函数表来达到违反C++语义的行为。</p>

<p>　　二、尝试：通过父类型的指针（指向子类对象）访问父类的non-public虚函数</p>

<p>　　另外，如果父类的虚函数是private或是protected的，但这些非public的虚函数同样会存在于子类虚函数表中，所以我们同样可以使用访问虚函数表的方式来访问这些non-public的虚函数，这是很容易做到的。</p>

<p>　　如：
　　class Base { 　　private: 　　virtual void f() { cout &lt;&lt; “Base::f” &lt;&lt; endl; } 　　};</p>

<p>　　class Derive : public Base{ 　　}; 　　</p>

<p>　　typedef void(*Fun)(void); 　　</p>

<p>　　void main()</p>

<p>　　 { 　</p>

<p>　　　Derive d; 　</p>

<p>　　　Fun pFun = (Fun)<em>((int</em>)<em>(int</em>)(&amp;d)+0);</p>

<p>　　　　pFun(); 　　</p>

<p>　　}</p>

<p>　　结束语</p>

<p>　　C++这门语言是一门Magic的语言，对于程序员来说，我们似乎永远摸不清楚这门语言背着我们在干了什么。需要熟悉这门语言，我们就必需要了解C++里面的那些东西，需要去了解C++中那些危险的东西。不然，这是一种搬起石头砸自己脚的编程语言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++中的虚函数]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/c-plus-plus-zhong-de-xu-han-shu/"/>
    <updated>2013-05-18T22:46:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/c-plus-plus-zhong-de-xu-han-shu</id>
    <content type="html"><![CDATA[<p>转自:<a href="http://www.cnblogs.com/realyan/archive/2011/07/13/2105801.html">http://www.cnblogs.com/realyan/archive/2011/07/13/2105801.html</a></p>

<p>一.简介</p>

<p>虚函数是C++中用于实现多态(polymorphism)的机制。核心理念就是通过基类访问派生类定义的函数。假设我们有下面的类层次：</p>

<p>class A {</p>

<p>public: virtual void foo()</p>

<p>{</p>

<p>cout &lt;&lt; “A::foo() is called” &lt;&lt; endl;</p>

<p>}</p>

<p>};
class B: public A</p>

<p>{</p>

<p>public: virtual void foo()</p>

<p>{</p>

<p>cout &lt;&lt; “B::foo() is called” &lt;&lt; endl;</p>

<p>}</p>

<p>};</p>

<p>那么，在使用的时候，我们可以：　 A * a = new B();</p>

<p>a->foo(); // 在这里，a虽然是指向A的指针，但是被调用的函数(foo)却是B的!</p>

<p>这个例子是虚函数的一个典型应用，通过这个例子，也许你就对虚函数有了一些概念。它虚就虚在所谓“推迟联编”或者“动态联编”上，一个类函数的 调用并不是在编译时刻被确定的，而是在运行时刻被确定的。由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被成为“虚”函 数。
虚函数只能借助于指针或者引用来达到多态的效果，如果是下面这样的代码，则虽然是虚函数，但它不是多态的：</p>

<p>class A</p>

<p>{</p>

<p>public: virtual void foo();</p>

<p>};</p>

<p>class B: public A</p>

<p>{</p>

<p>virtual void foo();</p>

<p>};
void bar()</p>

<p>{</p>

<p>A a; a.foo(); // A::foo()被调用</p>

<p>}</p>

<p>1.1 多态　　在了解了虚函数的意思之后，再考虑什么是多态就很容易了。仍然针对上面的类层次，但是使用的方法变的复杂了一些：void bar(A * a)</p>

<p>{ a->foo(); // 被调用的是A::foo() 还是B::foo()？ }</p>

<p>因为foo()是个虚函数，所以在bar这个函数中，只根据这段代码，无从确定这里被调用的是A::foo()还是B::foo()，但是可以肯定的说：如果a指向的是A类的实例，则A::foo()被调用，如果a指向的是B类的实例，则B::foo()被调用。
这种同一代码可以产生不同效果的特点，被称为“多态”。
1.2 多态有什么用？ 　　多态这么神奇，但是能用来做什么呢？这个命题我难以用一两句话概括，一般的C++教程（或者其它面向对象语言的教程）都用一个画图的例子来展示多态的 用途，我就不再重复这个例子了，如果你不知道这个例子，随便找本书应该都有介绍。我试图从一个抽象的角度描述一下，回头再结合那个画图的例子，也许你就更 容易理解。
在面向对象的编程中，首先会针对数据进行抽象（确定基类）和继承（确定派生类），构成类层次。这个类层次的使用者在使用它们的时 候，如果仍然在需要基类的时候写针对基类的代码，在需要派生类的时候写针对派生类的代码，就等于类层次完全暴露在使用者面前。如果这个类层次有任何的改变 （增加了新类），都需要使用者“知道”（针对新类写代码）。这样就增加了类层次与其使用者之间的耦合，有人把这种情况列为程序中的“bad smell”之一。
多态可以使程序员脱离这种窘境。再回头看看1.1中的例子，bar()作为A-B这个类层次的使用者，它并不知道这个类层 次中有多少个类，每个类都叫什么，但是一样可以很好的工作，当有一个C类从A类派生出来后，bar()也不需要“知道”（修改）。这完全归功于多态–编 译器针对虚函数产生了可以在运行时刻确定被调用函数的代码。</p>

<p>1.3 如何“动态联编” 　　编译器是如何针对虚函数产生可以再运行时刻确定被调用函数的代码呢？也就是说，虚函数实际上是如何被编译器处理的呢？Lippman在深度探索C++对象模型[1]中的不同章节讲到了几种方式，这里把“标准的”方式简单介绍一下。
我所说的“标准”方式，也就是所谓的“VTABLE”机制。编译器发现一个类中有被声明为virtual的函数，就会为其搞一个虚函数表，也就是 VTABLE。VTABLE实际上是一个函数指针的数组，每个虚函数占用这个数组的一个slot。一个类只有一个VTABLE，不管它有多少个实例。派生 类有自己的VTABLE，但是派生类的VTABLE与基类的VTABLE有相同的函数排列顺序，同名的虚函数被放在两个数组的相同位置上。在创建类实例的 时候，编译器还会在每个实例的内存布局中增加一个vptr字段，该字段指向本类的VTABLE。通过这些手段，编译器在看到一个虚函数调用的时候，就会将 这个调用改写，针对1.1中的例子：</p>

<p>void bar(A * a) { a->foo(); }</p>

<p>会被改写为：</p>

<p>void bar(A * a) { (a->vptr[1])(); }</p>

<p>因为派生类和基类的foo()函数具有相同的VTABLE索引，而他们的vptr又指向不同的VTABLE，因此通过这样的方法可以在运行时刻决定调用哪个foo()函数。
虽然实际情况远非这么简单，但是基本原理大致如此。
1.4 overload和override 　　虚函数总是在派生类中被改写，这种改写被称为“override”。我经常混淆“overload”和“override”这两个单词。但是随着各类C++的书越来越多，后来的程序员也许不会再犯我犯过的错误了。但是我打算澄清一下：
override是指派生类重写基类的虚函数，就象我们前面B类中重写了A类中的foo()函数。重写的函数必须有一致的参数表和返回值（C++标准允 许返回值不同的情况，这个我会在“语法”部分简单介绍，但是很少编译器支持这个feature）。这个单词好象一直没有什么合适的中文词汇来对应，有人译 为“覆盖”，还贴切一些。 overload约定成俗的被翻译为“重载”。是指编写一个与已有函数同名但是参数表不同的函数。例如一个函数即可以接受整型数作为参数，也可以接受浮点 数作为参数。
二. 虚函数的语法 　　虚函数的标志是“virtual”关键字。
2.1 使用virtual关键字　　考虑下面的类层次：</p>

<p>class A { public: virtual void foo(); };
class B: public A { public: void foo(); // 没有virtual关键字! };
class C: public B // 从B继承，不是从A继承！ { public: void foo(); // 也没有virtual关键字！ };</p>

<p>这种情况下，B::foo()是虚函数，C::foo()也同样是虚函数。因此，可以说，基类声明的虚函数，在派生类中也是虚函数，即使不再使用virtual关键字。
2.2 纯虚函数　　如下声明表示一个函数为纯虚函数：</p>

<p>class A { public: virtual void foo()=0; // =0标志一个虚函数为纯虚函数 };</p>

<p>一个函数声明为纯虚后，纯虚函数的意思是：我是一个抽象类！不要把我实例化！纯虚函数用来规范派生类的行为，实际上就是所谓的“接口”。它告诉使用者，我的派生类都会有这个函数。
2.3 虚析构函数　　析构函数也可以是虚的，甚至是纯虚的。例如：</p>

<p>class A { public: virtual ~A()=0; // 纯虚析构函数 };</p>

<p>当一个类打算被用作其它类的基类时，它的析构函数必须是虚的。考虑下面的例子：</p>

<p>class A {</p>

<p>public: A() { ptra_ = new char[10];}</p>

<p>~A() { delete[] ptra_;} // 非虚析构函数</p>

<p>private: char * ptra<em>; };
class B: public A { public: B() { ptrb</em> = new char[20];}</p>

<p>~B() { delete[] ptrb<em>;} private: char * ptrb</em>; };
void foo() { A * a = new B; delete a; }</p>

<p>在这个例子中，程序也许不会象你想象的那样运行，在执行delete a的时候，实际上只有A::~A()被调用了，而B类的析构函数并没有被调用！这是否有点儿可怕？
如果将上面A::~A()改为virtual，就可以保证B::~B()也在delete a的时候被调用了。因此基类的析构函数都必须是virtual的。
纯虚的析构函数并没有什么作用，是虚的就够了。通常只有在希望将一个类变成抽象类（不能实例化的类），而这个类又没有合适的函数可以被纯虚化的时候，可以使用纯虚的析构函数来达到目的。
2.4 虚构造函数？ 　　构造函数不能是虚的。
三. 虚函数使用技巧</p>

<p>3.1 private的虚函数 　　考虑下面的例子：</p>

<p>class A { public:</p>

<p>void foo() { bar();}</p>

<p>private:</p>

<p>virtual void bar() { …}</p>

<p>};
class B: public A</p>

<p>{</p>

<p>private: virtual void bar() { …}</p>

<p>};</p>

<p>在这个例子中，虽然bar()在A类中是private的，但是仍然可以出现在派生类中，并仍然可以与public 或者protected的虚函数一样产生多态的效果。并不会因为它是private的，就发生A::foo()不能访问B::bar()的情况，也不会发 生B::bar()对A::bar()的override不起作用的情况。
这种写法的语意是：A告诉B，你最好override我的bar()函数，但是你不要管它如何使用，也不要自己调用这个函数。
3.2 构造函数和析构函数中的虚函数调用　　一个类的虚函数在它自己的构造函数和析构函数中被调用的时候，它们就变成普通函数了，不“虚”了。也就是说不能在构造函数和析构函数中让自己“多态”。例如：</p>

<p>class A {</p>

<p>public: A() { foo();} // 在这里，无论如何都是A::foo()被调用！</p>

<p>~A() { foo();} // 同上</p>

<p>virtual void foo();</p>

<p>};
class B: public A</p>

<p>{</p>

<p>public: virtual void foo();</p>

<p>};
void bar()</p>

<p>{</p>

<p>A * a = new B;</p>

<p>delete a;</p>

<p>}</p>

<p>如果你希望delete a的时候，会导致B::foo()被调用，那么你就错了。同样，在new B的时候，A的构造函数被调用，但是在A的构造函数中，被调用的是A::foo()而不是B::foo()。
3.3 多继承中的虚函数 3.4 什么时候使用虚函数 　　在你设计一个基类的时候，如果发现一个函数需要在派生类里有不同的表现，那么它就应该是虚的。从设计的角度讲，出现在基类中的虚函数是接口，出现在派生类中的虚函数是接口的具体实现。通过这样的方法，就可以将对象的行为抽象化。
以设计模式[2]中Factory Method模式为例，Creator的factoryMethod()就是虚函数，派生类override这个函数后，产生不同的Product类，被 产生的Product类被基类的AnOperation()函数使用。基类的AnOperation()函数针对Product类进行操作，当然 Product类一定也有多态（虚函数）。</p>

<p>另外一个例子就是集合操作，假设你有一个以A类为基类的类层次，又用了一个std::vector来保存这个类层次中不同类的实例指针，那么你一定希望在对这个集合中的类进行操作的时候，不要把每个指针再cast回到它原来的类型（派生类），而是希望对他们进行同样的操作。那么就应该将这个“一样的操作”声明为virtual。
现实中，远不只我举的这两个例子，但是大的原则都是我前面说到的“如果发现一个函数需要在派生类里有不同的表现，那么它就应该是虚的”。这句话也可以反过来说：“如果你发现基类提供了虚函数，那么你最好override它”。</p>

<p>附：C++中的虚函数和纯虚函数用法</p>

<p>1.虚函数和纯虚函数可以定义在同一个类(class)中，含有纯虚函数的类被称为抽象类（abstract class），而只含有虚函数的类（class）不能被称为抽象类（abstract class）。
2.虚函数可以被直接使用，也可以被子类（sub class）重载以后以多态的形式调用，而纯虚函数必须在子类（sub class）中实现该函数才可以使用，因为纯虚函数在基类（base class） 只有声明而没有定义。
3.虚函数和纯虚函数都可以在子类（sub class）中被重载，以多态的形式被调用。
　　4.虚函数和纯虚函数通常存在于抽象基类（abstract base class -ABC）之中，被继承的子类重载，目的是提供一个统一的接口。
　　5. 虚函数的定义形式：virtual {method body} ；纯虚函数的定义形式：virtual { } = 0; 在虚函数和纯虚函数的定义中不能有static标识符，原因很简单，被static修饰的函数在编译时候要求前期bind,然而虚函数却是动态绑定 （run-time bind），而且被两者修饰的函数生命周期（life recycle）也不一样。</p>

<p>6.如果一个类中含有纯虚函数，那么任何试图对该类进行实例化的语句都将导致错误的产生，因为抽象基类（ABC）是不能被直接调用的。必须被子类继承重载以后，根据要求调用其子类的方法。
以下为一个简单的虚函数和纯虚寒数的使用演示，目的是抛砖引玉！</p>

<p>class Virtualbase</p>

<p>{</p>

<p>public:</p>

<p>virtual void Demon()= 0; //prue virtual function</p>

<p>virtual void Base() {cout&lt;&lt;”this is farther class”&lt;}; //sub class</p>

<p>void main() {  Virtualbase* inst = new SubVirtual(); //multstate pointer</p>

<p>inst->Demon();</p>

<p>inst->Base(); // inst = new Virtualbase(); // inst->Base()</p>

<p>return ;</p>

<p>}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[as acoder]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/as-acoder/"/>
    <updated>2013-05-18T22:46:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/as-acoder</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20位运算知多少2]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/20wei-yun-suan-zhi-duo-shao-2/"/>
    <updated>2013-05-18T22:46:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/20wei-yun-suan-zhi-duo-shao-2</id>
    <content type="html"><![CDATA[<p>int getMaxInt1(){
  return ( 1 &lt;&lt; 31 ) – 1; //优先级括号不能省略
}
int getMaxInt2(){
  return ~( 1 &lt;&lt; 31 );
}
int getMaxInt3(){
  return ( 1 &lt;&lt; -1 ) – 1;  //gcc 不支持
}
int getMaxInt4(){
  return ( (unsigned int) – 1 ) >> 1;
}
int getMinInt5(){
  return 1 &lt;&lt; 31; //获取int类型的最小值
}
int getMinInt6(){
  return 1 &lt;&lt; -1; //gcc 不支持
}
int getMaxLong(){
  return ((unsigned long) – 1 ) >> 1;
}
int getMinLong(){
  return 1 &lt;&lt; 63;
}
int mulTwo(int n){
   return n &lt;&lt; 1;
}
int divTwo(int n){
  return n >> 1;
}
int mulTwoPower(int n,int m){
 //n<em>(2<sup>m</sup>)
  return n &lt;&lt; m;
}
int divTwoPower(int n,int m){
 //n/(2<sup>m</sup>)
  return n >> m;
}
bool isOddNumber(int n){
  return (n &amp; 1) == 1;
}
void swap1(int a,int b){
 a ^= b;
 b ^= a;
 a ^= b;
 cout&lt;&lt;a&lt;&lt;” “&lt;&lt;b&lt;&lt;endl;
}
void swap2(int </em>a,int <em>b){
 (</em>a) ^= (<em>b) ^= (</em>a) ^= (<em>b);
}
int abs(int n){
  return (n<sup> n >> 31 </sup>) &ndash;( n >> 31 );
}
int main(int argc,char </em>argv[])
{
   /*</p>

<pre><code>*位运算的20则
* */
int max1 = getMaxInt1();
int max2 = getMaxInt2();
int max3 = getMaxInt4();
int min1 = getMinInt5();
int min2 = getMinInt6();
int max4 = getMaxLong();
int min3 = getMinLong();
int num1 = mulTwo(2);
int num2 = divTwo(2);
int num3 = mulTwoPower(2,1);
int num4 = divTwoPower(2,1);
int num5 = isOddNumber(4);
int num6 = isOddNumber(3);
int a=3;
int b=4;
int a1=3;
int b1=4;
a ^= b;
b ^= a;
a ^= b;
//cout&lt;&lt;a&lt;&lt;”  “&lt;&lt;b&lt;&lt;endl;
//cout&lt;&lt;max1&lt;&lt;” “&lt;&lt;max2&lt;&lt;” “&lt;&lt;max3&lt;&lt;endl;
//cout&lt;&lt;min1&lt;&lt;” “&lt;&lt;min2&lt;&lt;endl;
//cout&lt;&lt;max4&lt;&lt;endl;
//cout&lt;&lt;min3&lt;&lt;endl;
//cout&lt;&lt;num1&lt;&lt;” “&lt;&lt;num2&lt;&lt;endl;
//cout&lt;&lt;num3&lt;&lt;” “&lt;&lt;num4&lt;&lt;endl;
//cout&lt;&lt;num5&lt;&lt;” “&lt;&lt;num6&lt;&lt;endl;
//swap1(a,b);
//cout&lt;&lt;a&lt;&lt;” “&lt;&lt;b&lt;&lt;endl;
//swap2(&amp;a1,&amp;b1);
//cout&lt;&lt;a1&lt;&lt;” “&lt;&lt;b1&lt;&lt;endl;
int abs1 = abs(-5);
cout&lt;&lt;abs1&lt;&lt;endl;
return 0;
</code></pre>

<p>}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20位运算知多少1]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/20wei-yun-suan-zhi-duo-shao-1/"/>
    <updated>2013-05-18T22:45:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/20wei-yun-suan-zhi-duo-shao-1</id>
    <content type="html"><![CDATA[<p>/<em>
 * =====================================================================================
 *
 *       Filename:  weiyi1.cpp
 *
 *    Description:  位运算
 *
 *        Version:  1.0
 *        Created:  2012/12/19 13:05:23
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  mdk-vim.cpp-c (mdk), <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x6d;&#101;&#x6e;&#103;&#x64;&#97;&#105;&#107;&#x75;&#110;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x6d;&#x65;&#x6e;&#x67;&#100;&#97;&#105;&#107;&#117;&#110;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>
 *        Company:  cjluacm-vim-mdk
 *
 * =====================================================================================
 </em>/
int max1(int a,int b){
  return b &amp; ( (a-b) >> 31) | a &amp; (~(a-b) >> 31);
}
int max2(int x,int y){
  return x ^ ((x<sup>y</sup>) &amp; &ndash;(x &lt; y));
}
int min1(int a,int b){
  return a &amp; ((a-b) >> 31) | b &amp; (~(a-b) >> 31);
}
int min2(int x,int y){
  return y ^ ((x<sup>y</sup>) &amp; &ndash;(x &lt; y));
}
bool isSampSign(int x,int y){
  return (x<sup>y</sup>) >= 0;
}
int getTwo(int n){
 // 2<sup>n</sup>
 return 2 &lt;&lt; (n-1);
}
bool isTwo(int n){
 return n > 0 ? (n&amp;(n-1)) == 0:false;
}
int quyu(int m,int n){
  return m &amp; (n-1);
}
int getAgv1(int n,int m){
 return (n+m) >> 1;
}
int getAgv2(int x,int y){
 return ((x<sup>y</sup>) >> 1) + (x&amp;y);
}
int getBit(int n,int m){  //从低位到高位 取n的第m位
 return (n >> (m-1)) &amp; 1;
}
int setBit1(int n,int m){ //从低位到高位 将n的第m位置1
 return n | (1 &lt;&lt; (m-1));
}
int setBit2(int n,int m){ //从低位到高位 将n的第m位置0
 return n &amp; ~(1 &lt;&lt; (m-1));
}
int getnum1(int n){
  //get n+1
  return &ndash;~n;
}
int getnum2(int n){
 return ~-n;
}
int getnum3(int n){
 return ~n + 1;
}
int main(int argc,char *argv[])
{</p>

<pre><code>int num1 = max1(3,5);
int num2 = max2(3,5);
int num3 = min1(3,5);
int num4 = min2(3,5);
cout&lt;&lt;getnum3(3)&lt;&lt;endl;
//cout&lt;&lt;getBit2(4,1)&lt;&lt;endl;
//cout&lt;&lt;getAgv1(3,5)&lt;&lt;” “&lt;&lt;getAgv2(3,5)&lt;&lt;endl;
//cout&lt;&lt;quyu(2,4)&lt;&lt;” “&lt;&lt;quyu(5,3)&lt;&lt;endl;
//cout&lt;&lt;isTwo(4)&lt;&lt;” “&lt;&lt;isTwo(5)&lt;&lt;endl;
//cout&lt;&lt;getTwo(2)&lt;&lt;endl;
//cout&lt;&lt;isSampSign(-1,2)&lt;&lt;endl;;
//cout&lt;&lt;isSampSign(3,5)&lt;&lt;endl;
//cout&lt;&lt;num3&lt;&lt;” “&lt;&lt;num4&lt;&lt;endl;
//cout&lt;&lt;num1&lt;&lt;” “&lt;&lt;num2&lt;&lt;endl;
return 0;
</code></pre>

<p>}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[校赛]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/xiao-sai/"/>
    <updated>2013-05-18T22:39:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/xiao-sai</id>
    <content type="html"><![CDATA[<p>今天校赛~也是OJ升级以来面临正式的比赛的之一~lamp架构的抗压相比lnmp肯定弱些~OJ的优化还有一些工作没做好~后期会越来越好的~长颈鹿前浪已经死在沙滩上后浪还是很给力的~让我们看到12级的好苗子~11级还在猛进步~后生可畏啊~今天比赛过程中天师过来看了一眼~笑眯眯的说是不是题目偏难~后面自个又说练的太少~我大天师啊~</p>

<p>OJ对IE10的兼容性还是挺好的~在线IDE，test，划词翻译都可以正常使用,当然还是首选火狐和谷歌~好了就说这些吧</p>

<p>感谢大晨哥做出解题报告~大晨哥辛苦了~以下引用大晨哥的解题报告~长颈鹿加油~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/er-fen/"/>
    <updated>2013-05-18T22:39:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/er-fen</id>
    <content type="html"><![CDATA[<p>//从排好序的数组中找出k出现的字数</p>

<h1>include<iostream></h1>

<h1>include<cstdio></h1>

<h1>include<string></h1>

<p>using namespace std;
int GetFistK(int* data,int length,int k,int start,int end)
{
  if(start > end)
   return -1;
  int middleIndex = (start + end) / 2;
  int middleData = data[middleIndex];
  if(middleData == k)
  {
   if((middleIndex > 0 &amp;&amp; data[middleIndex-1]!=k)||middleIndex ==0)</p>

<pre><code>return middleIndex;
</code></pre>

<p>   else</p>

<pre><code>end = middleIndex – 1;
</code></pre>

<p>  }
  else if(middleData > k)
   end = middleIndex – 1;
  else
   start = middleIndex + 1;
  return GetFistK(data,length,k,start,end);
}
int GetLastK(int<em> data,int length,int k,int start,int end)
{
 if(start > end)
  return -1;
 int middleIndex = (start + end) / 2;
 int middleData = data[middleIndex];
 if(middleData == k)
 {
  if((middleIndex &lt; length – 1 &amp;&amp; data[middleIndex + 1] != k)||middleIndex == length -1 )
   return middleIndex;
  else
   start = middleIndex + 1;
 }
 else if(middleData &lt; k)
  start = middleIndex + 1;
 else
  end = middleIndex – 1;
 return GetLastK(data,length,k,start,end);
}
int GetNumberK(int</em> data,int length,int k)
{
   int number = 0;
   if(data != NULL &amp;&amp; length > 0)
   {</p>

<pre><code>int first = GetFistK(data,length,k,0,length – 1);
</code></pre>

<p> int last = GetLastK(data,length,k,0,length – 1);</p>

<p> if(first > -1 &amp;&amp; last > -1)
  number = last – first + 1;
   }
   return number;
}
int main()
{</p>

<pre><code>int data[8] = {3,3,3,3,3,3,4,5};
</code></pre>

<p> int k = 4;
 int total=GetNumberK(data,8,k);
 cout&lt;&lt;total&lt;&lt;endl;
 return 0;
}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[长颈鹿OJ]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/chang-jing-lu-oj/"/>
    <updated>2013-05-18T22:39:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/chang-jing-lu-oj</id>
    <content type="html"><![CDATA[<p>计量OJ简史</p>

<p>/<em>
 * =====================================================================================
 *
 *       Filename:  oj.cpp
 *
 *    Description:  计量oj简史2
 *
 *        Version:  1.0
 *        Created:  2013/1/12 19:46:55
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  mdk-vim.cpp-c (mdk), <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#109;&#100;&#107;&#64;&#x73;&#101;&#114;&#118;&#101;&#114;&#46;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#x6d;&#x64;&#x6b;&#x40;&#x73;&#x65;&#x72;&#118;&#101;&#x72;&#x2e;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#46;&#x63;&#111;&#x6d;</a>
 *        Company:  cjluacm-vim-mdk
 *
 * =====================================================================================
 </em>/</p>

<h1>pragma warning(disable:一切阻力)</h1>

<h1>include &lt; 院领导 ></h1>

<h1>include &lt; 尤天师 ></h1>

<h1>include &lt; 308 全体成员 ></h1>

<p>using 一台很老的 DELL 台式机 std;</p>

<h1>define              OJ史前时代      ( 以UVA转载题为主 );</h1>

<h1>define              OJ目前大事      ( 稳步发展月赛 );</h1>

<h1>define              ACM基地记事     ( 出题解题做题 );</h1>

<p>int main()</p>

<p>{</p>

<pre><code>        time        = 2009 / 7 /28;

        place       = hdu 信息楼一楼;

        action      = *****ACM研讨交流会;

        person      = 院领导 + 尤天师 + 308 全体成员 + 部分08级同学;

        harvest     = ” 领导一定支持 ~~! ” + 水果若干;

        time        = 2009 / 9 / 12;

        action      = 尤天师提交月赛申请书;

        time       += 3;

        action      = 月赛审核通过;

        for(   time = 2009 / 9 / 28; time != 2009 / 10 / 5; ++time )

        {

             action = OJ construting;

        }

        time        = 9 / 10 / 2009;

        action      = OJ 在后院论坛开辟子版块;               

        time        = 21 / 11 / 2009;

        action      = 招新赛完毕;

        time        = 1 / 12 / 2009;

        action      = 新人入住完毕;

        time        = 5/ 01/ 2010;

        action      = 月赛进入全校范围;

        while ( time++ != 2011 / 7 )

        {

                  action = OJ updating;

        }

        /*
         *未获得前辈们的认可就将OJ转换
         *在此向前辈们致歉
         * 我们的宗旨是将OJ打造成造福于全校搞IT的学生
         * */

        time        =  5 / 6 / 2012

        action      =  平台转换 windows-&gt;linux 内核开源

        time        =  25 / 6 / 2012

        action      =  web 端修改完毕 数据无损伤导入 新oj 新特性

        time        =  * / 7 / 2012

        action      =  投入使用(期间省赛被挫三人组组织两场比赛)

        time        = 28 / 10 / 2012

        action      = 域名重新对外(acm.cjlu.edu.cn)

        while ( time ++ != 2014 / 7 )

        {

               action1 = OJ updating

               action2 = CODE2AC()

        }

        return 0;
</code></pre>

<p>}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[acm与数模]]></title>
    <link href="http://mdkvimer.github.io/blog/2013/05/18/acmyu-shu-mo/"/>
    <updated>2013-05-18T22:38:00+08:00</updated>
    <id>http://mdkvimer.github.io/blog/2013/05/18/acmyu-shu-mo</id>
    <content type="html"><![CDATA[<p>利用半小时的时间<del>~为4.14日感叹一下</del>这里利用某大牛的部分篇幅。</p>

<pre><code>  学校总喜欢拿数学建模和ACM程序设计竞赛进行对比，的确，这两个比赛都是
</code></pre>

<p>三个人一个队伍，应该说都考察了参赛选手全面的素质。然而毕竟区别还是很大的，
数学建模竞赛是教育部倡导的几项大学传统赛事之一，相信会有很多大学会像我们学
校一样看重这一点—–官方认证</p>

<pre><code> 在说数学建模竞赛本身是一个很好的竞赛形式，的确能提高数学素养，在科学研究数
</code></pre>

<p>学建模发挥的作用是越来越明显，实验室产生的大量数据绝对是需要数学处理才能产
生真正的科学结果，完全凭直觉的时代早已经过去了。教育部倡导这项竞赛的确是用
心良苦，真正用心参加过数学建模竞赛的人肯定能得到科学研究的锻炼。然而似乎在
中国这样国情下，各个学校名利心太强了，使得数学建模竞赛这一个如此好的竞赛形
式带来了如此多的不公正，无论从竞赛过程还是评奖过程，指导老师参与的都过多
了，以至有人发出感叹“数学建模究竟是学生参加，还是导师参加呢？”。再就是评
奖的过程的确是人为因素大了点，受大干扰也大了些。</p>

<pre><code> 现在的数学建模竞赛好多都是成了伪造数据竞赛，从赛区的初评来看是产生这种情况
</code></pre>

<p>的温床。赛区的初评都是看结果的，结果的好坏直接影响着一篇论文的质量，只要结
果不理想的将很可能是直接刷掉，于是出现了好多数据伪造，只要模型的结果不理
想，在时间不允许的前提下只能这样，要不然尽管在问题的解决中有创新，但是人家
根本就看不到了。这样的事实看多了，可以说麻木了。看着那么多伪造数据的论文拿
国家大奖我只能说数学建模已经在慢慢的贬值，给人一种上当受骗的感觉。数学建模
就是鼓励造假，越假越好，越假越能拿大奖。看到了拿全国大奖的同学，问他们结果
怎么那么好，一句话伤透了心“我们的数据都是伪造的”。伤心之余，被获奖的网友们称
我们队“经验不足，人太老实”进行总结。教训是惨重的，对心灵的打击是不能磨灭的。</p>

<pre><code>从此对数学建模的印象就不如之前的那么虔诚，感觉都是假的，尽管不想造假，但是
</code></pre>

<p>造假获奖得到的是学校的奖励与鼓励，得到的是各种荣誉。从这个方面至少反映了现
在的大学造假之风已经比较严重了。</p>

<pre><code>相反ACM程序设计竞赛给人的是一种积极向上，公平，公正，机器评判有效的避免了人
</code></pre>

<p>为误差，对与不对自有数据进行测试。而且ACM程序设计竞赛还给人一种永远要继续学
习的动力，考察的的各个方面，数学，编程能力，相关学科背景，身体素质，心理素
质，团队合作。。。。。。热爱这个活动的人相信大部分都是一种兴趣，一种发自内
心的热爱，一种追求梦想，一种永远上进的精神。ACM需要长期的积累，没有随便就成
功的，从这个意义上说，ACM也是一种奥林匹克，需要长期的锻炼，加上现场的良好发
挥才能取得好成绩。一个考试成绩很牛的学生可以对经典的最短路
算法，最小生成树算法讲得头头是道，然而就是不能写程序，不能实现自己的想法，
甚至很多人对于经典算法是为了考试而死记硬背下来的。科学技术领域日新月异，计
算机算法领域也是如此，大学本科的教育教材方面已经是难跟上发展，ACM程序设计则
提供了这样一个引领前进的平台，很多教科书上没有的算法与思考方法都可以在赛题
上找到答案，而且通过题目的训练不仅能锻炼编程能力，至少对算法也是应该理解。
所谓“与时俱进”在这里也得到了最大的体现。</p>

<pre><code>                                                 ~~仅以此篇祭拜我一年多来的青春
</code></pre>
]]></content>
  </entry>
  
</feed>
